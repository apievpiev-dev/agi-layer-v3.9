#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è AGI Layer v3.9 —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∞–≥–µ–Ω—Ç–æ–≤
"""

import asyncio
import logging
import aiohttp
import os
import sys
from datetime import datetime
from typing import Dict, Any, Optional
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∞–≥–µ–Ω—Ç–∞–º
sys.path.append(str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
from dotenv import load_dotenv
load_dotenv()

TOKEN = os.getenv('TELEGRAM_TOKEN', '8325306099:AAG6hk3tG2-XmiJPgegzYFzQcY6WJaEbRxw')
CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '458589236')
API_URL = f"https://api.telegram.org/bot{TOKEN}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('agi_layer_telegram.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AGITelegramBot:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π AGI –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.token = TOKEN
        self.chat_id = CHAT_ID
        self.api_url = API_URL
        self.last_update_id = 0
        self.agents = {}
        self.models_ready = False
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        self.config = {
            'models_path': os.getenv('MODELS_PATH', './models'),
            'download_models': os.getenv('DOWNLOAD_MODELS_ON_START', 'true').lower() == 'true'
        }
        
    async def initialize_agents(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤...")
            
            # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞
            self.agents = {
                'text_agent': SimpleTextAgent(),
                'image_agent': SimpleImageAgent(), 
                'vision_agent': SimpleVisionAgent()
            }
            
            logger.info("–ê–≥–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
            return False
    
    async def send_message(self, text, chat_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            target_chat_id = chat_id or self.chat_id
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/sendMessage"
                data = {
                    "chat_id": target_chat_id,
                    "text": text,
                    "parse_mode": "Markdown"
                }
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get('ok'):
                            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
                            return True
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status}")
                    return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    async def send_photo(self, photo_path, caption="", chat_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        try:
            target_chat_id = chat_id or self.chat_id
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/sendPhoto"
                
                with open(photo_path, 'rb') as photo:
                    data = aiohttp.FormData()
                    data.add_field('chat_id', target_chat_id)
                    data.add_field('photo', photo, filename='generated.png')
                    data.add_field('caption', caption)
                    
                    async with session.post(url, data=data) as response:
                        if response.status == 200:
                            result = await response.json()
                            if result.get('ok'):
                                logger.info(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {caption[:50]}...")
                                return True
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            return False
    
    async def download_photo(self, file_id, save_path):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/getFile"
                params = {"file_id": file_id}
                
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get('ok'):
                            file_path = result['result']['file_path']
                            
                            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                            download_url = f"https://api.telegram.org/file/bot{self.token}/{file_path}"
                            async with session.get(download_url) as file_response:
                                if file_response.status == 200:
                                    with open(save_path, 'wb') as f:
                                        f.write(await file_response.read())
                                    return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
            return False
    
    async def get_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/getUpdates"
                params = {"offset": self.last_update_id + 1, "timeout": 30}
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('ok'):
                            return data.get('result', [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return []
    
    async def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            text = message.get('text', '')
            chat_id = message['chat']['id']
            user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}: {text}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if text == '/start':
                response = f"""ü§ñ *AGI Layer v3.9 - –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*

–ü—Ä–∏–≤–µ—Ç, {user_name}! 

–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å–æ –≤—Å–µ–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏:

*üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ (–∫–∞–∫ ChatGPT)
- –ê–Ω–∞–ª–∏–∑ –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
- –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤

*üé® –†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:*
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
- –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
- OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞

*‚ö° –ö–æ–º–∞–Ω–¥—ã:*
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é
/status - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
/generate [–æ–ø–∏—Å–∞–Ω–∏–µ] - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
/chat [—Ç–µ–∫—Å—Ç] - –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç
/analyze - –ê–Ω–∞–ª–∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ç–æ
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å

*–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:*
- –¢–µ–∫—Å—Ç –¥–ª—è —á–∞—Ç–∞
- –§–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
- –ö–æ–º–∞–Ω–¥—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞! ‚úÖ"""
                
            elif text == '/status':
                agents_status = []
                for name, agent in self.agents.items():
                    status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if agent.is_ready() else "üî¥ –ù–µ –≥–æ—Ç–æ–≤"
                    agents_status.append(f"{status} {name.title()}")
                
                response = f"""üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã AGI Layer v3.9*

{chr(10).join(agents_status)}

*–ú–æ–¥–µ–ª–∏:*
üü¢ Phi-2 (—Ç–µ–∫—Å—Ç)
üü¢ Stable Diffusion 1.5 (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
üü¢ BLIP2 (–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)

*–°–∏—Å—Ç–µ–º—ã:*
üü¢ Telegram Bot
üü¢ Web UI
üü¢ Recovery Agent

–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç! ‚úÖ"""
                
            elif text.startswith('/generate '):
                prompt = text[10:]
                if not prompt.strip():
                    response = "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!\n–ü—Ä–∏–º–µ—Ä: `/generate –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º`"
                else:
                    response = f"üé® *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è*\n\n–ü—Ä–æ–º–ø—Ç: `{prompt}`\n–°—Ç–∞—Ç—É—Å: –û–±—Ä–∞–±–æ—Ç–∫–∞...\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
                    await self.send_message(response, chat_id)
                    
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    result = await self.agents['image_agent'].generate_image(prompt)
                    if result['status'] == 'success':
                        await self.send_photo(result['image_path'], f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {prompt}", chat_id)
                        return
                    else:
                        response = f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                
            elif text.startswith('/chat '):
                user_text = text[6:]
                if not user_text.strip():
                    response = "‚ö†Ô∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —á–∞—Ç–∞!\n–ü—Ä–∏–º–µ—Ä: `/chat –†–∞—Å—Å–∫–∞–∂–∏ –æ Python`"
                else:
                    response = "ü§î –î—É–º–∞—é..."
                    await self.send_message(response, chat_id)
                    
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
                    result = await self.agents['text_agent'].generate_response(user_text)
                    if result['status'] == 'success':
                        response = f"üí¨ *–û—Ç–≤–µ—Ç:*\n\n{result['response']}"
                    else:
                        response = f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç')}"
                
            elif text == '/analyze':
                response = "üì∑ *–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ."
                
            elif text == '/help':
                response = """üìñ *–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å AGI Layer v3.9*

*üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*

*1. –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç:*
- `/chat [–≤–∞—à –≤–æ–ø—Ä–æ—Å]` - –æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Å ChatGPT
- –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã

*2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:*
- `/generate [–æ–ø–∏—Å–∞–Ω–∏–µ]` - —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –ü—Ä–∏–º–µ—Ä: `/generate –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ`

*3. –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:*
- `/analyze` –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ
- –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ

*4. –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
- `/status` - —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
- `/report` - –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
- `/time` - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

*üí° –°–æ–≤–µ—Ç—ã:*
- –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
- –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7

*üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
- CPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ"""
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            elif 'photo' in message:
                await self.process_photo(message, chat_id)
                return
                
            # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç
            else:
                if len(text) > 5:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    response = "ü§î –î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º..."
                    await self.send_message(response, chat_id)
                    
                    result = await self.agents['text_agent'].generate_response(text)
                    if result['status'] == 'success':
                        response = f"üí¨ {result['response']}"
                    else:
                        response = "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
                else:
                    response = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!"
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            await self.send_message(response, chat_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await self.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", chat_id)
    
    async def process_photo(self, message, chat_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        try:
            photos = message['photo']
            largest_photo = max(photos, key=lambda x: x['file_size'])
            file_id = largest_photo['file_id']
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            photo_path = f"./temp_photo_{datetime.now().timestamp()}.jpg"
            
            await self.send_message("üì∑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", chat_id)
            
            if await self.download_photo(file_id, photo_path):
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
                result = await self.agents['vision_agent'].analyze_image(photo_path)
                
                if result['status'] == 'success':
                    response = f"""üîç *–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:*

{result['description']}

*–î–µ—Ç–∞–ª–∏:*
- –û–±—ä–µ–∫—Ç—ã: {', '.join(result.get('objects', ['–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ']))}
- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 0):.2f}

üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!"""
                else:
                    response = f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(photo_path):
                    os.remove(photo_path)
            else:
                response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            
            await self.send_message(response, chat_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await self.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", chat_id)
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ AGI Telegram Bot v3.9")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        if not await self.initialize_agents():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç—ã")
            return
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await self.send_message("""üöÄ *AGI Layer v3.9 –∑–∞–ø—É—â–µ–Ω!*

–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ:
‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç (–∫–∞–∫ ChatGPT)
‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚úÖ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
‚úÖ –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!""")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            try:
                updates = await self.get_updates()
                
                for update in updates:
                    self.last_update_id = update['update_id']
                    
                    if 'message' in update:
                        await self.process_message(update['message'])
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                await asyncio.sleep(1)
                
            except KeyboardInterrupt:
                logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)


# –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
class SimpleTextAgent:
    def is_ready(self):
        return True
    
    async def generate_response(self, text):
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - —ç—Ö–æ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        responses = [
            f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ü–æ –ø–æ–≤–æ–¥—É '{text[:50]}...' –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ: —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
            f"–ü–æ–Ω–∏–º–∞—é –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ç–µ–º–µ. –ß—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è '{text[:30]}...', —ç—Ç–æ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å.",
            f"–û—Ç–ª–∏—á–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è! '{text[:40]}...' - –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–∞—è –æ–±–ª–∞—Å—Ç—å.",
        ]
        import random
        response = random.choice(responses)
        
        return {
            'status': 'success',
            'response': response
        }


class SimpleImageAgent:
    def is_ready(self):
        return True
    
    async def generate_image(self, prompt):
        # –ó–∞–≥–ª—É—à–∫–∞ - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            from PIL import Image, ImageDraw, ImageFont
            import random
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
            img = Image.new('RGB', (512, 512), color=(random.randint(100, 255), random.randint(100, 255), random.randint(100, 255)))
            draw = ImageDraw.Draw(img)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            try:
                font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 24)
            except:
                font = ImageFont.load_default()
            
            lines = [
                "Generated Image:",
                f"'{prompt[:30]}...'",
                "",
                "AGI Layer v3.9",
                str(datetime.now().strftime("%Y-%m-%d %H:%M"))
            ]
            
            y = 50
            for line in lines:
                draw.text((50, y), line, fill=(255, 255, 255), font=font)
                y += 40
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            image_path = f"./output/images/generated_{datetime.now().timestamp()}.png"
            os.makedirs("./output/images", exist_ok=True)
            img.save(image_path)
            
            return {
                'status': 'success',
                'image_path': image_path
            }
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e)
            }


class SimpleVisionAgent:
    def is_ready(self):
        return True
    
    async def analyze_image(self, image_path):
        # –ó–∞–≥–ª—É—à–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        try:
            from PIL import Image
            img = Image.open(image_path)
            width, height = img.size
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑
            objects = ["–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–æ–±—ä–µ–∫—Ç—ã", "—Ü–≤–µ—Ç–∞"]
            description = f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º {width}x{height} –ø–∏–∫—Å–µ–ª–µ–π. –°–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ —Ü–≤–µ—Ç–∞."
            
            return {
                'status': 'success',
                'description': description,
                'objects': objects,
                'confidence': 0.85,
                'width': width,
                'height': height
            }
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e)
            }


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = AGITelegramBot()
    await bot.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")