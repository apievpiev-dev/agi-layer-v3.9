"""
ChatCoordinator - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —á–∞—Ç–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ –¥–ª—è AGI Layer v3.9
"""

import asyncio
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime
import json

from .text_agent import TextAgent
from .vision_agent import VisionAgent  
from .image_agent import ImageAgent
from .base_agent import Task


class ChatCoordinator:
    """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.logger = logging.getLogger(__name__)
        
        # –ê–≥–µ–Ω—Ç—ã
        self.text_agent: Optional[TextAgent] = None
        self.vision_agent: Optional[VisionAgent] = None
        self.image_agent: Optional[ImageAgent] = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–æ–≤
        self.chat_sessions: Dict[int, Dict[str, Any]] = {}
        
        # –§–ª–∞–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.agents_initialized = False
        self.demo_mode = True
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –∏ –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            self.logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChatCoordinator...")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
            await self._try_initialize_agents()
            
            self.logger.info(f"‚úÖ ChatCoordinator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–¥–µ–º–æ —Ä–µ–∂–∏–º: {self.demo_mode})")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChatCoordinator: {e}")
            self.demo_mode = True
    
    async def _try_initialize_agents(self):
        """–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            self.logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TextAgent
            # self.text_agent = TextAgent(self.config)
            # await self.text_agent._initialize_agent()
            # self.logger.info("‚úÖ TextAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VisionAgent  
            # self.vision_agent = VisionAgent(self.config)
            # await self.vision_agent._initialize_agent()
            # self.logger.info("‚úÖ VisionAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ImageAgent
            # self.image_agent = ImageAgent(self.config)
            # await self.image_agent._initialize_agent()
            # self.logger.info("‚úÖ ImageAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # self.agents_initialized = True
            # self.demo_mode = False
            
            self.logger.info("üöÄ –ê–≥–µ–Ω—Ç—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏")
            
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç—ã: {e}")
            self.logger.info("–†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ")
            self.demo_mode = True
    
    async def get_chat_session(self, chat_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞"""
        if chat_id not in self.chat_sessions:
            self.chat_sessions[chat_id] = {
                'history': [],
                'mode': 'chat',
                'context': {},
                'created_at': datetime.now(),
                'message_count': 0,
                'preferences': {
                    'language': 'ru',
                    'response_style': 'detailed',
                    'max_history': 20
                }
            }
        return self.chat_sessions[chat_id]
    
    async def process_text_message(self, chat_id: int, message: str, user_name: str = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            session = await self.get_chat_session(chat_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            session['history'].append({
                'role': 'user',
                'content': message,
                'user_name': user_name,
                'timestamp': datetime.now().isoformat()
            })
            session['message_count'] += 1
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            if self.text_agent and not self.demo_mode:
                response = await self._generate_neural_response(session, message)
            else:
                response = await self._generate_smart_demo_response(session, message)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            session['history'].append({
                'role': 'assistant',
                'content': response,
                'timestamp': datetime.now().isoformat()
            })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            max_history = session['preferences']['max_history']
            if len(session['history']) > max_history:
                session['history'] = session['history'][-max_history:]
            
            return response
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    async def _generate_neural_response(self, session: Dict[str, Any], message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            context = self._build_context(session, message)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è TextAgent
            task = Task(
                id=f"chat_{session['message_count']}",
                agent_name="text_agent",
                task_type="text_generation",
                data={
                    "prompt": context,
                    "max_length": 1024,
                    "temperature": 0.7,
                    "top_p": 0.9
                }
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
            result = await self.text_agent.process_task(task)
            
            if result["status"] == "success":
                return result["generated_text"]
            else:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é."
    
    def _build_context(self, session: Dict[str, Any], message: str) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        system_prompt = """–¢—ã - —É–º–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç AGI Layer. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –∏ –ø–æ–ª–µ–∑–Ω–æ.
–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.
–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏, –Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã."""
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        context_parts = [f"System: {system_prompt}"]
        
        recent_messages = session['history'][-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        for msg in recent_messages:
            if msg['role'] == 'user':
                context_parts.append(f"Human: {msg['content']}")
            else:
                context_parts.append(f"Assistant: {msg['content']}")
        
        context_parts.append(f"Human: {message}")
        context_parts.append("Assistant:")
        
        return "\n".join(context_parts)
    
    async def _generate_smart_demo_response(self, session: Dict[str, Any], message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ"""
        message_lower = message.lower()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
        response_generators = [
            self._handle_greetings,
            self._handle_questions_about_capabilities,
            self._handle_tech_questions,
            self._handle_science_questions,
            self._handle_creative_requests,
            self._handle_help_requests,
            self._handle_general_conversation
        ]
        
        for generator in response_generators:
            response = await generator(message, message_lower, session)
            if response:
                return response
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        return await self._generate_contextual_response(message, session)
    
    async def _handle_greetings(self, message: str, message_lower: str, session: Dict[str, Any]) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
        greetings = ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', '—Ö–∞–π', 'hello', 'hi']
        if any(word in message_lower for word in greetings):
            responses = [
                "–ü—Ä–∏–≤–µ—Ç! –Ø AGI Layer - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏! ü§ñ",
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞–¥ –Ω–∞—à–µ–º—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?",
                "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è. –û —á–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏–º?"
            ]
            import random
            return random.choice(responses)
        return None
    
    async def _handle_questions_about_capabilities(self, message: str, message_lower: str, session: Dict[str, Any]) -> Optional[str]:
        """–í–æ–ø—Ä–æ—Å—ã –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö"""
        capability_keywords = ['—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', '—Ñ—É–Ω–∫—Ü–∏–∏', '—á—Ç–æ –º–æ–∂–µ—à—å', '–ø–æ–º–æ—á—å —Å —á–µ–º']
        if any(keyword in message_lower for keyword in capability_keywords):
            return """ü§ñ **–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**

üß† **–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥**
‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ª—é–±—ã–º —Ç–µ–º–∞–º
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –±–µ—Å–µ–¥—É
‚Ä¢ –ü–æ–º–æ–≥–∞—é —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á

üé® **–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏**
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
‚Ä¢ –ü–æ–º–æ—â—å —Å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏

üìö **–û–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç–∞**
‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
‚Ä¢ –ü–æ–º–æ—â—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

üí° **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏**
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
‚Ä¢ –ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å - —è –ø–æ–¥–±–µ—Ä—É –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –ø–æ–º–æ—á—å!"""
        return None
    
    async def _handle_tech_questions(self, message: str, message_lower: str, session: Dict[str, Any]) -> Optional[str]:
        """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã"""
        tech_keywords = ['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–¥', 'python', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è']
        if any(keyword in message_lower for keyword in tech_keywords):
            return """üíª **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã - –º–æ—è —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞!**

–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:
‚Ä¢ **–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º** - Python, JavaScript, C++, –∏ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏
‚Ä¢ **–ê–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏** - –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
‚Ä¢ **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π** - –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
‚Ä¢ **–û—Ç–ª–∞–¥–∫–æ–π** - –ø–æ–∏—Å–∫ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
‚Ä¢ **DevOps** - —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è, CI/CD
‚Ä¢ **Machine Learning** - –º–æ–¥–µ–ª–∏, –æ–±—É—á–µ–Ω–∏–µ, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞ –∏–ª–∏ –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ - –ø—Ä–∏—Å—ã–ª–∞–π—Ç–µ, —Ä–∞–∑–±–µ—Ä–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ! 

–ö–∞–∫–∞—è –∏–º–µ–Ω–Ω–æ –æ–±–ª–∞—Å—Ç—å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"""
        return None
    
    async def _handle_science_questions(self, message: str, message_lower: str, session: Dict[str, Any]) -> Optional[str]:
        """–ù–∞—É—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
        science_keywords = ['–∫–æ—Å–º–æ—Å', '—Ñ–∏–∑–∏–∫–∞', '—Ö–∏–º–∏—è', '–±–∏–æ–ª–æ–≥–∏—è', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–Ω–∞—É–∫–∞', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ']
        if any(keyword in message_lower for keyword in science_keywords):
            return """üî¨ **–ù–∞—É–∫–∞ - —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∑–Ω–∞–Ω–∏–π!**

–ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å:
‚Ä¢ **–§–∏–∑–∏–∫—É** - –æ—Ç –∫–≤–∞–Ω—Ç–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–∏ –¥–æ –∞—Å—Ç—Ä–æ—Ñ–∏–∑–∏–∫–∏
‚Ä¢ **–ú–∞—Ç–µ–º–∞—Ç–∏–∫—É** - –∞–ª–≥–µ–±—Ä—É, –≥–µ–æ–º–µ—Ç—Ä–∏—é, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∞–Ω–∞–ª–∏–∑
‚Ä¢ **–ë–∏–æ–ª–æ–≥–∏—é** - –æ—Ç –º–æ–ª–µ–∫—É–ª—è—Ä–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ —ç–∫–æ—Å–∏—Å—Ç–µ–º
‚Ä¢ **–•–∏–º–∏—é** - —Ä–µ–∞–∫—Ü–∏–∏, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ **–ö–æ—Å–º–æ—Å** - –ø–ª–∞–Ω–µ—Ç—ã, –∑–≤–µ–∑–¥—ã, –≥–∞–ª–∞–∫—Ç–∏–∫–∏, —á–µ—Ä–Ω—ã–µ –¥—ã—Ä—ã
‚Ä¢ **–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è** - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ —Ç–µ–æ—Ä–∏–∏

–ú–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏–ª–∏ —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.

–û –∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–∞—É–∫–∏ —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? üåü"""
        return None
    
    async def _handle_creative_requests(self, message: str, message_lower: str, session: Dict[str, Any]) -> Optional[str]:
        """–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã"""
        creative_keywords = ['—Å–æ–∑–¥–∞–π', '–ø—Ä–∏–¥—É–º–∞–π', '–Ω–∞–ø–∏—à–∏', '—Å–æ—á–∏–Ω–∏', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–∏–¥–µ—è', '–∫–æ–Ω—Ü–µ–ø—Ç']
        if any(keyword in message_lower for keyword in creative_keywords):
            return """üé® **–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ - —ç—Ç–æ –∑–¥–æ—Ä–æ–≤–æ!**

–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:
‚Ä¢ **–ì–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–¥–µ–π** - –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤, –±–∏–∑–Ω–µ—Å–∞, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞
‚Ä¢ **–ù–∞–ø–∏—Å–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–æ–≤** - —Å—Ç–∞—Ç—å–∏, —Ä–∞—Å—Å–∫–∞–∑—ã, —Å—Ü–µ–Ω–∞—Ä–∏–∏
‚Ä¢ **–°–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–π** - –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –¥–∏–∑–∞–π–Ω–∞, —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ **–ú–æ–∑–≥–æ–≤—ã–º —à—Ç—É—Ä–º–æ–º** - –ø–æ–∏—Å–∫ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤
‚Ä¢ **–ê–Ω–∞–ª–∏–∑–æ–º —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç** - –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∏ —Å–æ–≤–µ—Ç—ã

–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/generate [–æ–ø–∏—Å–∞–Ω–∏–µ]`

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å - —è –ø–æ–º–æ–≥—É –≤–æ–ø–ª–æ—Ç–∏—Ç—å –∏–¥–µ—é! ‚ú®"""
        return None
    
    async def _handle_help_requests(self, message: str, message_lower: str, session: Dict[str, Any]) -> Optional[str]:
        """–ó–∞–ø—Ä–æ—Å—ã –æ –ø–æ–º–æ—â–∏"""
        help_keywords = ['–ø–æ–º–æ–≥–∏', '–ø–æ–º–æ—â—å', '–Ω–µ –∑–Ω–∞—é', '–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å', '—á—Ç–æ –¥–µ–ª–∞—Ç—å', '–ø—Ä–æ–±–ª–µ–º–∞']
        if any(keyword in message_lower for keyword in help_keywords):
            return """ü§ù **–ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É!**

–ß—Ç–æ–±—ã –¥–∞—Ç—å –Ω–∞–∏–ª—É—á—à–∏–π —Å–æ–≤–µ—Ç, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ:
‚Ä¢ **–ö–∞–∫–∞—è –∑–∞–¥–∞—á–∞** —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–¥ –≤–∞–º–∏?
‚Ä¢ **–í –∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏** –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?
‚Ä¢ **–ß—Ç–æ —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏** –¥–µ–ª–∞—Ç—å?
‚Ä¢ **–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç** —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:
üìö –£—á–µ–±–æ–π –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
üíº –†–∞–±–æ—á–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏  
üí° –†–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º
üéØ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ü–µ–ª—è–º–∏
üõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
üé® –¢–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏

–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –º–æ—è –ø–æ–º–æ—â—å!"""
        return None
    
    async def _handle_general_conversation(self, message: str, message_lower: str, session: Dict[str, Any]) -> Optional[str]:
        """–û–±—â–∏–π –¥–∏–∞–ª–æ–≥"""
        conversation_keywords = ['–∫–∞–∫ –¥–µ–ª–∞', '—á—Ç–æ –Ω–æ–≤–æ–≥–æ', '—Ä–∞—Å—Å–∫–∞–∂–∏', '–º–Ω–µ–Ω–∏–µ', '–¥—É–º–∞–µ—à—å']
        if any(keyword in message_lower for keyword in conversation_keywords):
            responses = [
                "–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ, –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∑–∞–¥–∞—á–∞–º. –ê –∫–∞–∫ –¥–µ–ª–∞ —É –≤–∞—Å?",
                "–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏?",
                "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ, –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ! –û —á–µ–º —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?"
            ]
            import random
            return random.choice(responses)
        return None
    
    async def _generate_contextual_response(self, message: str, session: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        recent_topics = []
        if len(session['history']) > 2:
            for msg in session['history'][-5:]:
                if msg['role'] == 'user':
                    recent_topics.append(msg['content'])
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤
        response_patterns = [
            f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å! {message[:100]}{'...' if len(message) > 100 else ''} - —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è.",
            f"–ü–æ–Ω–∏–º–∞—é –≤–∞—à—É —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è. –ü–æ–∑–≤–æ–ª—å—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É...",
            f"–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≥–æ—Ç–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏—è.",
            f"–≠—Ç–æ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –µ–µ —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è."
        ]
        
        import random
        base_response = random.choice(response_patterns)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è' in message.lower() or '–∫–æ–º–ø—å—é—Ç–µ—Ä' in message.lower():
            base_response += "\n\nüíª –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å, —è –≥–æ—Ç–æ–≤ —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ –¥–µ—Ç–∞–ª–∏!"
        elif '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ' in message.lower() or '–∏–¥–µ—è' in message.lower():
            base_response += "\n\nüé® –î–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π!"
        elif '?' in message:
            base_response += "\n\n‚ùì –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è, —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ - —Ä–∞–∑–±–µ—Ä–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ!"
        
        return base_response
    
    async def process_image_generation(self, chat_id: int, prompt: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            session = await self.get_chat_session(chat_id)
            
            if self.image_agent and not self.demo_mode:
                # –†–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
                task = Task(
                    id=f"img_{chat_id}_{session['message_count']}",
                    agent_name="image_agent",
                    task_type="image_generation",
                    data={
                        "prompt": prompt,
                        "width": 512,
                        "height": 512,
                        "num_inference_steps": 20
                    }
                )
                
                result = await self.image_agent.process_task(task)
                return result
            else:
                # –î–µ–º–æ —Ä–µ–∂–∏–º
                return {
                    "status": "demo",
                    "message": f"–î–µ–º–æ: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{prompt}' –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã",
                    "prompt": prompt,
                    "timestamp": datetime.now().isoformat()
                }
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return {"status": "error", "error": str(e)}
    
    async def process_image_analysis(self, chat_id: int, image_path: str, question: str = None) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            session = await self.get_chat_session(chat_id)
            
            if self.vision_agent and not self.demo_mode:
                # –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                task_type = "visual_question_answering" if question else "image_captioning"
                task_data = {"image_path": image_path}
                if question:
                    task_data["question"] = question
                
                task = Task(
                    id=f"vision_{chat_id}_{session['message_count']}",
                    agent_name="vision_agent",
                    task_type=task_type,
                    data=task_data
                )
                
                result = await self.vision_agent.process_task(task)
                return result
            else:
                # –î–µ–º–æ —Ä–µ–∂–∏–º
                return {
                    "status": "demo",
                    "message": "–î–µ–º–æ: –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BLIP2",
                    "image_path": image_path,
                    "question": question,
                    "timestamp": datetime.now().isoformat()
                }
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return {"status": "error", "error": str(e)}
    
    async def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        return {
            "demo_mode": self.demo_mode,
            "agents_initialized": self.agents_initialized,
            "active_chats": len(self.chat_sessions),
            "agents": {
                "text_agent": self.text_agent is not None,
                "vision_agent": self.vision_agent is not None,
                "image_agent": self.image_agent is not None
            },
            "timestamp": datetime.now().isoformat()
        }
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ ChatCoordinator...")
        
        if self.text_agent:
            await self.text_agent._cleanup_agent()
        if self.vision_agent:
            await self.vision_agent._cleanup_agent()
        if self.image_agent:
            await self.image_agent._cleanup_agent()
        
        self.chat_sessions.clear()
        self.logger.info("‚úÖ ChatCoordinator –æ—á–∏—â–µ–Ω")