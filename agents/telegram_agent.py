"""
TelegramAgent - –∞–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –¥—Ä—É–≥–∏–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
"""

import asyncio
import json
import os
from datetime import datetime
from typing import Dict, Any, Optional
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import uvicorn
from .base_agent import BaseAgent, Task


class TelegramMessage(BaseModel):
    """–ú–æ–¥–µ–ª—å Telegram —Å–æ–æ–±—â–µ–Ω–∏—è"""
    chat_id: str
    text: str
    message_type: str = "text"
    reply_markup: Optional[Dict] = None


class TelegramAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__("telegram_agent", config)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
        self.bot_token = config.get('telegram_token')
        self.allowed_chat_ids = config.get('telegram_chat_ids', [])
        
        if not self.bot_token:
            raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # Telegram Bot
        self.bot: Optional[Bot] = None
        self.application: Optional[Application] = None
        
        # FastAPI –¥–ª—è HTTP API
        self.app = FastAPI(title="TelegramAgent API", version="3.9")
        self._setup_routes()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.message_stats = {
            "received": 0,
            "sent": 0,
            "commands": 0,
            "errors": 0
        }
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        self.conversation_context = {}
    
    def _setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        
        @self.app.post("/send_message")
        async def send_message_endpoint(message: TelegramMessage):
            """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ HTTP API"""
            try:
                await self._send_telegram_message(
                    chat_id=message.chat_id,
                    text=message.text,
                    reply_markup=message.reply_markup
                )
                return {"status": "sent"}
            except Exception as e:
                raise HTTPException(status_code=500, detail=str(e))
        
        @self.app.get("/status")
        async def get_status():
            """–°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞"""
            return await self.health_check()
        
        @self.app.post("/process_task")
        async def process_task_endpoint(task_data: Dict[str, Any]):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ HTTP API"""
            try:
                task = Task(
                    id=task_data["id"],
                    agent_name=task_data["agent_name"],
                    task_type=task_data["task_type"],
                    data=task_data["data"]
                )
                
                result = await self.process_task(task)
                return result
                
            except Exception as e:
                raise HTTPException(status_code=500, detail=str(e))
    
    async def _initialize_agent(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramAgent")
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        self.bot = Bot(token=self.bot_token)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(self.bot_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        asyncio.create_task(self._start_http_server())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
        asyncio.create_task(self._start_telegram_bot())
        
        self.logger.info("TelegramAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _start_http_server(self):
        """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            config = uvicorn.Config(
                app=self.app,
                host="0.0.0.0",
                port=8002,
                log_level="info"
            )
            server = uvicorn.Server(config)
            await server.serve()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    async def _start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        try:
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            self.logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            if self.allowed_chat_ids:
                for chat_id in self.allowed_chat_ids:
                    await self._send_telegram_message(
                        chat_id=str(chat_id),
                        text="ü§ñ AGI Layer v3.9 –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
                    )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self._handle_start))
        self.application.add_handler(CommandHandler("help", self._handle_help))
        self.application.add_handler(CommandHandler("status", self._handle_status))
        self.application.add_handler(CommandHandler("generate", self._handle_generate))
        self.application.add_handler(CommandHandler("report", self._handle_report))
        self.application.add_handler(CommandHandler("memory", self._handle_memory))
        
        # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_message))
        
        # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        self.application.add_handler(MessageHandler(filters.PHOTO, self._handle_photo))
        
        # Callback –∫–Ω–æ–ø–∫–∏
        self.application.add_handler(CallbackQueryHandler(self._handle_callback))
    
    async def _handle_start(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            chat_id = str(update.effective_chat.id)
            
            if not self._is_authorized(chat_id):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
                return
            
            self.message_stats["commands"] += 1
            
            welcome_text = """ü§ñ **AGI Layer v3.9** - –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
            
–Ø –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏:

üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** - —Å–æ–∑–¥–∞—é –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
üëÅÔ∏è **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π** - –ø–æ–Ω–∏–º–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–æ—Ç–æ
üß† **–ü–∞–º—è—Ç—å –∏ –∑–Ω–∞–Ω–∏—è** - –∑–∞–ø–æ–º–∏–Ω–∞—é –∏ –∏—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
üìä **–û—Ç—á–µ—Ç—ã** - –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
‚öôÔ∏è **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥** - —Å–ª–µ–∂—É –∑–∞ —Ä–∞–±–æ—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã

**–ö–æ–º–∞–Ω–¥—ã:**
/help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/generate [–æ–ø–∏—Å–∞–Ω–∏–µ] - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
/report - —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç
/memory [–∑–∞–ø—Ä–æ—Å] - —Ä–∞–±–æ—Ç–∞ —Å –ø–∞–º—è—Ç—å—é

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ - —è –ø–æ–π–º—É —á—Ç–æ –¥–µ–ª–∞—Ç—å! üöÄ"""
            
            keyboard = [
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="status")],
                [InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="generate")],
                [InlineKeyboardButton("üìà –û—Ç—á–µ—Ç", callback_data="report")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                welcome_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")
    
    async def _handle_help(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            chat_id = str(update.effective_chat.id)
            
            if not self._is_authorized(chat_id):
                return
            
            self.message_stats["commands"] += 1
            
            help_text = """üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º AGI Layer v3.9**

**üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**
`/generate –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º`
`/generate –ø–æ—Ä—Ç—Ä–µ—Ç –¥–µ–≤—É—à–∫–∏ –≤ —Å—Ç–∏–ª–µ —Ä–µ–Ω–µ—Å—Å–∞–Ω—Å`

**üëÅÔ∏è –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ - —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é

**üß† –ü–∞–º—è—Ç—å –∏ –∑–Ω–∞–Ω–∏—è:**
`/memory –∑–∞–ø–æ–º–Ω–∏ —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞`
`/memory –Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python`

**üìä –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:**
`/report —Å–æ–∑–¥–∞–π –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é`
`/report —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã`

**‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
`/status` - —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
`/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**üí¨ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ:**
–ú–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å –º–Ω–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É - —è –ø–æ–π–º—É –≤–∞—à–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω—é –Ω—É–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è!

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "–ù–∞—Ä–∏—Å—É–π –∫–æ—Ç–∞ –≤ –∫–æ—Å–º–æ—Å–µ" ‚Üí –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ "–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ?" + —Ñ–æ—Ç–æ ‚Üí –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è  
‚Ä¢ "–ó–∞–ø–æ–º–Ω–∏ –º–æ–π –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç - —Å–∏–Ω–∏–π" ‚Üí —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
‚Ä¢ "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –±—ã–ª–∞ –≤—á–µ—Ä–∞?" ‚Üí –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏"""
            
            await update.message.reply_text(help_text, parse_mode='Markdown')
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /help: {e}")
    
    async def _handle_status(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            chat_id = str(update.effective_chat.id)
            
            if not self._is_authorized(chat_id):
                return
            
            self.message_stats["commands"] += 1
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É MetaAgent
            result = await self.send_to_agent("meta_agent", "list_agents", {})
            
            if result and result.get("status") == "success":
                active_agents = result.get("active_agents", [])
                
                status_text = f"""üìä **–°—Ç–∞—Ç—É—Å AGI Layer v3.9**

**–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:** {len(active_agents)}/7

"""
                
                agent_names = {
                    "meta_agent": "üß† MetaAgent (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä)",
                    "telegram_agent": "üí¨ TelegramAgent (—ç—Ç–æ—Ç –±–æ—Ç)",
                    "image_gen_agent": "üé® ImageGenAgent (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)",
                    "vision_agent": "üëÅÔ∏è VisionAgent (–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)",
                    "memory_agent": "üß† MemoryAgent (–ø–∞–º—è—Ç—å)",
                    "report_agent": "üìä ReportAgent (–æ—Ç—á–µ—Ç—ã)",
                    "watchdog_agent": "‚öôÔ∏è WatchdogAgent (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)"
                }
                
                for agent, description in agent_names.items():
                    status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if agent in active_agents else "üî¥ –ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
                    status_text += f"{description}: {status}\n"
                
                status_text += f"\n**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:**\n"
                status_text += f"üì• –ü–æ–ª—É—á–µ–Ω–æ: {self.message_stats['received']}\n"
                status_text += f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.message_stats['sent']}\n"
                status_text += f"‚ö° –ö–æ–º–∞–Ω–¥: {self.message_stats['commands']}\n"
                status_text += f"‚ùå –û—à–∏–±–æ–∫: {self.message_stats['errors']}\n"
                
            else:
                status_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
            
            await update.message.reply_text(status_text, parse_mode='Markdown')
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /status: {e}")
            self.message_stats["errors"] += 1
    
    async def _handle_generate(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /generate"""
        try:
            chat_id = str(update.effective_chat.id)
            
            if not self._is_authorized(chat_id):
                return
            
            self.message_stats["commands"] += 1
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            prompt = " ".join(context.args) if context.args else ""
            
            if not prompt:
                await update.message.reply_text(
                    "‚ùì –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n`/generate –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º`",
                    parse_mode='Markdown'
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            status_message = await update.message.reply_text(
                f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: *{prompt}*\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã...",
                parse_mode='Markdown'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            result = await self.send_to_agent("image_gen_agent", "generate_image", {
                "prompt": prompt,
                "chat_id": chat_id,
                "user_id": str(update.effective_user.id)
            })
            
            if result and result.get("status") == "success":
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await status_message.delete()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                image_path = result.get("image_path")
                if image_path and os.path.exists(image_path):
                    with open(image_path, 'rb') as photo:
                        await update.message.reply_photo(
                            photo=photo,
                            caption=f"üé® *{prompt}*\n\n‚ú® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ AGI Layer v3.9",
                            parse_mode='Markdown'
                        )
                else:
                    await update.message.reply_text(
                        f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\nüé® *{prompt}*",
                        parse_mode='Markdown'
                    )
            else:
                await status_message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /generate: {e}")
            self.message_stats["errors"] += 1
    
    async def _handle_report(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /report"""
        try:
            chat_id = str(update.effective_chat.id)
            
            if not self._is_authorized(chat_id):
                return
            
            self.message_stats["commands"] += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            result = await self.send_to_agent("report_agent", "generate_report", {
                "report_type": "system_status",
                "chat_id": chat_id
            })
            
            if result and result.get("status") == "success":
                report_text = result.get("report", "–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                await update.message.reply_text(
                    f"üìä **–°–∏—Å—Ç–µ–º–Ω—ã–π –æ—Ç—á–µ—Ç**\n\n{report_text}",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /report: {e}")
    
    async def _handle_memory(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /memory"""
        try:
            chat_id = str(update.effective_chat.id)
            
            if not self._is_authorized(chat_id):
                return
            
            self.message_stats["commands"] += 1
            
            query = " ".join(context.args) if context.args else ""
            
            if not query:
                await update.message.reply_text(
                    "‚ùì –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é:\n`/memory –∑–∞–ø–æ–º–Ω–∏ —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞`\n`/memory –Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python`",
                    parse_mode='Markdown'
                )
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
            if query.lower().startswith(("–∑–∞–ø–æ–º–Ω–∏", "—Å–æ—Ö—Ä–∞–Ω–∏", "remember")):
                task_type = "memory_store"
                data = {"content": query, "user_id": str(update.effective_user.id)}
            else:
                task_type = "memory_search"
                data = {"query": query, "user_id": str(update.effective_user.id)}
            
            result = await self.send_to_agent("memory_agent", task_type, data)
            
            if result and result.get("status") == "success":
                response = result.get("response", "–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                await update.message.reply_text(f"üß† {response}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /memory: {e}")
    
    async def _handle_message(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            chat_id = str(update.effective_chat.id)
            
            if not self._is_authorized(chat_id):
                return
            
            self.message_stats["received"] += 1
            
            message_text = update.message.text
            user_id = str(update.effective_user.id)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            intent = await self._analyze_message_intent(message_text)
            
            if intent == "image_generation":
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                await self._handle_natural_generate(update, message_text)
            elif intent == "question":
                # –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏ –∏–ª–∏ –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
                await self._handle_natural_question(update, message_text)
            elif intent == "memory_store":
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
                await self._handle_natural_memory(update, message_text)
            else:
                # –û–±—â–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
                await self._handle_natural_conversation(update, message_text)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.message_stats["errors"] += 1
    
    async def _handle_photo(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        try:
            chat_id = str(update.effective_chat.id)
            
            if not self._is_authorized(chat_id):
                return
            
            self.message_stats["received"] += 1
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            file = await photo.get_file()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ
            photo_path = f"/workspace/data/temp_photo_{datetime.now().timestamp()}.jpg"
            await file.download_to_drive(photo_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑
            status_message = await update.message.reply_text("üëÅÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            
            result = await self.send_to_agent("vision_agent", "analyze_image", {
                "image_path": photo_path,
                "chat_id": chat_id
            })
            
            if result and result.get("status") == "success":
                analysis = result.get("analysis", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                await status_message.edit_text(f"üëÅÔ∏è **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n\n{analysis}")
            else:
                await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(photo_path):
                os.remove(photo_path)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
    
    async def _handle_callback(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫"""
        try:
            query = update.callback_query
            await query.answer()
            
            chat_id = str(query.message.chat.id)
            
            if not self._is_authorized(chat_id):
                return
            
            data = query.data
            
            if data == "status":
                await self._handle_status(update, context)
            elif data == "generate":
                await query.message.reply_text(
                    "üé® –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`/generate [–æ–ø–∏—Å–∞–Ω–∏–µ]`\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: `/generate –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç`",
                    parse_mode='Markdown'
                )
            elif data == "report":
                await self._handle_report(update, context)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
    
    async def _analyze_message_intent(self, message: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message_lower = message.lower()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if any(word in message_lower for word in [
            "–Ω–∞—Ä–∏—Å—É–π", "—Å–æ–∑–¥–∞–π", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–∫–∞—Ä—Ç–∏–Ω–∫—É", "—Ñ–æ—Ç–æ"
        ]):
            return "image_generation"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
        if any(word in message_lower for word in [
            "–∑–∞–ø–æ–º–Ω–∏", "—Å–æ—Ö—Ä–∞–Ω–∏", "remember", "note"
        ]):
            return "memory_store"
        
        # –í–æ–ø—Ä–æ—Å—ã
        if any(word in message_lower for word in [
            "—á—Ç–æ", "–∫–∞–∫", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "?"
        ]):
            return "question"
        
        return "conversation"
    
    async def _handle_natural_generate(self, update: Update, message_text: str):
        """–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        prompt = message_text
        for word in ["–Ω–∞—Ä–∏—Å—É–π", "—Å–æ–∑–¥–∞–π", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–∫–∞—Ä—Ç–∏–Ω–∫—É"]:
            prompt = prompt.replace(word, "").strip()
        
        # –í—ã–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        context = type('Context', (), {'args': prompt.split()})()
        await self._handle_generate(update, context)
    
    async def _handle_natural_question(self, update: Update, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        result = await self.send_to_agent("memory_agent", "memory_search", {
            "query": message_text,
            "user_id": str(update.effective_user.id)
        })
        
        if result and result.get("status") == "success":
            response = result.get("response", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
            await update.message.reply_text(f"üß† {response}")
        else:
            await update.message.reply_text("ü§î –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å, –Ω–æ –∑–∞–ø–æ–º–Ω—é –µ–≥–æ.")
    
    async def _handle_natural_memory(self, update: Update, message_text: str):
        """–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å"""
        result = await self.send_to_agent("memory_agent", "memory_store", {
            "content": message_text,
            "user_id": str(update.effective_user.id)
        })
        
        if result and result.get("status") == "success":
            await update.message.reply_text("‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª!")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∞–º—è—Ç—å")
    
    async def _handle_natural_conversation(self, update: Update, message_text: str):
        """–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä"""
        responses = [
            "–ü–æ–Ω–∏–º–∞—é! –≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞.",
            "–•–æ—Ä–æ—à–æ, —É—á—Ç—É —ç—Ç–æ.",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            "–ü–æ–Ω—è–ª –≤–∞—Å. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?"
        ]
        
        import random
        response = random.choice(responses)
        await update.message.reply_text(response)
    
    def _is_authorized(self, chat_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.allowed_chat_ids:
            return True  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
        
        try:
            return int(chat_id) in self.allowed_chat_ids
        except ValueError:
            return False
    
    async def _send_telegram_message(self, chat_id: str, text: str, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            if self.bot:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                self.message_stats["sent"] += 1
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.message_stats["errors"] += 1
    
    async def process_task(self, task: Task) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –æ—Ç –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            if task.task_type == "send_message":
                data = task.data
                await self._send_telegram_message(
                    chat_id=data.get("chat_id"),
                    text=data.get("text"),
                    reply_markup=data.get("reply_markup")
                )
                return {"status": "success", "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}
            
            elif task.task_type == "ping":
                return {"status": "success", "message": "pong"}
            
            else:
                return {"status": "error", "error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task.task_type}"}
                
        except Exception as e:
            return {"status": "error", "error": str(e)}
    
    async def _cleanup_agent(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.application:
            await self.application.stop()
            await self.application.shutdown()


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def run_telegram_agent(config: Dict[str, Any]):
    """–ó–∞–ø—É—Å–∫ Telegram –∞–≥–µ–Ω—Ç–∞"""
    agent = TelegramAgent(config)
    await agent.initialize()
    await agent.start()
    
    try:
        while agent.running:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        await agent.stop()


if __name__ == "__main__":
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    
    config = {
        'telegram_token': os.getenv('TELEGRAM_TOKEN'),
        'telegram_chat_ids': [int(x.strip()) for x in os.getenv('TELEGRAM_CHAT_IDS', '').split(',') if x.strip()],
        'postgres_host': os.getenv('POSTGRES_HOST', 'localhost'),
        'postgres_port': int(os.getenv('POSTGRES_PORT', 5432)),
        'postgres_db': os.getenv('POSTGRES_DB', 'agi_layer'),
        'postgres_user': os.getenv('POSTGRES_USER', 'agi_user'),
        'postgres_password': os.getenv('POSTGRES_PASSWORD', 'agi_password')
    }
    
    asyncio.run(run_telegram_agent(config))