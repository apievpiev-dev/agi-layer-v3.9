"""
TelegramAgent - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AGI Layer v3.9
"""

import asyncio
import logging
from typing import Dict, Any, Optional
from datetime import datetime
import aiohttp
import asyncpg
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from .base_agent import BaseAgent, Task


class TelegramAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__("telegram_agent", config)
        self.bot_token = config.get('telegram_token')
        self.allowed_chat_id = config.get('telegram_chat_id')
        self.bot: Optional[Bot] = None
        self.application: Optional[Application] = None
        
    async def _initialize_agent(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
        if not self.bot_token:
            raise ValueError("Telegram token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        self.bot = Bot(token=self.bot_token)
        self.application = Application.builder().token(self.bot_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self._cmd_start))
        self.application.add_handler(CommandHandler("status", self._cmd_status))
        self.application.add_handler(CommandHandler("generate", self._cmd_generate))
        self.application.add_handler(CommandHandler("report", self._cmd_report))
        self.application.add_handler(CommandHandler("reboot", self._cmd_reboot))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_message))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await self.application.initialize()
        await self.application.start()
        
        # –ó–∞–ø—É—Å–∫ polling
        asyncio.create_task(self._run_polling())
        
        self.logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _run_polling(self):
        """–ó–∞–ø—É—Å–∫ polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            await self.application.updater.start_polling()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ polling: {e}")
    
    async def _check_authorization(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.allowed_chat_id:
            return True  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
            
        chat_id = str(update.effective_chat.id)
        return chat_id == self.allowed_chat_id
    
    async def _cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not await self._check_authorization(update):
            await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        await self._log_telegram_message(update, "start")
        
        welcome_text = """
ü§ñ AGI Layer v3.9 - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ –∞–≥–µ–Ω—Ç–æ–≤
/generate [prompt] - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
/report - –û—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã
/reboot - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã

–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!
        """
        
        await update.message.reply_text(welcome_text)
    
    async def _cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
        if not await self._check_authorization(update):
            await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        await self._log_telegram_message(update, "status")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç MetaAgent
            status_data = await self._get_system_status()
            
            status_text = "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã AGI Layer v3.9:\n\n"
            
            for agent_name, agent_data in status_data.get('agents', {}).items():
                status_emoji = {
                    'running': 'üü¢',
                    'stopped': 'üî¥', 
                    'error': 'üî¥',
                    'restarting': 'üü°'
                }.get(agent_data['status'], '‚ö™')
                
                status_text += f"{status_emoji} {agent_name}: {agent_data['status']}\n"
                status_text += f"   –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {agent_data['tasks_completed']}\n"
                status_text += f"   –û—à–∏–±–æ–∫: {agent_data['errors_count']}\n"
                status_text += f"   CPU: {agent_data['cpu_usage']:.1f}%\n"
                status_text += f"   RAM: {agent_data['memory_usage']:.1f}MB\n\n"
            
            await update.message.reply_text(status_text)
            
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def _cmd_generate(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /generate"""
        if not await self._check_authorization(update):
            await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        prompt = " ".join(context.args) if context.args else "beautiful landscape"
        
        await self._log_telegram_message(update, "generate", prompt)
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            task_id = await self._create_image_generation_task(prompt, update.effective_chat.id)
            
            await update.message.reply_text(
                f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞!\n"
                f"–ü—Ä–æ–º–ø—Ç: {prompt}\n"
                f"ID –∑–∞–¥–∞—á–∏: {task_id}\n"
                f"–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç..."
            )
            
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
    
    async def _cmd_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /report"""
        if not await self._check_authorization(update):
            await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        await self._log_telegram_message(update, "report")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã
            report_data = await self._generate_system_report()
            
            report_text = f"""
üìà –û—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã AGI Layer v3.9

üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

ü§ñ –ê–≥–µ–Ω—Ç—ã:
"""
            
            for agent_name, stats in report_data.get('agents_stats', {}).items():
                report_text += f"‚Ä¢ {agent_name}: {stats['tasks_completed']} –∑–∞–¥–∞—á, {stats['errors_count']} –æ—à–∏–±–æ–∫\n"
            
            report_text += f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            report_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {report_data.get('total_tasks', 0)}\n"
            report_text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {report_data.get('completed_tasks', 0)}\n"
            report_text += f"‚Ä¢ –û—à–∏–±–æ–∫: {report_data.get('total_errors', 0)}\n"
            report_text += f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {report_data.get('uptime', 'N/A')}\n"
            
            await update.message.reply_text(report_text)
            
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def _cmd_reboot(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reboot"""
        if not await self._check_authorization(update):
            await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        await self._log_telegram_message(update, "reboot")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            task_id = await self._create_reboot_task()
            
            await update.message.reply_text(
                f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω!\n"
                f"ID –∑–∞–¥–∞—á–∏: {task_id}\n"
                f"–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞..."
            )
            
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
    
    async def _handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not await self._check_authorization(update):
            await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
            
        message_text = update.message.text
        await self._log_telegram_message(update, "message", message_text)
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        response = await self._process_user_message(message_text)
        await update.message.reply_text(response)
    
    async def _process_user_message(self, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ - –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å TextAgent
        if "—Å—Ç–∞—Ç—É—Å" in message.lower():
            return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"
        elif "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è" in message.lower() or "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" in message.lower():
            return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /generate [–æ–ø–∏—Å–∞–Ω–∏–µ] –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        else:
            return "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π. /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    
    async def _get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ç MetaAgent"""
        try:
            url = "http://meta_agent:8000/status"
            async with self.http_session.get(url) as response:
                if response.status == 200:
                    return await response.json()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        
        return {"agents": {}}
    
    async def _create_image_generation_task(self, prompt: str, chat_id: int) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            url = "http://meta_agent:8000/create_task"
            data = {
                "task_type": "image_generation",
                "data": {
                    "prompt": prompt,
                    "chat_id": chat_id,
                    "user_request": True
                },
                "priority": 2
            }
            
            async with self.http_session.post(url, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    return result.get("task_id", "unknown")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    async def _create_reboot_task(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            url = "http://meta_agent:8000/create_task"
            data = {
                "task_type": "system_reboot",
                "data": {
                    "reason": "telegram_command",
                    "user_request": True
                },
                "priority": 3
            }
            
            async with self.http_session.post(url, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    return result.get("task_id", "unknown")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
            
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
    
    async def _generate_system_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            async with self.db_pool.acquire() as conn:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
                agents_stats = {}
                rows = await conn.fetch("SELECT * FROM agents")
                for row in rows:
                    agents_stats[row['name']] = {
                        'tasks_completed': row['tasks_completed'],
                        'errors_count': row['errors_count'],
                        'status': row['status']
                    }
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_tasks = await conn.fetchval("SELECT COUNT(*) FROM tasks")
                completed_tasks = await conn.fetchval("SELECT COUNT(*) FROM tasks WHERE status = 'completed'")
                total_errors = await conn.fetchval("SELECT SUM(errors_count) FROM agents")
                
                return {
                    'agents_stats': agents_stats,
                    'total_tasks': total_tasks,
                    'completed_tasks': completed_tasks,
                    'total_errors': total_errors,
                    'uptime': 'N/A'  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
                }
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return {}
    
    async def _log_telegram_message(self, update: Update, message_type: str, message_text: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
        try:
            async with self.db_pool.acquire() as conn:
                await conn.execute(
                    """
                    INSERT INTO telegram_messages 
                    (chat_id, user_id, message_text, message_type, processed_at)
                    VALUES ($1, $2, $3, $4, $5)
                    """,
                    update.effective_chat.id,
                    update.effective_user.id,
                    message_text,
                    message_type,
                    datetime.now()
                )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def process_task(self, task: Task) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á TelegramAgent"""
        if task.task_type == "send_notification":
            chat_id = task.data.get("chat_id")
            message = task.data.get("message")
            
            if chat_id and message:
                try:
                    await self.bot.send_message(chat_id=chat_id, text=message)
                    return {"status": "sent", "chat_id": chat_id}
                except Exception as e:
                    return {"status": "error", "error": str(e)}
        
        return {"status": "unknown_task_type"}
    
    async def _cleanup_agent(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ TelegramAgent"""
        if self.application:
            await self.application.stop()
            await self.application.shutdown()
        
        self.logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def send_notification(self, chat_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await self.bot.send_message(chat_id=chat_id, text=message)
            self.logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

