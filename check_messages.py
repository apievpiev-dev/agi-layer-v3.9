#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
"""

import asyncio
import aiohttp
import json

TOKEN = "8325306099:AAG6hk3tG2-XmiJPgegzYFzQcY6WJaEbRxw"
API_URL = f"https://api.telegram.org/bot{TOKEN}"

async def check_messages():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{API_URL}/getUpdates"
            params = {"limit": 5, "timeout": 10}
            async with session.get(url, params=params) as response:
                print(f"HTTP —Å—Ç–∞—Ç—É—Å: {response.status}")
                if response.status == 200:
                    data = await response.json()
                    if data.get('ok'):
                        updates = data.get('result', [])
                        print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:")
                        print("=" * 50)
                        
                        for i, update in enumerate(updates):
                            print(f"\nüì¨ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ #{i+1}:")
                            print(f"ID: {update.get('update_id')}")
                            
                            if 'message' in update:
                                message = update['message']
                                text = message.get('text', '')
                                user = message.get('from', {})
                                user_name = user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                                user_id = user.get('id', '')
                                chat_id = message.get('chat', {}).get('id', '')
                                date = message.get('date', '')
                                
                                print(f"üë§ –û—Ç: {user_name} (ID: {user_id})")
                                print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {text}")
                                print(f"üí¨ –ß–∞—Ç ID: {chat_id}")
                                print(f"üïê –î–∞—Ç–∞: {date}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç
                                if 'reply_to_message' in message:
                                    reply = message['reply_to_message']
                                    print(f"‚Ü©Ô∏è –û—Ç–≤–µ—Ç –Ω–∞: {reply.get('text', '')[:50]}...")
                                else:
                                    print("‚ùì –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
                            else:
                                print("‚ùå –ù–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                            print("-" * 30)
                        return updates
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ API: {data}")
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
                    response_text = await response.text()
                    print(f"–û—Ç–≤–µ—Ç: {response_text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    return []

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram...")
    print("=" * 50)
    updates = await check_messages()
    
    if not updates:
        print("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    else:
        print(f"\nüì¨ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(updates)} —Å–æ–æ–±—â–µ–Ω–∏–π")

if __name__ == "__main__":
    asyncio.run(main())