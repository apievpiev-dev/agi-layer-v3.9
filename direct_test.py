#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

async def test_image_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        print("üé® –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        from intelligent_telegram_bot import IntelligentAGI
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        agi = IntelligentAGI()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
        print("üì• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π...")
        await agi.initialize_ai_models()
        
        if agi.models_ready:
            print("‚úÖ –ú–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã!")
            
            # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            print("üñºÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            image_path = await agi._generate_real_image("–∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º")
            
            if image_path and os.path.exists(image_path):
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {image_path}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                size = os.path.getsize(image_path)
                print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size} –±–∞–π—Ç")
                
                return True
            else:
                print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ")
                return False
        else:
            print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_text_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
    try:
        print("\nüí¨ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞...")
        
        from intelligent_telegram_bot import IntelligentAGI
        
        agi = IntelligentAGI()
        await agi.initialize_ai_models()
        
        if agi.models_ready:
            response = await agi.generate_intelligent_response("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
            print(f"ü§ñ –û—Ç–≤–µ—Ç –ò–ò: {response}")
            return True
        else:
            print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò —Ñ—É–Ω–∫—Ü–∏–π\n")
    
    # –¢–µ—Å—Ç —Ç–µ–∫—Å—Ç–∞
    text_ok = await test_text_generation()
    
    # –¢–µ—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π  
    image_ok = await test_image_generation()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞: {'‚úÖ' if text_ok else '‚ùå'}")
    print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {'‚úÖ' if image_ok else '‚ùå'}")
    
    if text_ok and image_ok:
        print("\nüéâ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏")

if __name__ == "__main__":
    asyncio.run(main())