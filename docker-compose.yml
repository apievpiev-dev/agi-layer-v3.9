version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: agi_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./logs:/workspace/logs
    ports:
      - "5432:5432"
    networks:
      - agi_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ChromaDB Vector Database
  chromadb:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: agi_chromadb
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    volumes:
      - chromadb_data:/chroma/chroma
      - ./logs:/workspace/logs
    ports:
      - "8000:8000"
    networks:
      - agi_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MetaAgent - Coordinator
  meta_agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agi_meta_agent
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
    volumes:
      - ./agents:/workspace/agents
      - ./models:/workspace/models
      - ./data:/workspace/data
      - ./logs:/workspace/logs
      - ./memory:/workspace/memory
    ports:
      - "8001:8001"
    networks:
      - agi_network
    depends_on:
      postgres:
        condition: service_healthy
      chromadb:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "-m", "agents.meta_agent"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TelegramAgent - Bot Interface
  telegram_agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agi_telegram_agent
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - TELEGRAM_CHAT_IDS=${TELEGRAM_CHAT_IDS}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./agents:/workspace/agents
      - ./data:/workspace/data
      - ./logs:/workspace/logs
    ports:
      - "8002:8002"
    networks:
      - agi_network
    depends_on:
      postgres:
        condition: service_healthy
      meta_agent:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "-m", "agents.telegram_agent"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ImageGenAgent - Image Generation
  image_gen_agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agi_image_gen_agent
    environment:
      - MODELS_PATH=/workspace/models
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./agents:/workspace/agents
      - ./models:/workspace/models
      - ./data:/workspace/data
      - ./logs:/workspace/logs
    ports:
      - "8003:8003"
    networks:
      - agi_network
    depends_on:
      postgres:
        condition: service_healthy
      meta_agent:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "-m", "agents.image_gen_agent"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/status"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Увеличиваем лимиты для генерации изображений
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # VisionAgent - Image Analysis
  vision_agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agi_vision_agent
    environment:
      - MODELS_PATH=/workspace/models
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./agents:/workspace/agents
      - ./models:/workspace/models
      - ./data:/workspace/data
      - ./logs:/workspace/logs
    ports:
      - "8004:8004"
    networks:
      - agi_network
    depends_on:
      postgres:
        condition: service_healthy
      meta_agent:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "-m", "agents.vision_agent"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MemoryAgent - Vector Memory
  memory_agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agi_memory_agent
    environment:
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./agents:/workspace/agents
      - ./models:/workspace/models
      - ./memory:/workspace/memory
      - ./logs:/workspace/logs
    ports:
      - "8005:8005"
    networks:
      - agi_network
    depends_on:
      postgres:
        condition: service_healthy
      chromadb:
        condition: service_healthy
      meta_agent:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "-m", "agents.memory_agent"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ReportAgent - Reports and Analytics
  report_agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agi_report_agent
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./agents:/workspace/agents
      - ./data:/workspace/data
      - ./logs:/workspace/logs
    ports:
      - "8006:8006"
    networks:
      - agi_network
    depends_on:
      postgres:
        condition: service_healthy
      meta_agent:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "-m", "agents.report_agent"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WatchdogAgent - System Monitoring
  watchdog_agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agi_watchdog_agent
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./agents:/workspace/agents
      - ./logs:/workspace/logs
      - /var/run/docker.sock:/var/run/docker.sock  # Для управления контейнерами
    ports:
      - "8007:8007"
    networks:
      - agi_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "-m", "agents.watchdog_agent"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RecoveryAgent - System Recovery
  recovery_agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agi_recovery_agent
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
    volumes:
      - ./agents:/workspace/agents
      - ./memory:/workspace/memory
      - ./logs:/workspace/logs
      - ./data:/workspace/data
    ports:
      - "8008:8008"
    networks:
      - agi_network
    depends_on:
      postgres:
        condition: service_healthy
      chromadb:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "-m", "agents.recovery_agent"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Dashboard - Streamlit Interface
  web_dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agi_web_dashboard
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - STREAMLIT_SERVER_PORT=8501
    volumes:
      - ./services:/workspace/services
      - ./agents:/workspace/agents
      - ./data:/workspace/data
      - ./logs:/workspace/logs
    ports:
      - "8501:8501"
    networks:
      - agi_network
    depends_on:
      postgres:
        condition: service_healthy
      meta_agent:
        condition: service_healthy
    restart: unless-stopped
    command: ["streamlit", "run", "services/web_dashboard.py", "--server.address=0.0.0.0"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  chromadb_data:
    driver: local

networks:
  agi_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16