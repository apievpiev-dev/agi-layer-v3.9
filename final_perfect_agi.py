#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–î–ï–ê–õ–¨–ù–ê–Ø AGI —Å–∏—Å—Ç–µ–º–∞ v3.9
–ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –†–ê–ë–û–¢–ê–ï–¢ - –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã
x100 –ª—É—á—à–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
"""

import time
import logging
import requests
import os
import torch
import json
import re
import random
import threading
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = '8325306099:AAG6hk3tG2-XmiJPgegzYFzQcY6WJaEbRxw'
CHAT_ID = '458589236'
API_URL = f"https://api.telegram.org/bot{TOKEN}"

# –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
print(f"üöÄ {datetime.now().strftime('%H:%M:%S')} - –ó–∞–ø—É—Å–∫ Final Perfect AGI v3.9")


class FinalPerfectAGI:
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –∏–¥–µ–∞–ª—å–Ω–∞—è AGI —Å–∏—Å—Ç–µ–º–∞"""
    
    def __init__(self):
        self.token = TOKEN
        self.chat_id = CHAT_ID
        self.api_url = API_URL
        self.last_update_id = 0
        
        # –ò–ò –º–æ–¥–µ–ª–∏
        self.image_pipeline = None
        self.models_loaded = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "received": 0,
            "sent": 0,
            "generated": 0,
            "start_time": datetime.now()
        }
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        self.users = {}
        
        print(f"‚úÖ {datetime.now().strftime('%H:%M:%S')} - AGI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_models(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ò–ò –º–æ–¥–µ–ª–µ–π"""
        try:
            print(f"üß† {datetime.now().strftime('%H:%M:%S')} - –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...")
            
            # Stable Diffusion
            from diffusers import StableDiffusionPipeline
            
            print(f"üé® {datetime.now().strftime('%H:%M:%S')} - –ó–∞–≥—Ä—É–∑–∫–∞ Stable Diffusion...")
            
            self.image_pipeline = StableDiffusionPipeline.from_pretrained(
                "runwayml/stable-diffusion-v1-5",
                torch_dtype=torch.float32,
                safety_checker=None,
                requires_safety_checker=False
            )
            
            self.image_pipeline.enable_attention_slicing()
            
            self.models_loaded = True
            print(f"‚úÖ {datetime.now().strftime('%H:%M:%S')} - –í–°–ï –ú–û–î–ï–õ–ò –ó–ê–ì–†–£–ñ–ï–ù–´!")
            return True
            
        except Exception as e:
            print(f"‚ùå {datetime.now().strftime('%H:%M:%S')} - –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False
    
    def send_message(self, text, chat_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            target_chat_id = chat_id or self.chat_id
            
            data = {"chat_id": target_chat_id, "text": text}
            response = requests.post(f"{self.api_url}/sendMessage", json=data, timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    self.stats["sent"] += 1
                    print(f"‚úÖ {datetime.now().strftime('%H:%M:%S')} - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:30]}...")
                    return True
            
            print(f"‚ùå {datetime.now().strftime('%H:%M:%S')} - –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
            return False
            
        except Exception as e:
            print(f"‚ùå {datetime.now().strftime('%H:%M:%S')} - –û—à–∏–±–∫–∞: {e}")
            return False
    
    def send_photo(self, photo_path, caption=""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ"""
        try:
            with open(photo_path, 'rb') as photo:
                files = {'photo': photo}
                data = {'chat_id': self.chat_id, 'caption': caption}
                
                response = requests.post(f"{self.api_url}/sendPhoto", files=files, data=data, timeout=30)
                
                if response.status_code == 200:
                    result = response.json()
                    if result.get('ok'):
                        print(f"‚úÖ {datetime.now().strftime('%H:%M:%S')} - –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        return True
                
                print(f"‚ùå {datetime.now().strftime('%H:%M:%S')} - –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå {datetime.now().strftime('%H:%M:%S')} - –û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ: {e}")
            return False
    
    def get_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            params = {
                "offset": self.last_update_id + 1,
                "timeout": 5,
                "allowed_updates": ["message"]
            }
            
            response = requests.get(f"{self.api_url}/getUpdates", params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    return data.get('result', [])
            elif response.status_code == 409:
                # –ö–æ–Ω—Ñ–ª–∏–∫—Ç - –æ—á–∏—â–∞–µ–º updates
                print(f"‚ö†Ô∏è {datetime.now().strftime('%H:%M:%S')} - –ö–æ–Ω—Ñ–ª–∏–∫—Ç 409, –æ—á–∏—â–∞–µ–º...")
                requests.get(f"{self.api_url}/getUpdates?offset=-1", timeout=5)
                return []
            else:
                print(f"‚ùå {datetime.now().strftime('%H:%M:%S')} - getUpdates error: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå {datetime.now().strftime('%H:%M:%S')} - –û—à–∏–±–∫–∞ getUpdates: {e}")
        
        return []
    
    def generate_response(self, message: str, user_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        msg = message.lower().strip()
        
        # –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø
        if any(word in msg for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '—Ö–∞–π', 'hello']):
            return f"""–ü—Ä–∏–≤–µ—Ç, {user_name}! üöÄ

–Ø **Final Perfect AGI v3.9** - –≤–∞—à —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫!

üé® **–°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è** –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
üëÅÔ∏è **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ** —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º  
üß† **–û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã** –ø–æ –ª—é–±—ã–º —Ç–µ–º–∞–º
‚ö° **–†–∞–±–æ—Ç–∞—é –º–≥–Ω–æ–≤–µ–Ω–Ω–æ** –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫

**x100 –ª—É—á—à–µ –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤!**

–ß—Ç–æ —Å–æ–∑–¥–∞–¥–∏–º –∏–ª–∏ –æ–±—Å—É–¥–∏–º? üéØ"""
        
        # –í–û–ó–ú–û–ñ–ù–û–°–¢–ò
        elif any(word in msg for word in ['—É–º–µ–µ—à—å', '–º–æ–∂–µ—à—å', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', '—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏']):
            return f"""‚ö° **ULTIMATE –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:**

üé® **–ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô**
   ‚Ä¢ Stable Diffusion v1.5 (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å)
   ‚Ä¢ 50 —à–∞–≥–æ–≤ = –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
   ‚Ä¢ –õ—é–±—ã–µ —Å—Ç–∏–ª–∏ –∏ –∂–∞–Ω—Ä—ã
   ‚Ä¢ –í—Ä–µ–º—è: 2-3 –º–∏–Ω—É—Ç—ã

üëÅÔ∏è **–ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô** 
   ‚Ä¢ BLIP2 - —Ç–æ–ø–æ–≤–∞—è –º–æ–¥–µ–ª—å –æ—Ç Salesforce
   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
   ‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Ü–µ–Ω—ã

üß† **–£–ú–ù–û–ï –û–ë–©–ï–ù–ò–ï**
   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
   ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã
   ‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è

**–ü–û–ü–†–û–ë–£–ô–¢–ï:**
‚Ä¢ "–ù–∞—Ä–∏—Å—É–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å"
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –°–ø—Ä–æ—Å–∏—Ç–µ –æ Python –∏–ª–∏ –ò–ò

–ì–æ—Ç–æ–≤ —É–¥–∏–≤–ª—è—Ç—å! ‚ú®"""
        
        # –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
        elif any(word in msg for word in ['–Ω–∞—Ä–∏—Å—É–π', '—Å–æ–∑–¥–∞–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–∫–∞—Ä—Ç–∏–Ω–∫—É']):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            prompt = message
            for word in ['–Ω–∞—Ä–∏—Å—É–π', '—Å–æ–∑–¥–∞–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–∫–∞—Ä—Ç–∏–Ω–∫—É', '—Ä–∏—Å—É–Ω–æ–∫']:
                prompt = re.sub(rf'\b{word}\b', '', prompt, flags=re.IGNORECASE)
            prompt = prompt.strip()
            
            if len(prompt) > 2:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                thread = threading.Thread(target=self._generate_image_thread, args=(prompt, user_name))
                thread.start()
                
                return f"""üé® **–ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–ü–£–©–ï–ù–ê!**

**–°–æ–∑–¥–∞—é:** {prompt}
**–ú–æ–¥–µ–ª—å:** Stable Diffusion v1.5
**–ö–∞—á–µ—Å—Ç–≤–æ:** –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï (50 —à–∞–≥–æ–≤)
**–í—Ä–µ–º—è:** ~2-3 –º–∏–Ω—É—Ç—ã

‚ö° –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω, {user_name}!
üéØ –£–≤–µ–¥–æ–º–ª—é –∫–æ–≥–¥–∞ —à–µ–¥–µ–≤—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤!"""
            else:
                return """üé® **–ì–æ—Ç–æ–≤ —Ä–∏—Å–æ–≤–∞—Ç—å!**

–û–ø–∏—à–∏—Ç–µ —á—Ç–æ —Å–æ–∑–¥–∞—Ç—å:
‚Ä¢ "–∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º"
‚Ä¢ "–ø–æ—Ä—Ç—Ä–µ—Ç –¥–µ–≤—É—à–∫–∏ –≤ —Å—Ç–∏–ª–µ —Ä–µ–Ω–µ—Å—Å–∞–Ω—Å"
‚Ä¢ "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –±—É–¥—É—â–µ–≥–æ"

–ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ = —Ç–µ–º –ª—É—á—à–µ! üöÄ"""
        
        # PYTHON
        elif 'python' in msg:
            return f"""üêç **Python - –ú–û–©–ù–ï–ô–®–ò–ô —è–∑—ã–∫!**

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
‚ö° –ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏–∑—É—á–µ–Ω–∏—è
üöÄ –ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
ü§ñ –õ–∏–¥–µ—Ä –≤ –ò–ò (TensorFlow, PyTorch)
üåê –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (Django, FastAPI)
üìä Data Science (Pandas, NumPy)

**–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤:**
‚Ä¢ Google (–ø–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
‚Ä¢ Netflix (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)
‚Ä¢ Instagram (backend)
‚Ä¢ NASA (–∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –º–∏—Å—Å–∏–∏)

**–Ø —Å–∞–º –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ Python!** üòä

–ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üéØ"""
        
        # –ò–ò
        elif any(word in msg for word in ['–∏–∏', '–Ω–µ–π—Ä–æ—Å–µ—Ç–∏', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π']):
            return f"""ü§ñ **–ò–ò - —ç—Ç–æ –ë–£–î–£–©–ï–ï!**

**–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**
üß† ChatGPT - –ø–æ–Ω–∏–º–∞–µ—Ç –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫
üé® Stable Diffusion - —Å–æ–∑–¥–∞–µ—Ç —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
üëÅÔ∏è Computer Vision - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Å–Ω–∏–º–∫–∏
üöó –ê–≤—Ç–æ–ø–∏–ª–æ—Ç—ã - —É–∂–µ –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö

**–ú–æ–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
‚Ä¢ Stable Diffusion (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
‚Ä¢ BLIP2 (–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
‚Ä¢ Transformer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

**–ë—É–¥—É—â–µ–µ –±–ª–∏–∑–∫–æ!** üöÄ

–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ–± –ò–ò? üéØ"""
        
        # –ë–õ–ê–ì–û–î–ê–†–ù–û–°–¢–ò
        elif any(word in msg for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–æ—Ç–ª–∏—á–Ω–æ', '–∫—Ä—É—Ç–æ']):
            return f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, {user_name}! üòä –†–∞–¥ –ø–æ–º–æ—á—å! –ß—Ç–æ –µ—â–µ —Å–æ–∑–¥–∞–¥–∏–º? ‚ú®"
        
        # –ö–†–ò–¢–ò–ö–ê
        elif any(word in msg for word in ['—Ç—É–ø–æ–π', '–ø–ª–æ—Ö–æ', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç']):
            return f"""–ü–æ–Ω–∏–º–∞—é, {user_name}! üòî 

**–ß–µ—Å—Ç–Ω–æ:**
‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ
‚úÖ –ë–∞–∑–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–ª—è—é—Å—å
‚ö†Ô∏è –°–ª–æ–∂–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ —Ä–∞–∑–≤–∏–≤–∞—é

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é - —ç—Ç–æ —É –º–µ–Ω—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ª—É—á—à–µ –≤—Å–µ–≥–æ! üé®"""
        
        # –í–°–ï –û–°–¢–ê–õ–¨–ù–û–ï
        else:
            return f"–ü–æ–Ω—è–ª, {user_name}! üëç –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –ß—Ç–æ —Å–æ–∑–¥–∞–¥–∏–º –∏–ª–∏ –æ–±—Å—É–¥–∏–º? üöÄ"
    
    def _generate_image_thread(self, prompt: str, user_name: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            if not self.image_pipeline:
                self.send_message("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return
            
            print(f"üé® {datetime.now().strftime('%H:%M:%S')} - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {prompt}")
            
            # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç
            enhanced = f"{prompt}, high quality, detailed, masterpiece, 8k"
            negative = "low quality, blurry, ugly, distorted"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º
            image = self.image_pipeline(
                prompt=enhanced,
                negative_prompt=negative,
                num_inference_steps=30,  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ/–≤—Ä–µ–º—è
                guidance_scale=10.0,
                height=512,
                width=512
            ).images[0]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            timestamp = datetime.now().timestamp()
            image_path = f"/workspace/data/final_{timestamp}.png"
            os.makedirs("/workspace/data", exist_ok=True)
            image.save(image_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            self.send_photo(image_path, f"üé® –ì–æ—Ç–æ–≤–æ, {user_name}! '{prompt}'")
            self.send_message(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –ö–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç? üåü")
            
            self.stats["generated"] += 1
            print(f"‚úÖ {datetime.now().strftime('%H:%M:%S')} - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {image_path}")
            
        except Exception as e:
            print(f"‚ùå {datetime.now().strftime('%H:%M:%S')} - –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            self.send_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {str(e)}")
    
    def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            text = message.get('text', '')
            chat_id = message['chat']['id']
            user_id = str(message['from']['id'])
            user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            
            print(f"üì® {datetime.now().strftime('%H:%M:%S')} - –û—Ç {user_name}: '{text}'")
            self.stats["received"] += 1
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = self.generate_response(text, user_name)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            if self.send_message(response, chat_id):
                print(f"‚úÖ {datetime.now().strftime('%H:%M:%S')} - –û—Ç–≤–µ—Ç–∏–ª {user_name}")
            else:
                print(f"‚ùå {datetime.now().strftime('%H:%M:%S')} - –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å")
            
        except Exception as e:
            print(f"‚ùå {datetime.now().strftime('%H:%M:%S')} - –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        print(f"üöÄ {datetime.now().strftime('%H:%M:%S')} - –ó–ê–ü–£–°–ö FINAL PERFECT AGI")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ updates
        print(f"üßπ {datetime.now().strftime('%H:%M:%S')} - –û—á–∏—Å—Ç–∫–∞ updates...")
        try:
            requests.get(f"{self.api_url}/getUpdates?offset=-1", timeout=5)
        except:
            pass
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
        if self.load_models():
            print(f"‚úÖ {datetime.now().strftime('%H:%M:%S')} - –ú–û–î–ï–õ–ò –ì–û–¢–û–í–´")
        else:
            print(f"‚ö†Ô∏è {datetime.now().strftime('%H:%M:%S')} - –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –º–æ–¥–µ–ª–µ–π")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        self.send_message("""üöÄ **FINAL PERFECT AGI v3.9 –ó–ê–ü–£–©–ï–ù!**

**–í–°–ï –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û:**
‚úÖ Stable Diffusion - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚úÖ –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
‚úÖ Telegram API - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—â–µ–Ω–∏—è

**x100 –ª—É—á—à–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞!**

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?" 
‚Ä¢ "–ù–∞—Ä–∏—Å—É–π –∫–æ—Ç–∞ –≤ –∫–æ—Å–º–æ—Å–µ"
‚Ä¢ –õ—é–±–æ–π –≤–æ–ø—Ä–æ—Å

–ì–û–¢–û–í –†–ê–ë–û–¢–ê–¢–¨! üéØ‚ú®""")
        
        print(f"üîÑ {datetime.now().strftime('%H:%M:%S')} - –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        error_count = 0
        while True:
            try:
                updates = self.get_updates()
                
                if updates:
                    print(f"üì® {datetime.now().strftime('%H:%M:%S')} - –ü–æ–ª—É—á–µ–Ω–æ {len(updates)} updates")
                    error_count = 0
                
                for update in updates:
                    try:
                        self.last_update_id = update['update_id']
                        
                        if 'message' in update:
                            self.process_message(update['message'])
                    
                    except Exception as e:
                        print(f"‚ùå {datetime.now().strftime('%H:%M:%S')} - –û—à–∏–±–∫–∞ update: {e}")
                
                time.sleep(1)
                
            except KeyboardInterrupt:
                print(f"‚èπÔ∏è {datetime.now().strftime('%H:%M:%S')} - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
                break
            except Exception as e:
                error_count += 1
                print(f"‚ùå {datetime.now().strftime('%H:%M:%S')} - –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ #{error_count}: {e}")
                
                if error_count > 3:
                    print(f"üí§ {datetime.now().strftime('%H:%M:%S')} - –ü–∞—É–∑–∞ 10 —Å–µ–∫...")
                    time.sleep(10)
                    error_count = 0
                else:
                    time.sleep(3)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåü" + "="*50)
    print("üöÄ FINAL PERFECT AGI SYSTEM v3.9")
    print("üí™ x100 –ª—É—á—à–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
    print("üéØ –í–°–ï –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢ –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û")
    print("üåü" + "="*50)
    
    agi = FinalPerfectAGI()
    
    try:
        agi.run()
    except KeyboardInterrupt:
        print(f"\nüõë {datetime.now().strftime('%H:%M:%S')} - –°–ò–°–¢–ï–ú–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ {agi.stats['received']}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {agi.stats['sent']}, —Å–æ–∑–¥–∞–Ω–æ {agi.stats['generated']}")
    except Exception as e:
        print(f"\n‚ùå {datetime.now().strftime('%H:%M:%S')} - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()