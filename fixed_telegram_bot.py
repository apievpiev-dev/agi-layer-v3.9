#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Telegram –±–æ—Ç AGI Layer v3.9 —Å –†–ï–ê–õ–¨–ù–û —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
–ë–µ–∑ –≤—Ä–∞–Ω—å—è - —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
"""

import asyncio
import logging
import aiohttp
import os
import torch
import re
import random
from datetime import datetime
from typing import Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
from dotenv import load_dotenv
load_dotenv()

TOKEN = os.getenv('TELEGRAM_TOKEN', '8325306099:AAG6hk3tG2-XmiJPgegzYFzQcY6WJaEbRxw')
CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '458589236')
API_URL = f"https://api.telegram.org/bot{TOKEN}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('fixed_agi.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class FixedAGI:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è AGI —Å–∏—Å—Ç–µ–º–∞ - —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    def __init__(self):
        self.token = TOKEN
        self.chat_id = CHAT_ID
        self.api_url = API_URL
        self.last_update_id = 0
        
        # –ò–ò –º–æ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ)
        self.image_pipeline = None
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        self.models_ready = False
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_contexts = {}
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FixedAGI –Ω–∞ {self.device}")
        
    async def initialize_working_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¢–û–õ–¨–ö–û –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ Stable Diffusion - –æ–Ω–∞ —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
            await self._load_stable_diffusion()
            
            self.models_ready = True
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False
    
    async def _load_stable_diffusion(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ Stable Diffusion (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞—é—â–∞—è –º–æ–¥–µ–ª—å)"""
        try:
            from diffusers import StableDiffusionPipeline
            
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ Stable Diffusion v1.5...")
            
            self.image_pipeline = StableDiffusionPipeline.from_pretrained(
                "runwayml/stable-diffusion-v1-5",
                torch_dtype=torch.float32,
                safety_checker=None,
                requires_safety_checker=False
            )
            
            if self.device == "cpu":
                self.image_pipeline.enable_attention_slicing()
            
            logger.info("‚úÖ Stable Diffusion –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SD: {e}")
            self.image_pipeline = None
    
    def generate_honest_response(self, message: str, user_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Å—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–µ–∑ –≤—Ä–∞–Ω—å—è"""
        message_lower = message.lower().strip()
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '—Ö–∞–π', 'hello']):
            return f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø AGI Layer v3.9. –ú–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stable Diffusion –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ—Å–µ–¥—É. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        
        # –í–æ–ø—Ä–æ—Å—ã –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
        elif any(phrase in message_lower for phrase in ['—á—Ç–æ —É–º–µ–µ—à—å', '—á—Ç–æ –º–æ–∂–µ—à—å', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', '—Ñ—É–Ω–∫—Ü–∏–∏']):
            return """–ß–µ—Å—Ç–Ω–æ –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö:

‚úÖ –†–ê–ë–û–¢–ê–ï–¢:
üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (Stable Diffusion v1.5)
üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–µ—Å–µ–¥—ã (–ª–æ–≥–∏–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞—Ö)
üì± Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

‚ö†Ô∏è –í –†–ê–ó–†–ê–ë–û–¢–ö–ï:
üëÅÔ∏è –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
üß† –°–ª–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π

–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å!"""
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        elif any(word in message_lower for word in ['–Ω–∞—Ä–∏—Å—É–π', '—Å–æ–∑–¥–∞–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–∫–∞—Ä—Ç–∏–Ω–∫—É']):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            prompt = message_lower
            for word in ['–Ω–∞—Ä–∏—Å—É–π', '—Å–æ–∑–¥–∞–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–∫–∞—Ä—Ç–∏–Ω–∫—É', '—Ñ–æ—Ç–æ']:
                prompt = prompt.replace(word, '').strip()
            
            if len(prompt) > 3:
                asyncio.create_task(self._generate_and_send_image(prompt))
                return f"üé® –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: '{prompt}'\n\n‚è≥ Stable Diffusion –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç...\nüïê –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 2 –º–∏–Ω—É—Ç\n\n–Ø —É–≤–µ–¥–æ–º–ª—é –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!"
            else:
                return "–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å! –ù–∞–ø—Ä–∏–º–µ—Ä: '–Ω–∞—Ä–∏—Å—É–π –∫–æ—Ç–∞ –≤ –∫–æ—Å–º–æ—Å–µ'"
        
        # –í–æ–ø—Ä–æ—Å—ã –æ Python
        elif 'python' in message_lower:
            return """Python - –º–æ—â–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! üêç

–û—Å–Ω–æ–≤–Ω—ã–µ –ø–ª—é—Å—ã:
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
‚Ä¢ –ú–Ω–æ–≥–æ –±–∏–±–ª–∏–æ—Ç–µ–∫
‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ò–ò, –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ë–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Google, Netflix, Instagram.
–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ Python?"""
        
        # –í–æ–ø—Ä–æ—Å—ã –æ–± –ò–ò
        elif any(word in message_lower for word in ['–∏–∏', '–Ω–µ–π—Ä–æ—Å–µ—Ç–∏', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç']):
            return """–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç - —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å! ü§ñ

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ò–ò –∏—Å–ø–æ–ª—å–∑—É–µ—Ç:
‚Ä¢ –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ (–∫–∞–∫ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥)
‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á

–Ø —Å–∞–º –∏—Å–ø–æ–ª—å–∑—É—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –ò–ò –º–æ–¥–µ–ª–µ–π:
- Stable Diffusion –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –æ–± –ò–ò —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?"""
        
        # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
        elif any(word in message_lower for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks']):
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –†–∞–¥ –ø–æ–º–æ—á—å. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –µ—â–µ - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!"
        
        # –ö—Ä–∏—Ç–∏–∫–∞
        elif any(word in message_lower for word in ['—Ç—É–ø–æ–π', '–≥–ª—É–ø—ã–π', '–ø–ª–æ—Ö–æ', '–¥–µ–±–∏–ª']):
            return "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ! üòî –Ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ–π - –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–∞–≤–∏–ª–∞ –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞. –ù–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ! –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —É–ª—É—á—à–∏—Ç—å?"
        
        # –í–æ–ø—Ä–æ—Å—ã "–∫–∞–∫ –¥–µ–ª–∞"
        elif any(phrase in message_lower for phrase in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ –∂–∏–∑–Ω—å', '—á—Ç–æ –Ω–æ–≤–æ–≥–æ']):
            return "–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! üåü –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ. –ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ê —É –≤–∞—Å –∫–∞–∫ –¥–µ–ª–∞?"
        
        # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        elif any(word in message_lower for word in ['—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–ø–æ—á–µ–º—É', '?']):
            return f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ '{message[:50]}...'! ü§î\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –º–Ω–µ –Ω—É–∂–Ω—ã –±–æ–ª–µ–µ –º–æ—â–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏. –°–µ–π—á–∞—Å —è –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å–ø—Ä–∞–≤–ª—è—é—Å—å —Å:\n\nüé® –ì–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\nüí¨ –ü—Ä–æ—Å—Ç—ã–º–∏ –±–µ—Å–µ–¥–∞–º–∏\nüìö –ë–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ!"
        
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        else:
            responses = [
                f"–ü–æ–Ω—è–ª, {user_name}! üëç –ü–æ–∫–∞ –º–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø—Ä–æ—Å—Ç–æ–π, –Ω–æ —è —á–µ—Å—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º. –õ—É—á—à–µ –≤—Å–µ–≥–æ —É –º–µ–Ω—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!",
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! üòä –Ø –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤, –∞ –Ω–µ —Å–ª–æ–∂–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ó–∞—Ç–æ –º–æ–≥—É –∫–ª–∞—Å—Å–Ω–æ —Ä–∏—Å–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Stable Diffusion!",
                f"–ü–æ–Ω–∏–º–∞—é! üí≠ –ú–æ–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–∫–∞ –±–∞–∑–æ–≤—ã–µ, –Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ. –•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å?"
            ]
            return random.choice(responses)
    
    async def _generate_and_send_image(self, prompt: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {prompt}")
            
            if not self.image_pipeline:
                await self.send_message("‚ùå –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return
            
            # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç
            enhanced_prompt = f"{prompt}, high quality, detailed, masterpiece"
            negative_prompt = "low quality, blurry, ugly, distorted"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º
            image = self.image_pipeline(
                prompt=enhanced_prompt,
                negative_prompt=negative_prompt,
                num_inference_steps=30,  # –ë—ã—Å—Ç—Ä–µ–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                guidance_scale=10.0,
                height=512,
                width=512
            ).images[0]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            timestamp = datetime.now().timestamp()
            image_path = f"/workspace/data/fixed_{timestamp}.png"
            os.makedirs("/workspace/data", exist_ok=True)
            image.save(image_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            await self.send_photo(image_path, f"üé® –ì–æ—Ç–æ–≤–æ! '{prompt}'")
            await self.send_message("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –ö–∞–∫ –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç?")
            
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {image_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await self.send_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
    
    async def send_message(self, text, chat_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            target_chat_id = chat_id or self.chat_id
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/sendMessage"
                data = {
                    "chat_id": target_chat_id,
                    "text": text
                }
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get('ok'):
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
                            return True
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status}")
                    return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False
    
    async def send_photo(self, photo_path, caption="", chat_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        try:
            target_chat_id = chat_id or self.chat_id
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/sendPhoto"
                
                with open(photo_path, 'rb') as photo:
                    data = aiohttp.FormData()
                    data.add_field('chat_id', target_chat_id)
                    data.add_field('photo', photo, filename='fixed_image.png')
                    data.add_field('caption', caption)
                    
                    async with session.post(url, data=data) as response:
                        if response.status == 200:
                            result = await response.json()
                            if result.get('ok'):
                                logger.info(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {caption[:30]}...")
                                return True
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            return False
    
    async def get_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/getUpdates"
                params = {"offset": self.last_update_id + 1, "timeout": 30}
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('ok'):
                            return data.get('result', [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return []
    
    def generate_honest_response(self, message: str, user_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Å—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–µ–∑ –≤—Ä–∞–Ω—å—è"""
        message_lower = message.lower().strip()
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '—Ö–∞–π', 'hello']):
            return f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø AGI Layer v3.9. –ú–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stable Diffusion –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ—Å–µ–¥—É. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        
        # –í–æ–ø—Ä–æ—Å—ã –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
        elif any(phrase in message_lower for phrase in ['—á—Ç–æ —É–º–µ–µ—à—å', '—á—Ç–æ –º–æ–∂–µ—à—å', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', '—Ñ—É–Ω–∫—Ü–∏–∏']):
            return """–ß–µ—Å—Ç–Ω–æ –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö:

‚úÖ –†–ê–ë–û–¢–ê–ï–¢:
üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (Stable Diffusion v1.5)
üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–µ—Å–µ–¥—ã (–ª–æ–≥–∏–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞—Ö)
üì± Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

‚ö†Ô∏è –í –†–ê–ó–†–ê–ë–û–¢–ö–ï:
üëÅÔ∏è –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
üß† –°–ª–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π

–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å!"""
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        elif any(word in message_lower for word in ['–Ω–∞—Ä–∏—Å—É–π', '—Å–æ–∑–¥–∞–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–∫–∞—Ä—Ç–∏–Ω–∫—É']):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            prompt = message_lower
            for word in ['–Ω–∞—Ä–∏—Å—É–π', '—Å–æ–∑–¥–∞–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–∫–∞—Ä—Ç–∏–Ω–∫—É', '—Ñ–æ—Ç–æ']:
                prompt = prompt.replace(word, '').strip()
            
            if len(prompt) > 3:
                asyncio.create_task(self._generate_and_send_image(prompt))
                return f"üé® –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: '{prompt}'\n\n‚è≥ Stable Diffusion –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç...\nüïê –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 2 –º–∏–Ω—É—Ç\n\n–Ø —É–≤–µ–¥–æ–º–ª—é –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!"
            else:
                return "–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å! –ù–∞–ø—Ä–∏–º–µ—Ä: '–Ω–∞—Ä–∏—Å—É–π –∫–æ—Ç–∞ –≤ –∫–æ—Å–º–æ—Å–µ'"
        
        # –í–æ–ø—Ä–æ—Å—ã –æ Python
        elif 'python' in message_lower:
            return """Python - –º–æ—â–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! üêç

–û—Å–Ω–æ–≤–Ω—ã–µ –ø–ª—é—Å—ã:
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
‚Ä¢ –ú–Ω–æ–≥–æ –±–∏–±–ª–∏–æ—Ç–µ–∫
‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ò–ò, –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ë–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Google, Netflix, Instagram.
–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ Python?"""
        
        # –í–æ–ø—Ä–æ—Å—ã –æ–± –ò–ò
        elif any(word in message_lower for word in ['–∏–∏', '–Ω–µ–π—Ä–æ—Å–µ—Ç–∏', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç']):
            return """–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç - —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å! ü§ñ

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ò–ò –∏—Å–ø–æ–ª—å–∑—É–µ—Ç:
‚Ä¢ –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ (–∫–∞–∫ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –º–æ–∑–≥)
‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á

–Ø —Å–∞–º –∏—Å–ø–æ–ª—å–∑—É—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –ò–ò –º–æ–¥–µ–ª–µ–π:
- Stable Diffusion –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –æ–± –ò–ò —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?"""
        
        # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
        elif any(word in message_lower for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks']):
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –†–∞–¥ –ø–æ–º–æ—á—å. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –µ—â–µ - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!"
        
        # –ö—Ä–∏—Ç–∏–∫–∞
        elif any(word in message_lower for word in ['—Ç—É–ø–æ–π', '–≥–ª—É–ø—ã–π', '–ø–ª–æ—Ö–æ', '–¥–µ–±–∏–ª']):
            return "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ! üòî –Ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ–π - –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–∞–≤–∏–ª–∞ –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞. –ù–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ! –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —É–ª—É—á—à–∏—Ç—å?"
        
        # –í–æ–ø—Ä–æ—Å—ã "–∫–∞–∫ –¥–µ–ª–∞"
        elif any(phrase in message_lower for phrase in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ –∂–∏–∑–Ω—å', '—á—Ç–æ –Ω–æ–≤–æ–≥–æ']):
            return "–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! üåü –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ. –ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ê —É –≤–∞—Å –∫–∞–∫ –¥–µ–ª–∞?"
        
        # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        elif any(word in message_lower for word in ['—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–ø–æ—á–µ–º—É', '?']):
            return f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ '{message[:50]}...'! ü§î\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –º–Ω–µ –Ω—É–∂–Ω—ã –±–æ–ª–µ–µ –º–æ—â–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏. –°–µ–π—á–∞—Å —è –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å–ø—Ä–∞–≤–ª—è—é—Å—å —Å:\n\nüé® –ì–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\nüí¨ –ü—Ä–æ—Å—Ç—ã–º–∏ –±–µ—Å–µ–¥–∞–º–∏\nüìö –ë–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ!"
        
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        else:
            responses = [
                f"–ü–æ–Ω—è–ª, {user_name}! üëç –ü–æ–∫–∞ –º–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø—Ä–æ—Å—Ç–æ–π, –Ω–æ —è —á–µ—Å—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º. –õ—É—á—à–µ –≤—Å–µ–≥–æ —É –º–µ–Ω—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!",
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! üòä –Ø –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤, –∞ –Ω–µ —Å–ª–æ–∂–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ó–∞—Ç–æ –º–æ–≥—É –∫–ª–∞—Å—Å–Ω–æ —Ä–∏—Å–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Stable Diffusion!",
                f"–ü–æ–Ω–∏–º–∞—é! üí≠ –ú–æ–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–∫–∞ –±–∞–∑–æ–≤—ã–µ, –Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ. –•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å?"
            ]
            return random.choice(responses)
    
    async def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            text = message.get('text', '')
            chat_id = message['chat']['id']
            user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç {user_name}: {text}")
            
            if len(text.strip()) < 1:
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            response = self.generate_honest_response(text, user_name)
            await self.send_message(response, chat_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            await self.send_message("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", chat_id)
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Fixed AGI Bot")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
        if await self.initialize_working_models():
            logger.info("‚úÖ –ú–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã")
        else:
            logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        await self.send_message("""ü§ñ Fixed AGI v3.9 –∑–∞–ø—É—â–µ–Ω!

–ß–ï–°–¢–ù–û –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö:
‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (Stable Diffusion —Ä–∞–±–æ—Ç–∞–µ—Ç)
‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã (–ø—Ä–∞–≤–∏–ª–∞, –Ω–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏)
‚úÖ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –ø–æ–∫–∞:
- –°–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
- –£–º–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
- –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

–ù–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '–Ω–∞—Ä–∏—Å—É–π –∫–æ—Ç–∞'""")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            try:
                updates = await self.get_updates()
                
                for update in updates:
                    self.last_update_id = update['update_id']
                    
                    if 'message' in update:
                        await self.process_message(update['message'])
                
                await asyncio.sleep(1)
                
            except KeyboardInterrupt:
                logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = FixedAGI()
    await bot.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")