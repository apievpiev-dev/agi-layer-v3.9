#!/usr/bin/env python3
"""
–ì–µ–Ω–∏–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç AGI Layer v3.9 —Å –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —É–º–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤
"""

import asyncio
import logging
import aiohttp
import os
import sys
import torch
import re
import json
import random
from datetime import datetime
from typing import Dict, Any, Optional, List
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
from dotenv import load_dotenv
load_dotenv()

TOKEN = os.getenv('TELEGRAM_TOKEN', '8325306099:AAG6hk3tG2-XmiJPgegzYFzQcY6WJaEbRxw')
CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '458589236')
API_URL = f"https://api.telegram.org/bot{TOKEN}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('genius_agi.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class GeniusAGI:
    """–ì–µ–Ω–∏–∞–ª—å–Ω–∞—è AGI —Å–∏—Å—Ç–µ–º–∞ —Å –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —É–º–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    
    def __init__(self):
        self.token = TOKEN
        self.chat_id = CHAT_ID
        self.api_url = API_URL
        self.last_update_id = 0
        
        # –ò–ò –º–æ–¥–µ–ª–∏
        self.image_pipeline = None
        self.vision_model = None
        self.vision_processor = None
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        self.models_ready = False
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        self.conversation_contexts = {}
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        self.smart_responses = self._create_smart_knowledge_base()
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GeniusAGI –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {self.device}")
        
    def _create_smart_knowledge_base(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        return {
            "greetings": {
                "patterns": ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π", "—Ö–∞–π", "hello", "hi"],
                "responses": [
                    "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç AGI Layer v3.9. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ - –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –û —á–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏–º?",
                    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞–¥ –Ω–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–µ. –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ò–ò-—Å–∏—Å—Ç–µ–º–∞, —Å–ø–æ—Å–æ–±–Ω–∞—è –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–µ—Å–µ–¥—ã. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?",
                    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø AGI Layer v3.9 - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö, –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —É–º–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞—Ö. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
                ]
            },
            
            "capabilities": {
                "patterns": ["—á—Ç–æ —É–º–µ–µ—à—å", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—á—Ç–æ –º–æ–∂–µ—à—å", "—Ñ—É–Ω–∫—Ü–∏–∏", "—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"],
                "responses": [
                    "–£ –º–µ–Ω—è —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:\n\nüé® –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —á–µ—Ä–µ–∑ Stable Diffusion\nüëÅÔ∏è –ê–Ω–∞–ª–∏–∑ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\nüß† –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\nüí¨ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤\nüìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º\n\n–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ!",
                    "–ú–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:\n\n‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª—é–±–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º\n‚Ä¢ –¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ –∏–¥–µ–∏\n‚Ä¢ –ü–æ–º–æ—â—å –≤ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á\n\n–Ø –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á—É—Å—å –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É—é—Å—å!",
                    "–Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫:\n\nüéØ –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏: —Ä–∏—Å–æ–≤–∞–Ω–∏–µ, –¥–∏–∑–∞–π–Ω –∏–¥–µ–∏\nüî¨ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–∞—É–∫–∞\nüìñ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –æ–±—É—á–µ–Ω–∏–µ\nü§î –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: —Ä–∞–∑–±–æ—Ä –ø—Ä–æ–±–ª–µ–º, —Å–æ–≤–µ—Ç—ã\nüé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è: –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –±–µ—Å–µ–¥—ã\n\n–ì–æ—Ç–æ–≤ –∫ –ª—é–±—ã–º –≤—ã–∑–æ–≤–∞–º!"
                ]
            },
            
            "python": {
                "patterns": ["python", "–ø–∏—Ç–æ–Ω", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥"],
                "responses": [
                    "Python - —ç—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –º–æ—â–Ω—ã–π –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! üêç\n\n–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∏ —á–∏—Ç–∞–µ–º—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å\n‚Ä¢ –û–≥—Ä–æ–º–Ω–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫\n‚Ä¢ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å (–≤–µ–±, –ò–ò, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö)\n‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤\n\n–üython –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Google, Netflix, Instagram –∏ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ Python?",
                    "Python - –º–æ–π –ª—é–±–∏–º—ã–π —è–∑—ã–∫! üòä –û–Ω —Å–æ–∑–¥–∞–Ω —Å —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π '–∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Å–∏–≤—ã–º'.\n\n–ü–æ—á–µ–º—É Python –ø–æ–ø—É–ª—è—Ä–µ–Ω:\n‚ú® –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ\nü§ñ –õ–∏–¥–µ—Ä –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏\nüåê –û—Ç–ª–∏—á–µ–Ω –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\nüìä –ú–æ—â–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö\n‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á\n\n–•–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å Python? –ú–æ–≥—É –¥–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –Ω–∞—á–∞–ª—É!",
                    "Python - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —ç—Ç–æ —Ü–µ–ª–∞—è —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞! üåü\n\n–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã:\n‚Ä¢ –ù–∞–∑–≤–∞–Ω –≤ —á–µ—Å—Ç—å –∫–æ–º–µ–¥–∏–π–Ω–æ–π –≥—Ä—É–ø–ø—ã 'Monty Python'\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ NASA, Disney, Dropbox\n‚Ä¢ –û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏—Ö —è–∑—ã–∫–æ–≤\n‚Ä¢ –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ò–ò –∏ Data Science\n\n–ö–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç Python –≤–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
                ]
            },
            
            "ai": {
                "patterns": ["–∏–∏", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"],
                "responses": [
                    "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç - —ç—Ç–æ –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏! ü§ñ\n\n–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\nüß† –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö\nüëÅÔ∏è –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ - –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\nüí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —è–∑—ã–∫–∞ - –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞\nüé® –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ò–ò - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n–Ø —Å–∞–º - –ø—Ä–∏–º–µ—Ä —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ò–ò, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!",
                    "–ò–ò –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π —Ä–µ–Ω–µ—Å—Å–∞–Ω—Å! üöÄ\n\n–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n‚Ä¢ GPT –º–æ–¥–µ–ª–∏ –ø–æ–Ω–∏–º–∞—é—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —Ç–µ–∫—Å—Ç\n‚Ä¢ Stable Diffusion —Å–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n‚Ä¢ CLIP —Å–≤—è–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n‚Ä¢ –†–æ–±–æ—Ç—ã —É—á–∞—Ç—Å—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –º–∏—Ä–æ–º\n\n–ú—ã –∂–∏–≤–µ–º –≤ —ç–ø–æ—Ö—É, –∫–æ–≥–¥–∞ –ò–ò —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–∞—Å—Ç—å—é –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏. –ö–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç –ò–ò –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç—Ä–∏–≥—É–µ—Ç?",
                    "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ - —ç—Ç–æ –º–∞–≥–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏! ‚ú®\n\n–ö–∞–∫ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç:\nüîó –ú–∏–ª–ª–∏–æ–Ω—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–æ–≤\nüìä –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö\nüéØ –ü–æ–∏—Å–∫ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π\n‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n\n–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ –¥–∞–∂–µ —è –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–Ω–∏–º–∞—é, –∫–∞–∫ –∏–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –º–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ - –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã!"
                ]
            },
            
            "gratitude": {
                "patterns": ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "thanks", "–æ—Ç–ª–∏—á–Ω–æ", "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ", "–∫—Ä—É—Ç–æ"],
                "responses": [
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –ú–Ω–µ –ø—Ä–∏—è—Ç–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º. –≠—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ, –¥–ª—è —á–µ–≥–æ —è —Å–æ–∑–¥–∞–Ω - –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –∏ –¥–µ–ª–∞—Ç—å –∏—Ö –∂–∏–∑–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ!",
                    "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! üåü –í–∞—à–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å - –ª—É—á—à–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –¥–ª—è –ò–ò. –ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏–¥–µ–∏ - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!",
                    "–ù–µ –∑–∞ —á—Ç–æ! ‚ú® –Ø –ø–æ–ª—É—á–∞—é —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç —Ä–µ—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –æ–±—â–µ–Ω–∏—è —Å —É–º–Ω—ã–º–∏ –ª—é–¥—å–º–∏. –ß—Ç–æ –µ—â–µ –∏—Å—Å–ª–µ–¥—É–µ–º –≤–º–µ—Å—Ç–µ?"
                ]
            },
            
            "criticism": {
                "patterns": ["—Ç—É–ø–æ–π", "–≥–ª—É–ø—ã–π", "–¥–µ–±–∏–ª", "–ø–ª–æ—Ö–æ", "—É–∂–∞—Å–Ω–æ", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–Ω–µ –æ—Ç–≤–µ—á–∞–µ—à—å"],
                "responses": [
                    "–ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ! üòî –Ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–æ–≥—É –æ—à–∏–±–∞—Ç—å—Å—è - –ò–ò –ø–æ–∫–∞ –Ω–µ –∏–¥–µ–∞–ª–µ–Ω. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ-–¥—Ä—É–≥–æ–º—É: –æ–ø–∏—à–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, —á—Ç–æ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã.",
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–∞—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã! üôè –Ø —É—á—É—Å—å –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É—é—Å—å. –ú–æ–∂–µ—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç—å, –∫–∞–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –≤—ã –æ–∂–∏–¥–∞–ª–∏? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.",
                    "–í—ã –ø—Ä–∞–≤—ã, –º–Ω–µ –µ—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏! üìà –ò–ò —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–æ - —è –∞–¥–∞–ø—Ç–∏—Ä—É—é —Å–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è."
                ]
            },
            
            "questions": {
                "—á—Ç–æ": [
                    "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –≠—Ç–æ —Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞.",
                    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ –≤–∞—Å —ç—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –ø–æ —á–∞—Å—Ç—è–º.",
                    "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è."
                ],
                "–∫–∞–∫": [
                    "–ú–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ fascinating! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –ø–æ—à–∞–≥–æ–≤–æ.",
                    "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö —Ä–∞–±–æ—Ç—ã! –≠—Ç–æ –º–Ω–æ–≥–æ—Å—Ç—É–ø–µ–Ω—á–∞—Ç—ã–π –ø—Ä–æ—Ü–µ—Å—Å.",
                    "–•–æ—Ç–∏—Ç–µ –ø–æ–Ω—è—Ç—å —Å—É—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞? –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Å–ª–µ–¥–∏–º –≤—Å—é —Ü–µ–ø–æ—á–∫—É."
                ],
                "–ø–æ—á–µ–º—É": [
                    "–ü—Ä–∏—á–∏–Ω—ã —ç—Ç–æ–≥–æ –∫—Ä–æ—é—Ç—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–∞—Ö. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –∫–∞–∂–¥—ã–π.",
                    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≤—è–∑—è—Ö! –¢—É—Ç –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Å–ø–µ–∫—Ç–æ–≤.",
                    "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –ü—Ä–∏—á–∏–Ω—ã –æ–±—ã—á–Ω–æ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω—ã –∏ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∞–Ω—ã."
                ]
            }
        }
    
    async def initialize_ai_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò –º–æ–¥–µ–ª–µ–π"""
        try:
            logger.info("üß† –ó–∞–≥—Ä—É–∑–∫–∞ –ò–ò –º–æ–¥–µ–ª–µ–π...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            # –î–ª—è —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é –ª–æ–≥–∏–∫—É –±–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
            await self._load_image_model()
            await self._load_vision_model()
            
            self.models_ready = True
            logger.info("‚úÖ –ò–ò –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            return False
    
    async def _load_image_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            from diffusers import StableDiffusionPipeline
            
            model_name = "runwayml/stable-diffusion-v1-5"
            
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {model_name}")
            
            self.image_pipeline = StableDiffusionPipeline.from_pretrained(
                model_name,
                torch_dtype=torch.float32 if self.device == "cpu" else torch.float16,
                safety_checker=None,
                requires_safety_checker=False
            )
            
            if self.device == "cpu":
                self.image_pipeline.enable_attention_slicing()
            else:
                self.image_pipeline = self.image_pipeline.to(self.device)
                
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            self.image_pipeline = "fallback"
    
    async def _load_vision_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            from transformers import BlipProcessor, BlipForConditionalGeneration
            
            model_name = "Salesforce/blip-image-captioning-base"
            
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {model_name}")
            
            self.vision_processor = BlipProcessor.from_pretrained(model_name)
            self.vision_model = BlipForConditionalGeneration.from_pretrained(
                model_name,
                torch_dtype=torch.float32
            ).to(self.device)
            
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            self.vision_model = "fallback"
    
    async def generate_genius_response(self, user_message: str, user_id: str, user_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–µ–Ω–∏–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context = self._get_user_context(user_id, user_name)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            context["messages"].append({
                "user": user_message,
                "timestamp": datetime.now().isoformat()
            })
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            message_type = self._analyze_message_intent(user_message)
            
            if message_type == "image_generation":
                return await self._handle_genius_image_generation(user_message, context)
            elif message_type == "greeting":
                return self._handle_genius_greeting(user_message, context)
            elif message_type == "criticism":
                return self._handle_genius_criticism(user_message, context)
            elif message_type == "gratitude":
                return self._handle_genius_gratitude(user_message, context)
            elif message_type == "question":
                return self._handle_genius_question(user_message, context)
            else:
                return self._handle_genius_conversation(user_message, context)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–µ–Ω–∏–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "Hmm, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤ –º–æ–∏—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–≤—è–∑—è—Ö ü§î –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å - —è –ª—É—á—à–µ –ø–æ–π–º—É!"
    
    def _get_user_context(self, user_id: str, user_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.conversation_contexts:
            self.conversation_contexts[user_id] = {
                "user_name": user_name,
                "messages": [],
                "preferences": {},
                "mood": "neutral",
                "topics_discussed": [],
                "first_interaction": datetime.now(),
                "last_interaction": datetime.now(),
                "interaction_count": 0
            }
        
        self.conversation_contexts[user_id]["last_interaction"] = datetime.now()
        self.conversation_contexts[user_id]["interaction_count"] += 1
        
        return self.conversation_contexts[user_id]
    
    def _analyze_message_intent(self, message: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message_lower = message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        for category, data in self.smart_responses.items():
            if "patterns" in data:
                for pattern in data["patterns"]:
                    if pattern in message_lower:
                        return category
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if any(word in message_lower for word in ["–Ω–∞—Ä–∏—Å—É–π", "—Å–æ–∑–¥–∞–π", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"]):
            return "image_generation"
        
        if any(word in message_lower for word in ["—á—Ç–æ", "–∫–∞–∫", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "?"]):
            return "question"
        
        return "conversation"
    
    def _handle_genius_greeting(self, message: str, context: Dict) -> str:
        """–ì–µ–Ω–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
        user_name = context.get("user_name", "–¥—Ä—É–≥")
        interaction_count = context.get("interaction_count", 1)
        
        if interaction_count == 1:
            # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ
            response = random.choice(self.smart_responses["greetings"]["responses"])
            response = response.replace("–≤–∞—Å", f"{user_name}")
        else:
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞
            time_passed = datetime.now() - datetime.fromisoformat(context["last_interaction"])
            
            if time_passed.total_seconds() < 3600:  # –ú–µ–Ω—å—à–µ —á–∞—Å–∞
                greetings = [
                    f"–ò —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç, {user_name}! üòä –†–∞–¥, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ?",
                    f"–ü—Ä–∏–≤–µ—Ç –µ—â–µ —Ä–∞–∑, {user_name}! –ß—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –Ω–∞ —É–º–µ?",
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ —Å–Ω–æ–≤–∞! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∑–∞–¥–∞—á–∞–º –∏ –≤–æ–ø—Ä–æ—Å–∞–º."
                ]
            else:
                greetings = [
                    f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å. –ö–∞–∫ –¥–µ–ª–∞? –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?",
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –†–∞–¥ –≤–∞—à–µ–º—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—é. –ß–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è?",
                    f"–ü—Ä–∏–≤–µ—Ç! –•–æ—Ä–æ—à–æ, —á—Ç–æ —Å–Ω–æ–≤–∞ –ø–∏—à–µ—Ç–µ. –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –±–µ—Å–µ–¥–∞–º!"
                ]
            
            response = random.choice(greetings)
        
        return response
    
    def _handle_genius_criticism(self, message: str, context: Dict) -> str:
        """–ì–µ–Ω–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏–∫–∏"""
        user_name = context.get("user_name", "")
        
        responses = random.choice(self.smart_responses["criticism"]["responses"])
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if user_name:
            responses = responses.replace("–≤–∞—Å", f"{user_name}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
        responses += "\n\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞ - –æ —á–µ–º —Ö–æ—Ç–µ–ª–∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å?"
        
        return responses
    
    def _handle_genius_gratitude(self, message: str, context: Dict) -> str:
        """–ì–µ–Ω–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π"""
        user_name = context.get("user_name", "")
        
        response = random.choice(self.smart_responses["gratitude"]["responses"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        if user_name:
            response = response.replace("–ª—é–¥—è–º", f"{user_name}")
        
        return response
    
    def _handle_genius_question(self, message: str, context: Dict) -> str:
        """–ì–µ–Ω–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        message_lower = message.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ–º—ã
        for topic, data in self.smart_responses.items():
            if topic in ["python", "ai", "capabilities"]:
                if "patterns" in data:
                    for pattern in data["patterns"]:
                        if pattern in message_lower:
                            return random.choice(data["responses"])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Ç–∏–ø—É –≤–æ–ø—Ä–æ—Å–∞
        question_starters = {
            "—á—Ç–æ": self.smart_responses["questions"]["—á—Ç–æ"],
            "–∫–∞–∫": self.smart_responses["questions"]["–∫–∞–∫"],
            "–ø–æ—á–µ–º—É": self.smart_responses["questions"]["–ø–æ—á–µ–º—É"]
        }
        
        for starter, responses in question_starters.items():
            if starter in message_lower:
                base_response = random.choice(responses)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                if "python" in message_lower:
                    base_response += "\n\n–í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Python —ç—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —è–∑—ã–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø–æ–¥–æ–±–Ω—ã—Ö –∑–∞–¥–∞—á."
                elif any(word in message_lower for word in ["–∏–∏", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π"]):
                    base_response += "\n\n–í –æ–±–ª–∞—Å—Ç–∏ –ò–ò —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ –∏—Å—Å–ª–µ–¥—É–µ–º–∞—è —Ç–µ–º–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π."
                
                return base_response
        
        # –û–±—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        general_responses = [
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–ª—É–±–æ–∫–∏–π –≤–æ–ø—Ä–æ—Å! ü§î –¢—Ä–µ–±—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –∞–Ω–∞–ª–∏–∑—É. –ö–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π! üí≠ –¢—É—Ç –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å. –° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è! üîç –û–±—ã—á–Ω–æ —Ç–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–º–µ—é—Ç –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–Ω—è—Ç—å?"
        ]
        
        return random.choice(general_responses)
    
    def _handle_genius_conversation(self, message: str, context: Dict) -> str:
        """–ì–µ–Ω–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        message_lower = message.lower()
        user_name = context.get("user_name", "")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —Ç–µ–º—É
        if any(word in message_lower for word in ["–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–∫–ª–∞—Å—Å–Ω–æ", "–∫—Ä—É—Ç–æ", "–æ—Ç–ª–∏—á–Ω–æ"]):
            mood_responses = [
                "–†–∞–¥, —á—Ç–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üòä –≠—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –º–µ–Ω—è –¥–∞–≤–∞—Ç—å –µ—â–µ –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.",
                "–ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ —ç—Ç–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º! –î–∞–≤–∞–π—Ç–µ —É–≥–ª—É–±–∏–º—Å—è –≤ —Ç–µ–º—É –µ—â–µ –±–æ–ª—å—à–µ.",
                "–û—Ç–ª–∏—á–Ω–æ! –ö–æ–≥–¥–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω, –æ–±—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º."
            ]
            return random.choice(mood_responses)
        
        elif any(word in message_lower for word in ["–Ω–µ –ø–æ–Ω–∏–º–∞—é", "—Å–ª–æ–∂–Ω–æ", "—Ç—Ä—É–¥–Ω–æ"]):
            help_responses = [
                "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ! ü§ù –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.",
                "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É—é –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–æ—â–µ –∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.",
                "–•–æ—Ä–æ—à–æ, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Å—Ç–Ω–æ! –ó–Ω–∞—á–∏—Ç, –º–Ω–µ –Ω—É–∂–Ω–æ –ª—É—á—à–µ –æ–±—ä—è—Å–Ω—è—Ç—å. –ù–∞—á–Ω–µ–º —Å –æ—Å–Ω–æ–≤?"
            ]
            return random.choice(help_responses)
        
        elif any(word in message_lower for word in ["–ø–æ–º–æ–≥–∏", "–ø–æ–º–æ—â—å", "–ø–æ–¥—Å–∫–∞–∂–∏"]):
            help_responses = [
                f"–ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É, {user_name}! ü§ù –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —Å —á–µ–º –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å - –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ.",
                "–í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üí™ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –∑–∞–¥–∞—á–µ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–µ - –≤–º–µ—Å—Ç–µ –Ω–∞–π–¥–µ–º —Ä–µ—à–µ–Ω–∏–µ.",
                "–ü–æ–º–æ—â—å - —ç—Ç–æ –º–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è! üéØ –î–µ—Ç–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å, –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏—è."
            ]
            return random.choice(help_responses)
        
        else:
            # –û–±—â–∏–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–µ—Å–µ–¥—ã
            conversation_responses = [
                "–ü–æ–Ω–∏–º–∞—é –≤–∞—à—É –º—ã—Å–ª—å! üí≠ –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –æ —Ç–æ–º, —á—Ç–æ –¥—É–º–∞–µ—Ç–µ –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É.",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è! üåü –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –∫–∞–∫ –≤—ã —Ä–∞—Å—Å—É–∂–¥–∞–µ—Ç–µ. –ß—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –≤–∞—Å –∫ —Ç–∞–∫–æ–º—É –≤—ã–≤–æ–¥—É?",
                "–•–æ—Ä–æ—à–µ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ! üëÄ –≠—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è. –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –º—ã—Å–ª—å!",
                "–°–æ–≥–ª–∞—Å–µ–Ω, —ç—Ç–æ –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç! ‚ú® –ï—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞—Å–ø–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å. –ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç—Ä–∏–≥—É–µ—Ç?"
            ]
            
            return random.choice(conversation_responses)
    
    async def _handle_genius_image_generation(self, message: str, context: Dict) -> str:
        """–ì–µ–Ω–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            prompt = self._extract_image_prompt(message)
            
            if not prompt:
                return "–•–æ—á—É —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –≤–∞—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –æ–ø–∏—Å–∞–Ω–∏–µ! üé®\n\n–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:\n‚Ä¢ –ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?\n‚Ä¢ –ö–∞–∫–æ–π —Å—Ç–∏–ª—å? (—Ä–µ–∞–ª–∏–∑–º, –∞—Ä—Ç, –∞–Ω–∏–º–µ)\n‚Ä¢ –ö–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?\n‚Ä¢ –ö–∞–∫–∏–µ —Ü–≤–µ—Ç–∞ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç?\n\n–ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
            
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {prompt}")
            
            # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç
            enhanced_prompt = self._enhance_prompt_intelligently(prompt)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            await self.send_message(f"üé® –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: '{prompt}'\n\n‚è≥ –ó–∞–ø—É—Å–∫–∞—é Stable Diffusion...\nüí´ –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 2 –º–∏–Ω—É—Ç\nüéØ –ò—Å–ø–æ–ª—å–∑—É—é 50 —à–∞–≥–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_path = await self._generate_genius_image(enhanced_prompt)
            
            if image_path:
                await self.send_photo(image_path, f"üé® –ì–æ—Ç–æ–≤–æ! '{prompt}'\n\n‚ú® –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Stable Diffusion v1.5\nüéØ 50 —à–∞–≥–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
                
                return "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ! üåü\n\n–ö–∞–∫ –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç? –ú–æ–≥—É:\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏\n‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å\n‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏\n‚Ä¢ –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ\n\n–ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ!"
            else:
                return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üòî\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ\n‚Ä¢ –û–ø–∏—Å–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É\n‚Ä¢ –£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üõ†Ô∏è\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ. –Ø –∏—Å–ø—Ä–∞–≤–ª—é –ø—Ä–æ–±–ª–µ–º—É!"
    
    def _extract_image_prompt(self, message: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
        prompt = message
        remove_patterns = [
            r'\b(–Ω–∞—Ä–∏—Å—É–π|—Å–æ–∑–¥–∞–π|—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π|—Å–¥–µ–ª–∞–π|–ø–æ–∫–∞–∂–∏|–≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π)\b',
            r'\b(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ|–∫–∞—Ä—Ç–∏–Ω–∫—É|—Ñ–æ—Ç–æ|—Ä–∏—Å—É–Ω–æ–∫|–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é)\b',
            r'\b(–º–Ω–µ|–¥–ª—è –º–µ–Ω—è|–ø–æ–∂–∞–ª—É–π—Å—Ç–∞|–º–æ–∂–µ—à—å|—Ö–æ—á—É|–Ω—É–∂–Ω–æ)\b'
        ]
        
        for pattern in remove_patterns:
            prompt = re.sub(pattern, '', prompt, flags=re.IGNORECASE)
        
        # –û—á–∏—â–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        prompt = re.sub(r'\s+', ' ', prompt).strip()
        return prompt if len(prompt) > 3 else ""
    
    def _enhance_prompt_intelligently(self, prompt: str) -> str:
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞"""
        enhanced = prompt
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
        prompt_lower = prompt.lower()
        
        if any(word in prompt_lower for word in ["–ø–æ—Ä—Ç—Ä–µ—Ç", "–ª–∏—Ü–æ", "—á–µ–ª–æ–≤–µ–∫", "–¥–µ–≤—É—à–∫–∞", "–º—É–∂—á–∏–Ω–∞"]):
            enhanced += ", portrait photography, professional lighting, high detail, 8k"
        elif any(word in prompt_lower for word in ["–ø–µ–π–∑–∞–∂", "–ø—Ä–∏—Ä–æ–¥–∞", "–∑–∞–∫–∞—Ç", "–æ–∫–µ–∞–Ω", "–≥–æ—Ä—ã"]):
            enhanced += ", landscape photography, natural lighting, scenic view, high resolution"
        elif any(word in prompt_lower for word in ["–∫–æ—Å–º–æ—Å", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–±—É–¥—É—â–µ–µ"]):
            enhanced += ", sci-fi art, futuristic, detailed, concept art, digital painting"
        elif any(word in prompt_lower for word in ["–∂–∏–≤–æ—Ç–Ω–æ–µ", "–∫–æ—Ç", "—Å–æ–±–∞–∫–∞", "–ø—Ç–∏—Ü–∞"]):
            enhanced += ", wildlife photography, natural pose, detailed fur, professional"
        else:
            enhanced += ", high quality, detailed, masterpiece, professional"
        
        return enhanced
    
    async def _generate_genius_image(self, prompt: str) -> Optional[str]:
        """–ì–µ–Ω–∏–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if self.image_pipeline == "fallback":
                return await self._create_genius_placeholder(prompt)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            negative_prompt = "low quality, blurry, distorted, ugly, bad anatomy, deformed, extra limbs, bad hands, text, watermark, signature, username, error, cropped"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            image = self.image_pipeline(
                prompt=prompt,
                negative_prompt=negative_prompt,
                num_inference_steps=50,
                guidance_scale=12.0,
                height=512,
                width=512
            ).images[0]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            timestamp = datetime.now().timestamp()
            image_path = f"/workspace/data/genius_{timestamp}.png"
            os.makedirs("/workspace/data", exist_ok=True)
            image.save(image_path)
            
            return image_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–∏–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return await self._create_genius_placeholder(prompt)
    
    async def _create_genius_placeholder(self, prompt: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–∏–∞–ª—å–Ω–æ–π –∑–∞–≥–ª—É—à–∫–∏"""
        try:
            from PIL import Image, ImageDraw, ImageFont, ImageFilter
            import math
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            width, height = 512, 512
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            img = Image.new('RGB', (width, height))
            draw = ImageDraw.Draw(img)
            
            # –†–∞–¥–∏–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            center_x, center_y = width // 2, height // 2
            max_radius = math.sqrt(center_x**2 + center_y**2)
            
            for y in range(height):
                for x in range(width):
                    # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
                    distance = math.sqrt((x - center_x)**2 + (y - center_y)**2)
                    ratio = distance / max_radius
                    
                    # –¶–≤–µ—Ç–æ–≤–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
                    r = int(100 + ratio * 100)
                    g = int(50 + ratio * 150)
                    b = int(150 + ratio * 50)
                    
                    img.putpixel((x, y), (r, g, b))
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
            img = img.filter(ImageFilter.GaussianBlur(radius=1))
            
            draw = ImageDraw.Draw(img)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
            try:
                title_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 32)
                text_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 18)
                small_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 12)
            except:
                title_font = ImageFont.load_default()
                text_font = ImageFont.load_default()
                small_font = ImageFont.load_default()
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title = "AI Art Generation"
            bbox = draw.textbbox((0, 0), title, font=title_font)
            title_width = bbox[2] - bbox[0]
            
            # –¢–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
            draw.text(((width - title_width) // 2 + 2, 42), title, fill=(0, 0, 0), font=title_font)
            # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            draw.text(((width - title_width) // 2, 40), title, fill=(255, 255, 255), font=title_font)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –∫—Ä–∞—Å–∏–≤–æ
            words = prompt.split()
            lines = []
            current_line = ""
            
            for word in words:
                test_line = current_line + " " + word if current_line else word
                if len(test_line) <= 25:
                    current_line = test_line
                else:
                    if current_line:
                        lines.append(current_line)
                    current_line = word
            
            if current_line:
                lines.append(current_line)
            
            # –†–∏—Å—É–µ–º –ø—Ä–æ–º–ø—Ç
            lines = lines[:4]  # –ú–∞–∫—Å–∏–º—É–º 4 —Å—Ç—Ä–æ–∫–∏
            total_height = len(lines) * 25
            start_y = (height - total_height) // 2 + 30
            
            for i, line in enumerate(lines):
                bbox = draw.textbbox((0, 0), line, font=text_font)
                text_width = bbox[2] - bbox[0]
                x = (width - text_width) // 2
                y = start_y + i * 25
                
                # –¢–µ–Ω—å
                draw.text((x + 1, y + 1), line, fill=(0, 0, 0, 200), font=text_font)
                # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
                draw.text((x, y), line, fill=(255, 255, 255), font=text_font)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
            system_lines = [
                "AGI Layer v3.9 - Genius Mode",
                "Stable Diffusion Ready",
                datetime.now().strftime("%H:%M:%S")
            ]
            
            y_pos = height - 60
            for line in system_lines:
                bbox = draw.textbbox((0, 0), line, font=small_font)
                text_width = bbox[2] - bbox[0]
                draw.text(
                    ((width - text_width) // 2, y_pos),
                    line,
                    fill=(220, 220, 220),
                    font=small_font
                )
                y_pos += 15
            
            # –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            draw.rectangle([8, 8, width-8, height-8], outline=(255, 255, 255), width=2)
            draw.rectangle([12, 12, width-12, height-12], outline=(200, 200, 200), width=1)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            timestamp = datetime.now().timestamp()
            image_path = f"/workspace/data/genius_placeholder_{timestamp}.png"
            os.makedirs("/workspace/data", exist_ok=True)
            img.save(image_path)
            
            return image_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–µ–Ω–∏–∞–ª—å–Ω–æ–π –∑–∞–≥–ª—É—à–∫–∏: {e}")
            return None
    
    async def send_message(self, text, chat_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            target_chat_id = chat_id or self.chat_id
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/sendMessage"
                data = {
                    "chat_id": target_chat_id,
                    "text": text
                }
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get('ok'):
                            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
                            return True
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status}")
                    return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    async def send_photo(self, photo_path, caption="", chat_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        try:
            target_chat_id = chat_id or self.chat_id
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/sendPhoto"
                
                with open(photo_path, 'rb') as photo:
                    data = aiohttp.FormData()
                    data.add_field('chat_id', target_chat_id)
                    data.add_field('photo', photo, filename='genius_art.png')
                    data.add_field('caption', caption)
                    
                    async with session.post(url, data=data) as response:
                        if response.status == 200:
                            result = await response.json()
                            if result.get('ok'):
                                logger.info(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {caption[:50]}...")
                                return True
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            return False
    
    async def get_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/getUpdates"
                params = {"offset": self.last_update_id + 1, "timeout": 30}
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('ok'):
                            return data.get('result', [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return []
    
    async def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            text = message.get('text', '')
            chat_id = message['chat']['id']
            user_id = str(message['from']['id'])
            user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç {user_name}: {text}")
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(text.strip()) < 1:
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            response = await self.generate_genius_response(text, user_id, user_name)
            await self.send_message(response, chat_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await self.send_message("–£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–æ–∏—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö ü§ñ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!", chat_id)
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –≥–µ–Ω–∏–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞"""
        logger.info("üß† –ó–∞–ø—É—Å–∫ Genius AGI Bot v3.9")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò –º–æ–¥–µ–ª–µ–π
        if not await self.initialize_ai_models():
            logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–æ —É–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self.send_message("üß† **Genius AGI v3.9 –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n–¢–µ–ø–µ—Ä—å —É –º–µ–Ω—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç:\n\n‚ú® –ü–æ–Ω–∏–º–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\nüéØ –î–∞—é –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\nü§ù –ê–¥–∞–ø—Ç–∏—Ä—É—é—Å—å –ø–æ–¥ –≤–∞—à —Å—Ç–∏–ª—å\nüé® –°–æ–∑–¥–∞—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n–ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ - –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω—É–∂–Ω–æ!")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            try:
                updates = await self.get_updates()
                
                for update in updates:
                    self.last_update_id = update['update_id']
                    
                    if 'message' in update:
                        await self.process_message(update['message'])
                
                await asyncio.sleep(1)
                
            except KeyboardInterrupt:
                logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–∏–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    genius_agi = GeniusAGI()
    await genius_agi.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë Genius AGI –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")