#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç AGI Layer v3.9 —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏
–ë–µ–∑ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ - —Ç–æ–ª—å–∫–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
"""

import asyncio
import logging
import aiohttp
import os
import sys
import torch
import re
from datetime import datetime
from typing import Dict, Any, Optional
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∞–≥–µ–Ω—Ç–∞–º
sys.path.append(str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
from dotenv import load_dotenv
load_dotenv()

TOKEN = os.getenv('TELEGRAM_TOKEN', '8325306099:AAG6hk3tG2-XmiJPgegzYFzQcY6WJaEbRxw')
CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '458589236')
API_URL = f"https://api.telegram.org/bot{TOKEN}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('agi_intelligent.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class IntelligentAGI:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è AGI —Å–∏—Å—Ç–µ–º–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏"""
    
    def __init__(self):
        self.token = TOKEN
        self.chat_id = CHAT_ID
        self.api_url = API_URL
        self.last_update_id = 0
        
        # –ò–ò –º–æ–¥–µ–ª–∏
        self.text_model = None
        self.text_tokenizer = None
        self.image_pipeline = None
        self.vision_model = None
        self.vision_processor = None
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        self.models_ready = False
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {self.device}")
        
    async def initialize_ai_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ò–ò –º–æ–¥–µ–ª–µ–π"""
        try:
            logger.info("üß† –ó–∞–≥—Ä—É–∑–∫–∞ –ò–ò –º–æ–¥–µ–ª–µ–π...")
            
            # –î–ª—è CPU –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ª–µ–≥–∫–∏–µ –º–æ–¥–µ–ª–∏
            await self._load_text_model()
            await self._load_image_model()
            await self._load_vision_model()
            
            self.models_ready = True
            logger.info("‚úÖ –í—Å–µ –ò–ò –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            return False
    
    async def _load_text_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            from transformers import AutoTokenizer, AutoModelForCausalLM
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è CPU
            model_name = "microsoft/DialoGPT-small"  # –ë–æ–ª–µ–µ –ª–µ–≥–∫–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
            
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏: {model_name}")
            
            self.text_tokenizer = AutoTokenizer.from_pretrained(model_name)
            self.text_model = AutoModelForCausalLM.from_pretrained(
                model_name,
                torch_dtype=torch.float32,
                device_map="cpu" if self.device == "cpu" else "auto"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º pad_token –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if self.text_tokenizer.pad_token is None:
                self.text_tokenizer.pad_token = self.text_tokenizer.eos_token
                
            logger.info("‚úÖ –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏: {e}")
            # Fallback - –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞
            self.text_model = "fallback"
    
    async def _load_image_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            from diffusers import StableDiffusionPipeline
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–≥–∫—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è CPU
            model_name = "runwayml/stable-diffusion-v1-5"
            
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {model_name}")
            
            self.image_pipeline = StableDiffusionPipeline.from_pretrained(
                model_name,
                torch_dtype=torch.float32 if self.device == "cpu" else torch.float16,
                safety_checker=None,
                requires_safety_checker=False
            )
            
            if self.device == "cpu":
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è CPU
                self.image_pipeline.enable_attention_slicing()
            else:
                self.image_pipeline = self.image_pipeline.to(self.device)
                
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            self.image_pipeline = "fallback"
    
    async def _load_vision_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            from transformers import BlipProcessor, BlipForConditionalGeneration
            
            model_name = "Salesforce/blip-image-captioning-base"
            
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {model_name}")
            
            self.vision_processor = BlipProcessor.from_pretrained(model_name)
            self.vision_model = BlipForConditionalGeneration.from_pretrained(
                model_name,
                torch_dtype=torch.float32
            ).to(self.device)
            
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            self.vision_model = "fallback"
    
    async def generate_intelligent_response(self, user_message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            intent = self._analyze_intent(user_message)
            
            if intent == "generate_image":
                return await self._handle_image_generation(user_message)
            elif intent == "question":
                return await self._handle_question(user_message)
            elif intent == "conversation":
                return await self._handle_conversation(user_message)
            else:
                return await self._handle_general(user_message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    
    def _analyze_intent(self, message: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message_lower = message.lower()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_patterns = [
            r'\b(–Ω–∞—Ä–∏—Å—É–π|—Å–æ–∑–¥–∞–π|—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π|—Å–¥–µ–ª–∞–π)\b.*\b(–∫–∞—Ä—Ç–∏–Ω|–∏–∑–æ–±—Ä–∞–∂–µ–Ω|—Ä–∏—Å—É–Ω|—Ñ–æ—Ç–æ)\b',
            r'\b(–ø–æ–∫–∞–∂–∏|–≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π)\b.*\b(–∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç|–∫–∞—Ä—Ç–∏–Ω–∫)\b',
            r'\b–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\b.*\b(—Å|–≥–¥–µ|–ø—Ä–æ)\b',
            r'\b–∫–∞—Ä—Ç–∏–Ω–∫\b.*\b(—Å|–≥–¥–µ|–ø—Ä–æ)\b',
            r'\b–Ω–∞—Ä–∏—Å—É–π\b',
            r'\b—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π\b'
        ]
        
        for pattern in image_patterns:
            if re.search(pattern, message_lower):
                return "generate_image"
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        question_patterns = [
            r'\b(—á—Ç–æ|–∫–∞–∫|–≥–¥–µ|–∫–æ–≥–¥–∞|–ø–æ—á–µ–º—É|–∑–∞—á–µ–º|–∫–∞–∫–æ–π|–∫–∞–∫–∞—è|–∫–∞–∫–∏–µ)\b',
            r'\b(—Ä–∞—Å—Å–∫–∞–∂–∏|–æ–±—ä—è—Å–Ω–∏|–ø–æ—è—Å–Ω–∏)\b',
            r'\?$'
        ]
        
        for pattern in question_patterns:
            if re.search(pattern, message_lower):
                return "question"
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –æ–±—â–µ–Ω–∏–µ
        conversation_patterns = [
            r'\b(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–¥–æ–±—Ä—ã–π|—Ö–∞–π|hello)\b',
            r'\b(–∫–∞–∫ –¥–µ–ª–∞|–∫–∞–∫ –∂–∏–∑–Ω—å|—á—Ç–æ –Ω–æ–≤–æ–≥–æ)\b',
            r'\b(—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é|thanks)\b'
        ]
        
        for pattern in conversation_patterns:
            if re.search(pattern, message_lower):
                return "conversation"
        
        return "general"
    
    async def _handle_image_generation(self, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            prompt = self._extract_image_prompt(message)
            
            if not prompt:
                return "–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å. –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∫–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ."
            
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {prompt}")
            
            if self.image_pipeline == "fallback" or not self.models_ready:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_path = await self._create_placeholder_image(prompt)
                await self.send_photo(image_path, f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {prompt}")
                return f"–°–æ–∑–¥–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é: '{prompt}'"
            
            # –†–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            image_path = await self._generate_real_image(prompt)
            if image_path:
                await self.send_photo(image_path, f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {prompt}")
                return f"–í–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é!"
            else:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ."
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    
    def _extract_image_prompt(self, message: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
        message = re.sub(r'\b(–Ω–∞—Ä–∏—Å—É–π|—Å–æ–∑–¥–∞–π|—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π|—Å–¥–µ–ª–∞–π|–ø–æ–∫–∞–∂–∏|–≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π)\b', '', message, flags=re.IGNORECASE)
        message = re.sub(r'\b(–∫–∞—Ä—Ç–∏–Ω|–∏–∑–æ–±—Ä–∞–∂–µ–Ω|—Ä–∏—Å—É–Ω|—Ñ–æ—Ç–æ|–∫–∞—Ä—Ç–∏–Ω–∫)\b', '', message, flags=re.IGNORECASE)
        message = re.sub(r'\b(–º–Ω–µ|–¥–ª—è –º–µ–Ω—è|–ø–æ–∂–∞–ª—É–π—Å—Ç–∞)\b', '', message, flags=re.IGNORECASE)
        
        # –û—á–∏—â–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        prompt = message.strip()
        return prompt if len(prompt) > 3 else ""
    
    async def _generate_real_image(self, prompt: str) -> Optional[str]:
        """–†–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if self.image_pipeline == "fallback":
                return await self._create_placeholder_image(prompt)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = self.image_pipeline(
                prompt,
                num_inference_steps=20,  # –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
                guidance_scale=7.5,
                height=512,
                width=512
            ).images[0]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            timestamp = datetime.now().timestamp()
            image_path = f"./output/images/generated_{timestamp}.png"
            os.makedirs("./output/images", exist_ok=True)
            image.save(image_path)
            
            return image_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return await self._create_placeholder_image(prompt)
    
    async def _create_placeholder_image(self, prompt: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è-–∑–∞–≥–ª—É—à–∫–∏"""
        try:
            from PIL import Image, ImageDraw, ImageFont
            import random
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.new('RGB', (512, 512), color=(random.randint(50, 200), random.randint(50, 200), random.randint(50, 200)))
            draw = ImageDraw.Draw(img)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            try:
                font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 20)
            except:
                font = ImageFont.load_default()
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            words = prompt.split()
            lines = []
            current_line = ""
            
            for word in words:
                if len(current_line + " " + word) < 25:
                    current_line += " " + word if current_line else word
                else:
                    lines.append(current_line)
                    current_line = word
            if current_line:
                lines.append(current_line)
            
            # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
            y = 200
            for line in lines[:4]:  # –ú–∞–∫—Å–∏–º—É–º 4 —Å—Ç—Ä–æ–∫–∏
                bbox = draw.textbbox((0, 0), line, font=font)
                text_width = bbox[2] - bbox[0]
                x = (512 - text_width) // 2
                draw.text((x, y), line, fill=(255, 255, 255), font=font)
                y += 30
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–º–∫—É
            draw.rectangle([10, 10, 502, 502], outline=(255, 255, 255), width=3)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            timestamp = datetime.now().timestamp()
            image_path = f"./output/images/placeholder_{timestamp}.png"
            os.makedirs("./output/images", exist_ok=True)
            img.save(image_path)
            
            return image_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏: {e}")
            return None
    
    async def _handle_question(self, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        try:
            if self.text_model == "fallback" or not self.models_ready:
                return self._generate_fallback_answer(message)
            
            # –†–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            return await self._generate_ai_response(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return self._generate_fallback_answer(message)
    
    async def _handle_conversation(self, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä—ã–π', '—Ö–∞–π', 'hello']):
            return "–ü—Ä–∏–≤–µ—Ç! –Ø –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –ú–æ–≥—É –æ–±—â–∞—Ç—å—Å—è, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û —á–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏–º?"
        
        elif any(word in message_lower for word in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ –∂–∏–∑–Ω—å', '—á—Ç–æ –Ω–æ–≤–æ–≥–æ']):
            return "–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–ª–∏ –∑–∞–¥–∞—á–∞–º–∏. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
        
        elif any(word in message_lower for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks']):
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!"
        
        else:
            return await self._handle_general(message)
    
    async def _handle_general(self, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if self.text_model == "fallback" or not self.models_ready:
                return self._generate_fallback_response(message)
            
            return await self._generate_ai_response(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return self._generate_fallback_response(message)
    
    async def _generate_ai_response(self, message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = f"Human: {message}\nAI:"
            
            # –¢–æ–∫–µ–Ω–∏–∑–∏—Ä—É–µ–º
            inputs = self.text_tokenizer.encode(prompt, return_tensors="pt")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            with torch.no_grad():
                outputs = self.text_model.generate(
                    inputs,
                    max_length=inputs.shape[1] + 100,
                    num_return_sequences=1,
                    temperature=0.8,
                    do_sample=True,
                    pad_token_id=self.text_tokenizer.eos_token_id
                )
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º
            response = self.text_tokenizer.decode(outputs[0], skip_special_tokens=True)
            response = response[len(prompt):].strip()
            
            if not response:
                return self._generate_fallback_response(message)
            
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ò–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return self._generate_fallback_response(message)
    
    def _generate_fallback_answer(self, message: str) -> str:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"""
        question_words = ['—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º']
        
        if any(word in message.lower() for word in question_words):
            if '—á—Ç–æ' in message.lower():
                return f"–ü–æ –ø–æ–≤–æ–¥—É –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ —Ç–æ–º, —á—Ç–æ... –≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–±—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è. –ú–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —ç—Ç–æ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏."
            elif '–∫–∞–∫' in message.lower():
                return f"–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–≥–æ, –∫–∞–∫... –û–±—ã—á–Ω–æ —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤. –í–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É —Å–∏—Ç—É–∞—Ü–∏–∏."
            elif '–≥–¥–µ' in message.lower():
                return f"–ß—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è... –≠—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–Ω–æ–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤. –û–±—ã—á–Ω–æ —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
            elif '–∫–æ–≥–¥–∞' in message.lower():
                return f"–ü–æ –ø–æ–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏... –≠—Ç–æ –≤–∞–∂–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–ª–∏—è–µ—Ç –Ω–∞ –º–Ω–æ–≥–∏–µ –∞—Å–ø–µ–∫—Ç—ã. –û–±—ã—á–Ω–æ —Å—Ç–æ–∏—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏."
            elif '–ø–æ—á–µ–º—É' in message.lower():
                return f"–ü—Ä–∏—á–∏–Ω—ã —ç—Ç–æ–≥–æ... –û–±—ã—á–Ω–æ –∫—Ä–æ—é—Ç—Å—è –≤ –∫–æ–º–ø–ª–µ–∫—Å–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤. –í–∞–∂–Ω–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞–∫ –ø—Ä—è–º—ã–µ, —Ç–∞–∫ –∏ –∫–æ—Å–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã."
        
        return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –≠—Ç–æ —Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è. –ï—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞—Å–ø–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å."
    
    def _generate_fallback_response(self, message: str) -> str:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        import random
        
        responses = [
            f"–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞.",
            f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å! –ù–∞–¥ —ç—Ç–∏–º —Å—Ç–æ–∏—Ç –ø–æ–¥—É–º–∞—Ç—å.",
            f"–î–∞, —ç—Ç–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è. –ï—Å—Ç—å –º–Ω–æ–≥–æ –Ω—é–∞–Ω—Å–æ–≤ –≤ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ.",
            f"–°–æ–≥–ª–∞—Å–µ–Ω, —ç—Ç–æ –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ß—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ–± —ç—Ç–æ–º?",
            f"–•–æ—Ä–æ—à–µ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ! –≠—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è."
        ]
        
        return random.choice(responses)
    
    async def analyze_image(self, image_path: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if self.vision_model == "fallback" or not self.models_ready:
                return self._generate_image_fallback(image_path)
            
            from PIL import Image
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(image_path).convert('RGB')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            inputs = self.vision_processor(image, return_tensors="pt").to(self.device)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            with torch.no_grad():
                out = self.vision_model.generate(**inputs, max_length=50)
            
            description = self.vision_processor.decode(out[0], skip_special_tokens=True)
            
            return f"–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —è –≤–∏–∂—É: {description}"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return self._generate_image_fallback(image_path)
    
    def _generate_image_fallback(self, image_path: str) -> str:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            from PIL import Image
            image = Image.open(image_path)
            width, height = image.size
            
            return f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º {width}x{height} –ø–∏–∫—Å–µ–ª–µ–π. –í–∏–∂—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞—é—Ç —Ü–µ–ª–æ—Å—Ç–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É."
            
        except Exception as e:
            return "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –í–∏–∂—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏ –¥–µ—Ç–∞–ª—è–º–∏."
    
    async def send_message(self, text, chat_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            target_chat_id = chat_id or self.chat_id
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/sendMessage"
                data = {
                    "chat_id": target_chat_id,
                    "text": text
                }
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get('ok'):
                            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
                            return True
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status}")
                    return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    async def send_photo(self, photo_path, caption="", chat_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        try:
            target_chat_id = chat_id or self.chat_id
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/sendPhoto"
                
                with open(photo_path, 'rb') as photo:
                    data = aiohttp.FormData()
                    data.add_field('chat_id', target_chat_id)
                    data.add_field('photo', photo, filename='generated.png')
                    data.add_field('caption', caption)
                    
                    async with session.post(url, data=data) as response:
                        if response.status == 200:
                            result = await response.json()
                            if result.get('ok'):
                                logger.info(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {caption[:50]}...")
                                return True
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            return False
    
    async def download_photo(self, file_id, save_path):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/getFile"
                params = {"file_id": file_id}
                
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get('ok'):
                            file_path = result['result']['file_path']
                            
                            download_url = f"https://api.telegram.org/file/bot{self.token}/{file_path}"
                            async with session.get(download_url) as file_response:
                                if file_response.status == 200:
                                    with open(save_path, 'wb') as f:
                                        f.write(await file_response.read())
                                    return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
            return False
    
    async def get_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/getUpdates"
                params = {"offset": self.last_update_id + 1, "timeout": 30}
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('ok'):
                            return data.get('result', [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return []
    
    async def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            text = message.get('text', '')
            chat_id = message['chat']['id']
            user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç {user_name}: {text}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            if 'photo' in message:
                await self.process_photo(message, chat_id)
                return
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(text.strip()) < 2:
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            response = await self.generate_intelligent_response(text)
            await self.send_message(response, chat_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await self.send_message("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", chat_id)
    
    async def process_photo(self, message, chat_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        try:
            photos = message['photo']
            largest_photo = max(photos, key=lambda x: x['file_size'])
            file_id = largest_photo['file_id']
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            photo_path = f"./temp_photo_{datetime.now().timestamp()}.jpg"
            
            await self.send_message("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", chat_id)
            
            if await self.download_photo(file_id, photo_path):
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
                analysis = await self.analyze_image(photo_path)
                await self.send_message(analysis, chat_id)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(photo_path):
                    os.remove(photo_path)
            else:
                await self.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", chat_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await self.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", chat_id)
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ AGI –±–æ—Ç–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò –º–æ–¥–µ–ª–µ–π
        if not await self.initialize_ai_models():
            logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–µ–∫")
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self.send_message("üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π AGI –ø–æ–º–æ—â–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω!\n\n–ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ - —è –ø–æ–Ω–∏–º–∞—é –≤–∞—à–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. –ú–æ–≥—É –æ–±—â–∞—Ç—å—Å—è, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            try:
                updates = await self.get_updates()
                
                for update in updates:
                    self.last_update_id = update['update_id']
                    
                    if 'message' in update:
                        await self.process_message(update['message'])
                
                await asyncio.sleep(1)
                
            except KeyboardInterrupt:
                logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    agi = IntelligentAGI()
    await agi.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")