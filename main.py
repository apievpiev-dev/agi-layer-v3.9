#!/usr/bin/env python3
"""
AGI Layer v3.9 - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞
"""

import asyncio
import logging
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from config.settings import settings
from agents.meta_agent import MetaAgent
from agents.telegram_agent import TelegramAgent
from agents.image_agent import ImageAgent
from agents.text_agent import TextAgent
from agents.vision_agent import VisionAgent
from agents.ocr_agent import OCRAgent
from agents.embedding_agent import EmbeddingAgent
from agents.recovery_agent import RecoveryAgent


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(settings.LOG_PATH, 'agi_layer.log')),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)


def get_agent_config() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
    return {
        'postgres': {
            'host': settings.POSTGRES_HOST,
            'port': settings.POSTGRES_PORT,
            'database': settings.POSTGRES_DB,
            'user': settings.POSTGRES_USER,
            'password': settings.POSTGRES_PASSWORD
        },
        'chroma': {
            'host': settings.CHROMA_HOST,
            'port': settings.CHROMA_PORT,
            'collection': settings.CHROMA_COLLECTION
        },
        'redis': {
            'host': settings.REDIS_HOST,
            'port': settings.REDIS_PORT,
            'password': settings.REDIS_PASSWORD
        },
        'telegram_token': settings.TELEGRAM_TOKEN,
        'telegram_chat_id': settings.TELEGRAM_CHAT_ID,
        'models_path': settings.MODELS_PATH,
        'logs_path': settings.LOG_PATH,
        'agents': {
            'meta_agent': {'loop_interval': settings.AGENT_LOOP_INTERVAL},
            'telegram_agent': {'telegram_token': settings.TELEGRAM_TOKEN},
            'image_agent': {'models_path': settings.MODELS_PATH},
            'text_agent': {'models_path': settings.MODELS_PATH},
            'vision_agent': {'models_path': settings.MODELS_PATH},
            'ocr_agent': {'models_path': settings.MODELS_PATH},
            'embedding_agent': {'models_path': settings.MODELS_PATH},
            'recovery_agent': {'logs_path': settings.LOG_PATH}
        }
    }


async def start_agent(agent_name: str, config: dict):
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
    try:
        logger.info(f"–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ {agent_name}")
        
        agent_config = config.copy()
        agent_config.update(config['agents'].get(agent_name, {}))
        
        if agent_name == 'meta_agent':
            agent = MetaAgent(agent_config)
        elif agent_name == 'telegram_agent':
            agent = TelegramAgent(agent_config)
        elif agent_name == 'image_agent':
            agent = ImageAgent(agent_config)
        elif agent_name == 'text_agent':
            agent = TextAgent(agent_config)
        elif agent_name == 'vision_agent':
            agent = VisionAgent(agent_config)
        elif agent_name == 'ocr_agent':
            agent = OCRAgent(agent_config)
        elif agent_name == 'embedding_agent':
            agent = EmbeddingAgent(agent_config)
        elif agent_name == 'recovery_agent':
            agent = RecoveryAgent(agent_config)
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç: {agent_name}")
            return None
        
        await agent.start()
        return agent
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ {agent_name}: {e}")
        return None


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ AGI Layer v3.9")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = get_agent_config()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    agent_name = os.getenv('AGENT_NAME', 'meta_agent')
    
    if agent_name == 'all':
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        agents = [
            'meta_agent',
            'telegram_agent',
            'image_agent',
            'text_agent',
            'vision_agent',
            'ocr_agent',
            'embedding_agent',
            'recovery_agent'
        ]
        
        running_agents = []
        for agent in agents:
            agent_instance = await start_agent(agent, config)
            if agent_instance:
                running_agents.append(agent_instance)
        
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ {len(running_agents)} –∞–≥–µ–Ω—Ç–æ–≤")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            await asyncio.gather(*[agent.stop() for agent in running_agents])
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            for agent in running_agents:
                await agent.stop()
    
    else:
        # –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        agent = await start_agent(agent_name, config)
        
        if agent:
            logger.info(f"–ê–≥–µ–Ω—Ç {agent_name} –∑–∞–ø—É—â–µ–Ω")
            
            try:
                # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                while agent.running:
                    await asyncio.sleep(1)
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
                await agent.stop()
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç {agent_name}")
            sys.exit(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

