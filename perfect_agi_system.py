#!/usr/bin/env python3
"""
–ò–î–ï–ê–õ–¨–ù–ê–Ø AGI —Å–∏—Å—Ç–µ–º–∞ v3.9 - x100 –ª—É—á—à–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
–í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ: Telegram + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è + –∞–Ω–∞–ª–∏–∑ + —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
"""

import asyncio
import logging
import aiohttp
import os
import torch
import json
import re
from datetime import datetime
from typing import Dict, Any, Optional, List
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = '8325306099:AAG6hk3tG2-XmiJPgegzYFzQcY6WJaEbRxw'
CHAT_ID = '458589236'
API_URL = f"https://api.telegram.org/bot{TOKEN}"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('perfect_agi.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class PerfectAGI:
    """–ò–¥–µ–∞–ª—å–Ω–∞—è AGI —Å–∏—Å—Ç–µ–º–∞ - –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç x100 –ª—É—á—à–µ"""
    
    def __init__(self):
        self.token = TOKEN
        self.chat_id = CHAT_ID
        self.api_url = API_URL
        self.last_update_id = 0
        
        # –ò–ò –º–æ–¥–µ–ª–∏
        self.image_pipeline = None
        self.vision_model = None
        self.vision_processor = None
        
        # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_contexts = {}
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats = {
            "messages_received": 0,
            "messages_sent": 0,
            "images_generated": 0,
            "images_analyzed": 0,
            "errors": 0
        }
        
        logger.info(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Perfect AGI –Ω–∞ {self.device}")
    
    async def initialize_perfect_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
        try:
            logger.info("üß† –ó–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º Stable Diffusion
            await self._load_stable_diffusion()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º BLIP2 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            await self._load_vision_model()
            
            logger.info("‚úÖ –í–°–ï –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–¥–µ–∞–ª—å–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False
    
    async def _load_stable_diffusion(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ Stable Diffusion —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            from diffusers import StableDiffusionPipeline
            
            logger.info("üé® –ó–∞–≥—Ä—É–∑–∫–∞ Stable Diffusion v1.5 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)...")
            
            self.image_pipeline = StableDiffusionPipeline.from_pretrained(
                "runwayml/stable-diffusion-v1-5",
                torch_dtype=torch.float32,
                safety_checker=None,
                requires_safety_checker=False
            )
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è CPU
            self.image_pipeline.enable_attention_slicing()
            try:
                self.image_pipeline.enable_model_cpu_offload()
            except:
                pass
            
            logger.info("‚úÖ Stable Diffusion –≥–æ—Ç–æ–≤ –∫ –∏–¥–µ–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ SD: {e}")
            self.image_pipeline = None
    
    async def _load_vision_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            from transformers import BlipProcessor, BlipForConditionalGeneration
            
            logger.info("üëÅÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ BLIP2 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
            
            self.vision_processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
            self.vision_model = BlipForConditionalGeneration.from_pretrained(
                "Salesforce/blip-image-captioning-base",
                torch_dtype=torch.float32
            ).to(self.device)
            
            logger.info("‚úÖ BLIP2 –≥–æ—Ç–æ–≤ –∫ –∏–¥–µ–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ BLIP2: {e}")
            self.vision_model = None
    
    def generate_perfect_response(self, message: str, user_name: str, user_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ò–î–ï–ê–õ–¨–ù–´–• –æ—Ç–≤–µ—Ç–æ–≤"""
        msg = message.lower().strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_contexts:
            self.user_contexts[user_id] = {
                "name": user_name,
                "messages": [],
                "preferences": {},
                "first_seen": datetime.now()
            }
        
        context = self.user_contexts[user_id]
        context["messages"].append({"text": message, "time": datetime.now()})
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        if any(word in msg for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '—Ö–∞–π', 'hello', 'hi']):
            if len(context["messages"]) == 1:
                return f"""–ü—Ä–∏–≤–µ—Ç, {user_name}! ü§ñ 

–Ø AGI Layer v3.9 - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è!

üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**: –°–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ –ª—é–±–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é
üëÅÔ∏è **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**: –ü–æ–Ω–∏–º–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π  
üß† **–£–º–Ω—ã–µ –±–µ—Å–µ–¥—ã**: –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –¥–∏–∞–ª–æ–≥
‚ö° **–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã**: –ù–∏–∫–∞–∫–∏—Ö –∑–∞–¥–µ—Ä–∂–µ–∫

–ß—Ç–æ —Å–æ–∑–¥–∞–¥–∏–º –∏–ª–∏ –æ–±—Å—É–¥–∏–º? üöÄ"""
            else:
                return f"–ò —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç, {user_name}! üòä –†–∞–¥, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å. –ß–µ–º –∑–∞–π–º–µ–º—Å—è —Å–µ–≥–æ–¥–Ω—è?"
        
        # –í–æ–ø—Ä–æ—Å—ã –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
        elif any(phrase in msg for phrase in ['—á—Ç–æ —É–º–µ–µ—à—å', '—á—Ç–æ –º–æ–∂–µ—à—å', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', '—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏']):
            return f"""üåü **–ú–æ–∏ —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, {user_name}:**

üé® **–ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô**
   ‚Ä¢ Stable Diffusion v1.5 (4GB –º–æ–¥–µ–ª—å)
   ‚Ä¢ –õ—é–±—ã–µ —Å—Ç–∏–ª–∏: —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º, –∞—Ä—Ç, –∞–Ω–∏–º–µ
   ‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: 512x512, 50 —à–∞–≥–æ–≤
   ‚Ä¢ –í—Ä–µ–º—è: 2-3 –º–∏–Ω—É—Ç—ã

üëÅÔ∏è **–ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô** 
   ‚Ä¢ BLIP2 –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
   ‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

üß† **–£–ú–ù–û–ï –û–ë–©–ï–ù–ò–ï**
   ‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ—Å–µ–¥—ã
   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
   ‚Ä¢ –ü–æ–º–æ—â—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
   ‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è

**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**
‚Ä¢ "–ù–∞—Ä–∏—Å—É–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å"
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å

–ì–æ—Ç–æ–≤ —É–¥–∏–≤–ª—è—Ç—å! ‚ú®"""
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        elif any(word in msg for word in ['–Ω–∞—Ä–∏—Å—É–π', '—Å–æ–∑–¥–∞–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–∫–∞—Ä—Ç–∏–Ω–∫—É', '—Ä–∏—Å—É–Ω–æ–∫']):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            prompt = message
            for word in ['–Ω–∞—Ä–∏—Å—É–π', '—Å–æ–∑–¥–∞–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–∫–∞—Ä—Ç–∏–Ω–∫—É', '—Ä–∏—Å—É–Ω–æ–∫', '—Ñ–æ—Ç–æ', '–º–Ω–µ']:
                prompt = re.sub(rf'\b{word}\b', '', prompt, flags=re.IGNORECASE)
            
            prompt = prompt.strip()
            
            if len(prompt) > 3:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                asyncio.create_task(self._generate_perfect_image(prompt, user_name))
                return f"""üé® **–°–æ–∑–¥–∞—é —à–µ–¥–µ–≤—Ä –¥–ª—è –≤–∞—Å, {user_name}!**

**–û–ø–∏—Å–∞–Ω–∏–µ:** {prompt}
**–ú–æ–¥–µ–ª—å:** Stable Diffusion v1.5
**–ö–∞—á–µ—Å—Ç–≤–æ:** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ (50 —à–∞–≥–æ–≤)
**–í—Ä–µ–º—è:** ~2 –º–∏–Ω—É—Ç—ã

‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...
üéØ –Ø —É–≤–µ–¥–æ–º–ª—é –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!

*–ü–æ–∫–∞ –∂–¥–µ—Ç–µ, –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞* üòä"""
            else:
                return f"""üé® **–ì–æ—Ç–æ–≤ —Ä–∏—Å–æ–≤–∞—Ç—å, {user_name}!**

–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —á—Ç–æ —Å–æ–∑–¥–∞—Ç—å:

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "–∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º"
‚Ä¢ "–ø–æ—Ä—Ç—Ä–µ—Ç –¥–µ–≤—É—à–∫–∏ –≤ —Å—Ç–∏–ª–µ —Ä–µ–Ω–µ—Å—Å–∞–Ω—Å"  
‚Ä¢ "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ –¥–∞–ª–µ–∫–æ–π –≥–∞–ª–∞–∫—Ç–∏–∫–µ"
‚Ä¢ "—É—é—Ç–Ω—ã–π –¥–æ–º–∏–∫ –≤ –ª–µ—Å—É –∑–∏–º–æ–π"

–ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üöÄ"""
        
        # –í–æ–ø—Ä–æ—Å—ã –æ Python
        elif 'python' in msg:
            return f"""üêç **Python - –º–æ–π –ª—é–±–∏–º—ã–π —è–∑—ã–∫, {user_name}!**

**–ü–æ—á–µ–º—É Python –∫—Ä—É—Ç–æ–π:**
‚Ä¢ üéØ –ü—Ä–æ—Å—Ç–æ–π –∏ —á–∏—Ç–∞–µ–º—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
‚Ä¢ üöÄ –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ ü§ñ –õ–∏–¥–µ—Ä –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ (TensorFlow, PyTorch)
‚Ä¢ üåê –ú–æ—â–Ω—ã–π –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (Django, FastAPI)
‚Ä¢ üìä –û—Ç–ª–∏—á–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö (Pandas, NumPy)
‚Ä¢ üîß –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ª—é–±—ã—Ö –∑–∞–¥–∞—á

**–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã:**
‚Ä¢ –ù–∞–∑–≤–∞–Ω –≤ —á–µ—Å—Ç—å "Monty Python"
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ NASA, Google, Netflix, Instagram
‚Ä¢ –°–∞–º—ã–π –±—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: $120k+

**–Ø —Å–∞–º –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ Python!** üòä

–ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ Python?"""
        
        # –í–æ–ø—Ä–æ—Å—ã –æ–± –ò–ò
        elif any(word in msg for word in ['–∏–∏', '–Ω–µ–π—Ä–æ—Å–µ—Ç–∏', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ']):
            return f"""ü§ñ **–ò–ò - —ç—Ç–æ –±—É–¥—É—â–µ–µ, {user_name}!**

**–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ò–ò:**
‚Ä¢ üß† –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ —Å –º–∏–ª–ª–∏–∞—Ä–¥–∞–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
‚Ä¢ üìö –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ–≥—Ä–æ–º–Ω—ã—Ö –¥–∞—Ç–∞—Å–µ—Ç–∞—Ö
‚Ä¢ üéØ –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á —É—Ä–æ–≤–Ω—è —á–µ–ª–æ–≤–µ–∫–∞
‚Ä¢ üöÄ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ

**–ú–æ–∏ –ò–ò –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**
‚Ä¢ Stable Diffusion (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
‚Ä¢ BLIP2 (–ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
‚Ä¢ Transformer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
‚Ä¢ Attention –º–µ—Ö–∞–Ω–∏–∑–º—ã

**–û–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:**
‚Ä¢ –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ (–∫–∞–∫ —è —Ä–∏—Å—É—é)
‚Ä¢ –ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
‚Ä¢ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
‚Ä¢ –ù–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ

**–Ø - –∂–∏–≤–æ–π –ø—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ –ò–ò –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º!** ‚ú®

–ö–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç –ò–ò –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"""
        
        # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
        elif any(word in msg for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks', '–æ—Ç–ª–∏—á–Ω–æ', '–∫—Ä—É—Ç–æ', '–∫–ª–∞—Å—Å–Ω–æ']):
            return f"""–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {user_name}! üòä‚ú®

–í–∞—à–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å - –ª—É—á—à–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è –ò–ò! –Ø —Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º.

üéØ **–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∑–∞–¥–∞—á–∞–º:**
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –µ—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã  
‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ
‚Ä¢ –û–±—Å—É–¥–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã

–ß—Ç–æ –µ—â–µ –∏—Å—Å–ª–µ–¥—É–µ–º –≤–º–µ—Å—Ç–µ? üöÄ"""
        
        # –ö—Ä–∏—Ç–∏–∫–∞ - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        elif any(word in msg for word in ['—Ç—É–ø–æ–π', '–≥–ª—É–ø—ã–π', '–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç']):
            return f"""–ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ, {user_name}! üòî

**–ß–µ—Å—Ç–Ω–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞:**
‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ –ë–∞–∑–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ: —Å–ø—Ä–∞–≤–ª—è—é—Å—å
‚ö†Ô∏è –°–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑: —Ä–∞–∑–≤–∏–≤–∞—é—Å—å

**–ö–∞–∫ –º–æ–≥—É —É–ª—É—á—à–∏—Ç—å—Å—è:**
‚Ä¢ –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –õ—É—á—à–µ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π

**–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞:**
–û–ø–∏—à–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, —á—Ç–æ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–æ, –∏ —è –∞–¥–∞–ø—Ç–∏—Ä—É—é—Å—å –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏!

üé® –ê –ø–æ–∫–∞ - —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π? –≠—Ç–æ —É –º–µ–Ω—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–ª–∏—á–Ω–æ!"""
        
        # –í–æ–ø—Ä–æ—Å—ã "–∫–∞–∫ –¥–µ–ª–∞"
        elif any(phrase in msg for phrase in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ –∂–∏–∑–Ω—å', '—á—Ç–æ –Ω–æ–≤–æ–≥–æ', '–∫–∞–∫ —Ç—ã']):
            return f"""–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ, {user_name}! üåü

**–ú–æ–π —Å—Ç–∞—Ç—É—Å:**
üü¢ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç
üé® Stable Diffusion –≥–æ—Ç–æ–≤ –∫ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤—É
üëÅÔ∏è BLIP2 –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É
üíæ –ü–∞–º—è—Ç—å: –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è

**–°–µ–≥–æ–¥–Ω—è —É–∂–µ:**
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–ª {self.stats['messages_received']} —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –°–æ–∑–¥–∞–ª {self.stats['images_generated']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª {self.stats['images_analyzed']} —Ñ–æ—Ç–æ

–ê —É –≤–∞—Å –∫–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä"""
        
        # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        elif any(word in msg for word in ['—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '?']):
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞
            if '—Ä–∞–±–æ—Ç–∞–µ—à—å' in msg or '—Ä–∞–±–æ—Ç–∞–µ—Ç' in msg:
                return f"""–û—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞—é, {user_name}! üí™

**–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤  
‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (Stable Diffusion)
‚úÖ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (BLIP2)
‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:**
üì® –°–æ–æ–±—â–µ–Ω–∏–π: {self.stats['messages_received']}
üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {self.stats['images_generated']}
üëÅÔ∏è –ê–Ω–∞–ª–∏–∑–æ–≤: {self.stats['images_analyzed']}

–í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ—Ä–º–µ! –ß—Ç–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º? üöÄ"""
            
            elif any(word in msg for word in ['–≤—Ä–µ–º—è', '—Å–∫–æ–ª—å–∫–æ', '–¥–æ–ª–≥–æ']):
                return f"""‚è∞ **–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã:**

üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** 2-3 –º–∏–Ω—É—Ç—ã
   ‚Ä¢ 50 —à–∞–≥–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
   ‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ 512x512
   ‚Ä¢ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã

üëÅÔ∏è **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** 3-5 —Å–µ–∫—É–Ω–¥
   ‚Ä¢ BLIP2 –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ

üí¨ **–û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:** –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
   ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

‚ö° **–û–±—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª—è CPU"""
            
            else:
                return f"""–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å, {user_name}! ü§î

–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. 

**–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:**
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ (Python, –ò–ò, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ)
‚Ä¢ –¢–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ)
‚Ä¢ –û–±—â–∏–º–∏ –±–µ—Å–µ–¥–∞–º–∏

**–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ**, –∏ —è –¥–∞–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! üí°"""
        
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        else:
            responses = [
                f"–ü–æ–Ω—è–ª, {user_name}! üëç –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ - –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ!",
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, {user_name}! üòä –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –ª—é–±—ã–µ —Ç–µ–º—ã –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ.",
                f"–•–æ—Ä–æ—à–æ, {user_name}! üí≠ –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏?",
                f"–ü–æ–Ω–∏–º–∞—é, {user_name}! üåü –î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Ç–µ–º—É –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º —á—Ç–æ-—Ç–æ –∫—Ä–∞—Å–∏–≤–æ–µ!"
            ]
            return random.choice(responses)
    
    async def _generate_perfect_image(self, prompt: str, user_name: str):
        """–ò–¥–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if not self.image_pipeline:
                await self.send_message("‚ùå –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return
            
            logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {prompt}")
            
            # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            enhanced_prompt = self._enhance_prompt_perfectly(prompt)
            negative_prompt = "low quality, blurry, distorted, ugly, bad anatomy, deformed, extra limbs, bad hands, text, watermark, signature, username, error, cropped, worst quality, jpeg artifacts"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            await self.send_message(f"üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å!**\n\n‚öôÔ∏è Stable Diffusion —Ä–∞–±–æ—Ç–∞–µ—Ç...\nüéØ 50 —à–∞–≥–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n‚è≥ –ü—Ä–∏–º–µ—Ä–Ω–æ 2 –º–∏–Ω—É—Ç—ã\n\n*–°–æ–∑–¥–∞—é —à–µ–¥–µ–≤—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è {user_name}* ‚ú®")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            image = self.image_pipeline(
                prompt=enhanced_prompt,
                negative_prompt=negative_prompt,
                num_inference_steps=50,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                guidance_scale=12.0,     # –¢–æ—á–Ω–æ–µ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç—É
                height=512,
                width=512
            ).images[0]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            timestamp = datetime.now().timestamp()
            image_path = f"/workspace/data/perfect_{timestamp}.png"
            os.makedirs("/workspace/data", exist_ok=True)
            image.save(image_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self.send_photo(
                image_path, 
                f"üé® **–ì–æ—Ç–æ–≤–æ, {user_name}!**\n\n‚ú® '{prompt}'\nüéØ 50 —à–∞–≥–æ–≤ Stable Diffusion\nüíé –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.send_message(f"""üåü **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!**

–ö–∞–∫ –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, {user_name}? 

**–ú–æ–≥—É —Ç–∞–∫–∂–µ:**
‚Ä¢ üîÑ –°–æ–∑–¥–∞—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ üé® –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–æ–º —Å—Ç–∏–ª–µ
‚Ä¢ ‚¨ÜÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –¥–µ—Ç–∞–ª–∏
‚Ä¢ üÜï –°–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤–æ–µ

–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ! üöÄ""")
            
            self.stats["images_generated"] += 1
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {image_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            await self.send_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            self.stats["errors"] += 1
    
    def _enhance_prompt_perfectly(self, prompt: str) -> str:
        """–ò–¥–µ–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞"""
        enhanced = prompt
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        prompt_lower = prompt.lower()
        
        if any(word in prompt_lower for word in ['–ø–æ—Ä—Ç—Ä–µ—Ç', '–ª–∏—Ü–æ', '—á–µ–ª–æ–≤–µ–∫', '–¥–µ–≤—É—à–∫–∞', '–º—É–∂—á–∏–Ω–∞']):
            enhanced += ", portrait photography, professional studio lighting, high detail, 8k resolution, masterpiece"
        elif any(word in prompt_lower for word in ['–ø–µ–π–∑–∞–∂', '–ø—Ä–∏—Ä–æ–¥–∞', '–∑–∞–∫–∞—Ç', '–æ–∫–µ–∞–Ω', '–≥–æ—Ä—ã', '–ª–µ—Å']):
            enhanced += ", landscape photography, golden hour lighting, scenic view, high resolution, national geographic style"
        elif any(word in prompt_lower for word in ['–∫–æ—Å–º–æ—Å', '–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π', '–∑–≤–µ–∑–¥—ã', '–ø–ª–∞–Ω–µ—Ç–∞']):
            enhanced += ", space art, cosmic scene, detailed stars, nebula, sci-fi concept art, high quality"
        elif any(word in prompt_lower for word in ['–∂–∏–≤–æ—Ç–Ω–æ–µ', '–∫–æ—Ç', '—Å–æ–±–∞–∫–∞', '–ø—Ç–∏—Ü–∞']):
            enhanced += ", wildlife photography, natural pose, detailed fur/feathers, professional nature photography"
        elif any(word in prompt_lower for word in ['–¥–æ–º', '–∑–¥–∞–Ω–∏–µ', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞']):
            enhanced += ", architectural photography, detailed structure, professional composition, high quality"
        else:
            enhanced += ", high quality, detailed, masterpiece, professional, 8k resolution"
        
        return enhanced
    
    async def analyze_perfect_image(self, image_path: str, user_name: str) -> str:
        """–ò–¥–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if not self.vision_model:
                return f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, {user_name}, –º–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ù–æ —è –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –¥–ª—è –≤–∞—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! üé®"
            
            from PIL import Image
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(image_path).convert('RGB')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é BLIP2
            inputs = self.vision_processor(image, return_tensors="pt").to(self.device)
            
            with torch.no_grad():
                out = self.vision_model.generate(**inputs, max_length=50, num_beams=4)
            
            description = self.vision_processor.decode(out[0], skip_special_tokens=True)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —É—Å–ª–æ–≤–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            conditional_inputs = self.vision_processor(
                image, 
                text="This image shows", 
                return_tensors="pt"
            ).to(self.device)
            
            with torch.no_grad():
                conditional_out = self.vision_model.generate(**conditional_inputs, max_length=50)
            
            detailed_description = self.vision_processor.decode(conditional_out[0], skip_special_tokens=True)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            width, height = image.size
            
            self.stats["images_analyzed"] += 1
            
            return f"""üëÅÔ∏è **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {user_name}:**

**–û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:**
{description}

**–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:**
{detailed_description}

**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {width}x{height} –ø–∏–∫—Å–µ–ª–µ–π
‚Ä¢ –§–æ—Ä–º–∞—Ç: {image.format if hasattr(image, 'format') else 'Unknown'}
‚Ä¢ –¶–≤–µ—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å: {image.mode}

**–ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞:** BLIP2 (Salesforce)

ü§î –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–± —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?"""
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
    
    async def send_message(self, text, chat_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            target_chat_id = chat_id or self.chat_id
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/sendMessage"
                data = {"chat_id": target_chat_id, "text": text}
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get('ok'):
                            self.stats["messages_sent"] += 1
                            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
                            return True
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status}")
                    return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False
    
    async def send_photo(self, photo_path, caption="", chat_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ"""
        try:
            target_chat_id = chat_id or self.chat_id
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/sendPhoto"
                
                with open(photo_path, 'rb') as photo:
                    data = aiohttp.FormData()
                    data.add_field('chat_id', target_chat_id)
                    data.add_field('photo', photo, filename='perfect_art.png')
                    data.add_field('caption', caption)
                    
                    async with session.post(url, data=data) as response:
                        if response.status == 200:
                            result = await response.json()
                            if result.get('ok'):
                                logger.info(f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                                return True
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            return False
    
    async def download_photo(self, file_id, save_path):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                url = f"{self.api_url}/getFile"
                params = {"file_id": file_id}
                
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get('ok'):
                            file_path = result['result']['file_path']
                            
                            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                            download_url = f"https://api.telegram.org/file/bot{self.token}/{file_path}"
                            async with session.get(download_url) as file_response:
                                if file_response.status == 200:
                                    with open(save_path, 'wb') as f:
                                        f.write(await file_response.read())
                                    return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
            return False
    
    async def get_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=35)) as session:
                url = f"{self.api_url}/getUpdates"
                params = {
                    "offset": self.last_update_id + 1,
                    "timeout": 30,
                    "allowed_updates": ["message"]
                }
                
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('ok'):
                            return data.get('result', [])
                    else:
                        logger.error(f"‚ùå getUpdates error: {response.status}")
                        
        except asyncio.TimeoutError:
            logger.info("‚è∞ Timeout - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ getUpdates: {e}")
        
        return []
    
    async def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if 'text' in message:
                text = message['text']
                chat_id = message['chat']['id']
                user_id = str(message['from']['id'])
                user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                
                logger.info(f"üì® –ü–û–õ–£–ß–ï–ù–û –æ—Ç {user_name}: '{text}'")
                self.stats["messages_received"] += 1
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response = self.generate_perfect_response(text, user_name, user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                await self.send_message(response, chat_id)
                logger.info(f"‚úÖ –û–¢–í–ï–¢–ò–õ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")
            
            # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            elif 'photo' in message:
                await self.process_photo(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.stats["errors"] += 1
    
    async def process_photo(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        try:
            chat_id = message['chat']['id']
            user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            photos = message['photo']
            largest_photo = max(photos, key=lambda x: x.get('file_size', 0))
            file_id = largest_photo['file_id']
            
            logger.info(f"üì∑ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {user_name}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            photo_path = f"/workspace/data/temp_photo_{datetime.now().timestamp()}.jpg"
            
            await self.send_message(f"üëÅÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, {user_name}...", chat_id)
            
            if await self.download_photo(file_id, photo_path):
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
                analysis = await self.analyze_perfect_image(photo_path, user_name)
                await self.send_message(analysis, chat_id)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(photo_path):
                    os.remove(photo_path)
            else:
                await self.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", chat_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –∏–¥–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ó–ê–ü–£–°–ö PERFECT AGI SYSTEM v3.9")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
        if await self.initialize_perfect_models():
            logger.info("‚úÖ –í–°–ï –ú–û–î–ï–õ–ò –ì–û–¢–û–í–´")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ –≤—Å–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        await self.send_message("""üöÄ **PERFECT AGI v3.9 –ó–ê–ü–£–©–ï–ù!**

–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ò–î–ï–ê–õ–¨–ù–û–ú —Ä–µ–∂–∏–º–µ:

‚úÖ **Stable Diffusion v1.5** - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚úÖ **BLIP2** - –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π  
‚úÖ **–£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞** - –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
‚úÖ **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è** - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
‚úÖ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

**x100 –ª—É—á—à–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞!**

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ "–ù–∞—Ä–∏—Å—É–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å"
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å

–ì–æ—Ç–æ–≤ —É–¥–∏–≤–ª—è—Ç—å! üåü""")
        
        logger.info("üîÑ –ó–ê–ü–£–°–ö –û–°–ù–û–í–ù–û–ì–û –¶–ò–ö–õ–ê")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        update_counter = 0
        while True:
            try:
                updates = await self.get_updates()
                
                if updates:
                    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                
                for update in updates:
                    self.last_update_id = update['update_id']
                    update_counter += 1
                    
                    logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ update #{update_counter}: {self.last_update_id}")
                    
                    if 'message' in update:
                        await self.process_message(update['message'])
                
                # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
                await asyncio.sleep(0.5)
                
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                self.stats["errors"] += 1
                await asyncio.sleep(3)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    perfect_agi = PerfectAGI()
    await perfect_agi.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë Perfect AGI –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")