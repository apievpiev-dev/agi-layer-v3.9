#!/usr/bin/env python3
"""
Web Dashboard –¥–ª—è AGI Layer v3.9
Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import asyncio
import aiohttp
import psycopg2
from psycopg2.extras import RealDictCursor
import json
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∞–≥–µ–Ω—Ç–∞–º
sys.path.append(str(Path(__file__).parent.parent))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="AGI Layer v3.9 Dashboard",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
DB_CONFIG = {
    'host': os.getenv('POSTGRES_HOST', 'localhost'),
    'port': int(os.getenv('POSTGRES_PORT', 5432)),
    'database': os.getenv('POSTGRES_DB', 'agi_layer'),
    'user': os.getenv('POSTGRES_USER', 'agi_user'),
    'password': os.getenv('POSTGRES_PASSWORD', 'agi_password')
}

# –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(ttl=30)
def get_agent_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        cursor.execute("""
            SELECT agent_name, status, last_heartbeat, metrics
            FROM agent_status
            ORDER BY agent_name
        """)
        
        agents = cursor.fetchall()
        cursor.close()
        conn.close()
        
        return [dict(agent) for agent in agents]
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return []

@st.cache_data(ttl=60)
def get_task_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("""
            SELECT 
                status,
                COUNT(*) as count
            FROM tasks
            WHERE created_at >= NOW() - INTERVAL '24 hours'
            GROUP BY status
        """)
        status_stats = cursor.fetchall()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≥–µ–Ω—Ç–∞–º
        cursor.execute("""
            SELECT 
                agent_name,
                status,
                COUNT(*) as count
            FROM tasks
            WHERE created_at >= NOW() - INTERVAL '24 hours'
            GROUP BY agent_name, status
            ORDER BY agent_name
        """)
        agent_stats = cursor.fetchall()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        cursor.execute("""
            SELECT 
                DATE_TRUNC('hour', created_at) as hour,
                COUNT(*) as count
            FROM tasks
            WHERE created_at >= NOW() - INTERVAL '24 hours'
            GROUP BY hour
            ORDER BY hour
        """)
        time_stats = cursor.fetchall()
        
        cursor.close()
        conn.close()
        
        return {
            'status': [dict(row) for row in status_stats],
            'agents': [dict(row) for row in agent_stats],
            'time': [dict(row) for row in time_stats]
        }
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á: {e}")
        return {'status': [], 'agents': [], 'time': []}

@st.cache_data(ttl=30)
def get_recent_tasks(limit=50):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–¥–∞—á"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        cursor.execute("""
            SELECT 
                id, agent_name, task_type, status, 
                created_at, updated_at, data
            FROM tasks
            ORDER BY created_at DESC
            LIMIT %s
        """, (limit,))
        
        tasks = cursor.fetchall()
        cursor.close()
        conn.close()
        
        return [dict(task) for task in tasks]
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
        return []

@st.cache_data(ttl=60)
def get_system_logs(limit=100):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        cursor.execute("""
            SELECT 
                agent_name, level, message, created_at
            FROM agent_logs
            ORDER BY created_at DESC
            LIMIT %s
        """, (limit,))
        
        logs = cursor.fetchall()
        cursor.close()
        conn.close()
        
        return [dict(log) for log in logs]
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        return []

def send_task_to_agent(agent_name, task_type, data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É"""
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ MetaAgent
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        return {"status": "success", "message": f"–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≥–µ–Ω—Ç—É {agent_name}"}
    except Exception as e:
        return {"status": "error", "error": str(e)}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("ü§ñ AGI Layer v3.9 Dashboard")
    st.markdown("*–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π*")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
            st.cache_data.clear()
            st.rerun()
        
        st.divider()
        
        # –§–∏–ª—å—Ç—Ä—ã
        st.subheader("üìä –§–∏–ª—å—Ç—Ä—ã")
        
        time_range = st.selectbox(
            "–í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω",
            ["–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞", "–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è"],
            index=1
        )
        
        agent_filter = st.multiselect(
            "–ê–≥–µ–Ω—Ç—ã",
            ["meta_agent", "telegram_agent", "image_gen_agent", "vision_agent", 
             "memory_agent", "report_agent", "watchdog_agent", "recovery_agent"],
            default=[]
        )
        
        st.divider()
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        st.subheader("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        if st.button("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True):
            st.session_state.show_image_gen = True
        
        if st.button("üìä –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç", use_container_width=True):
            st.session_state.show_report_gen = True
        
        if st.button("üß† –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏", use_container_width=True):
            st.session_state.show_memory_search = True
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    
    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    st.header("üìà –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    
    agents_data = get_agent_status()
    
    if agents_data:
        # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
        col1, col2, col3, col4 = st.columns(4)
        
        active_agents = len([a for a in agents_data if a['status'] == 'running'])
        total_agents = len(agents_data)
        
        with col1:
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã", f"{active_agents}/{total_agents}")
        
        with col2:
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if agents_data:
                last_activity = max([a.get('last_heartbeat', datetime.min) for a in agents_data if a.get('last_heartbeat')])
                if isinstance(last_activity, str):
                    last_activity = datetime.fromisoformat(last_activity.replace('Z', '+00:00'))
                time_diff = datetime.now() - last_activity.replace(tzinfo=None)
                st.metric("–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", f"{int(time_diff.total_seconds())}—Å –Ω–∞–∑–∞–¥")
            else:
                st.metric("–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        with col3:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            task_stats = get_task_statistics()
            total_tasks = sum([s['count'] for s in task_stats['status']])
            st.metric("–ó–∞–¥–∞—á –∑–∞ 24—á", total_tasks)
        
        with col4:
            # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if task_stats['status']:
                completed = sum([s['count'] for s in task_stats['status'] if s['status'] == 'completed'])
                success_rate = (completed / total_tasks * 100) if total_tasks > 0 else 0
                st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", f"{success_rate:.1f}%")
            else:
                st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–≥–µ–Ω—Ç–æ–≤
        st.subheader("ü§ñ –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤")
        
        agents_df = pd.DataFrame(agents_data)
        if not agents_df.empty:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_df = agents_df.copy()
            display_df['status'] = display_df['status'].map({
                'running': 'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç',
                'stopped': 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
                'error': '‚ùå –û—à–∏–±–∫–∞',
                'starting': 'üü° –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è'
            })
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            if 'last_heartbeat' in display_df.columns:
                display_df['last_heartbeat'] = pd.to_datetime(display_df['last_heartbeat']).dt.strftime('%H:%M:%S')
            
            st.dataframe(
                display_df[['agent_name', 'status', 'last_heartbeat']],
                column_config={
                    "agent_name": "–ê–≥–µ–Ω—Ç",
                    "status": "–°—Ç–∞—Ç—É—Å",
                    "last_heartbeat": "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª"
                },
                use_container_width=True
            )
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–µ –∞–≥–µ–Ω—Ç–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
    st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á")
    
    task_stats = get_task_statistics()
    
    if task_stats['status']:
        col1, col2 = st.columns(2)
        
        with col1:
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
            status_df = pd.DataFrame(task_stats['status'])
            fig_pie = px.pie(
                status_df, 
                values='count', 
                names='status',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á (24—á)"
            )
            st.plotly_chart(fig_pie, use_container_width=True)
        
        with col2:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≥–µ–Ω—Ç–∞–º
            if task_stats['agents']:
                agents_df = pd.DataFrame(task_stats['agents'])
                agents_pivot = agents_df.pivot(index='agent_name', columns='status', values='count').fillna(0)
                
                fig_bar = px.bar(
                    agents_pivot.reset_index(),
                    x='agent_name',
                    y=agents_pivot.columns.tolist(),
                    title="–ó–∞–¥–∞—á–∏ –ø–æ –∞–≥–µ–Ω—Ç–∞–º (24—á)"
                )
                fig_bar.update_xaxis(tickangle=45)
                st.plotly_chart(fig_bar, use_container_width=True)
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
        if task_stats['time']:
            time_df = pd.DataFrame(task_stats['time'])
            time_df['hour'] = pd.to_datetime(time_df['hour'])
            
            fig_line = px.line(
                time_df,
                x='hour',
                y='count',
                title="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º (24—á)",
                markers=True
            )
            st.plotly_chart(fig_line, use_container_width=True)
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏
    st.header("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    
    recent_tasks = get_recent_tasks(20)
    
    if recent_tasks:
        tasks_df = pd.DataFrame(recent_tasks)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_tasks = tasks_df.copy()
        display_tasks['created_at'] = pd.to_datetime(display_tasks['created_at']).dt.strftime('%H:%M:%S')
        display_tasks['status'] = display_tasks['status'].map({
            'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
            'processing': '‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è', 
            'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
            'failed': '‚ùå –û—à–∏–±–∫–∞'
        })
        
        st.dataframe(
            display_tasks[['created_at', 'agent_name', 'task_type', 'status']],
            column_config={
                "created_at": "–í—Ä–µ–º—è",
                "agent_name": "–ê–≥–µ–Ω—Ç",
                "task_type": "–¢–∏–ø",
                "status": "–°—Ç–∞—Ç—É—Å"
            },
            use_container_width=True
        )
        
        # –î–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á"):
            selected_task = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É",
                options=range(len(recent_tasks)),
                format_func=lambda x: f"{recent_tasks[x]['task_type']} ({recent_tasks[x]['created_at']})"
            )
            
            if selected_task is not None:
                task = recent_tasks[selected_task]
                st.json(task)
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏
    st.header("üìù –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏")
    
    logs = get_system_logs(50)
    
    if logs:
        logs_df = pd.DataFrame(logs)
        logs_df['created_at'] = pd.to_datetime(logs_df['created_at']).dt.strftime('%H:%M:%S')
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é
        level_filter = st.multiselect(
            "–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤",
            ["INFO", "WARNING", "ERROR", "DEBUG"],
            default=["INFO", "WARNING", "ERROR"]
        )
        
        if level_filter:
            filtered_logs = logs_df[logs_df['level'].isin(level_filter)]
        else:
            filtered_logs = logs_df
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
        def color_level(level):
            colors = {
                'INFO': 'üîµ',
                'WARNING': 'üü°', 
                'ERROR': 'üî¥',
                'DEBUG': '‚ö™'
            }
            return colors.get(level, '‚ö™')
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–≥–∏
        for _, log in filtered_logs.head(20).iterrows():
            level_icon = color_level(log['level'])
            st.text(f"{level_icon} {log['created_at']} [{log['agent_name']}] {log['message']}")
    
    # –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if st.session_state.get('show_image_gen', False):
        with st.expander("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", expanded=True):
            prompt = st.text_input("–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"):
                    if prompt:
                        result = send_task_to_agent("image_gen_agent", "generate_image", {"prompt": prompt})
                        if result['status'] == 'success':
                            st.success("–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é!")
                        else:
                            st.error(f"–û—à–∏–±–∫–∞: {result.get('error')}")
                    else:
                        st.warning("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
            with col2:
                if st.button("–ó–∞–∫—Ä—ã—Ç—å"):
                    st.session_state.show_image_gen = False
                    st.rerun()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    if st.session_state.get('show_report_gen', False):
        with st.expander("üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞", expanded=True):
            report_type = st.selectbox("–¢–∏–ø –æ—Ç—á–µ—Ç–∞", ["system_status", "task_analysis", "agent_performance"])
            
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç"):
                    result = send_task_to_agent("report_agent", "generate_report", {"report_type": report_type})
                    if result['status'] == 'success':
                        st.success("–ó–∞–¥–∞—á–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                    else:
                        st.error(f"–û—à–∏–±–∫–∞: {result.get('error')}")
            
            with col2:
                if st.button("–ó–∞–∫—Ä—ã—Ç—å "):
                    st.session_state.show_report_gen = False
                    st.rerun()
    
    # –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏
    if st.session_state.get('show_memory_search', False):
        with st.expander("üß† –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏", expanded=True):
            search_query = st.text_input("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("–ù–∞–π—Ç–∏"):
                    if search_query:
                        result = send_task_to_agent("memory_agent", "memory_search", {"query": search_query})
                        if result['status'] == 'success':
                            st.success("–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
                        else:
                            st.error(f"–û—à–∏–±–∫–∞: {result.get('error')}")
                    else:
                        st.warning("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            
            with col2:
                if st.button("–ó–∞–∫—Ä—ã—Ç—å  "):
                    st.session_state.show_memory_search = False
                    st.rerun()
    
    # –§—É—Ç–µ—Ä
    st.divider()
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.caption("ü§ñ AGI Layer v3.9")
    
    with col2:
        st.caption(f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")
    
    with col3:
        if st.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"):
            st.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
if 'last_update' not in st.session_state:
    st.session_state.last_update = datetime.now()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å
if (datetime.now() - st.session_state.last_update).seconds > 30:
    st.session_state.last_update = datetime.now()
    st.rerun()

if __name__ == "__main__":
    main()