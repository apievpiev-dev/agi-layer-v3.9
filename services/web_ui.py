"""
Web UI - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AGI Layer v3.9
"""

import asyncio
import logging
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from datetime import datetime, timedelta
import asyncpg
import aiohttp
from typing import Dict, Any, List
import json


class WebUI:
    """Web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.logger = logging.getLogger(__name__)
        self.db_pool = None
        self.http_session = None
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web UI"""
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db_pool = await asyncpg.create_pool(
            host=self.config['postgres']['host'],
            port=self.config['postgres']['port'],
            database=self.config['postgres']['database'],
            user=self.config['postgres']['user'],
            password=self.config['postgres']['password']
        )
        
        # HTTP —Å–µ—Å—Å–∏—è –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
        self.http_session = aiohttp.ClientSession()
        
    async def run(self):
        """–ó–∞–ø—É—Å–∫ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        st.set_page_config(
            page_title="AGI Layer v3.9",
            page_icon="ü§ñ",
            layout="wide",
            initial_sidebar_state="expanded"
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        st.title("ü§ñ AGI Layer v3.9 - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        st.markdown("---")
        
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
        await self._render_sidebar()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        page = st.session_state.get('page', 'dashboard')
        
        if page == 'dashboard':
            await self._render_dashboard()
        elif page == 'agents':
            await self._render_agents_page()
        elif page == 'tasks':
            await self._render_tasks_page()
        elif page == 'images':
            await self._render_images_page()
        elif page == 'logs':
            await self._render_logs_page()
        elif page == 'settings':
            await self._render_settings_page()
    
    async def _render_sidebar(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        with st.sidebar:
            st.header("üìä –ù–∞–≤–∏–≥–∞—Ü–∏—è")
            
            if st.button("üìà –î–∞—à–±–æ—Ä–¥", use_container_width=True):
                st.session_state.page = 'dashboard'
            
            if st.button("ü§ñ –ê–≥–µ–Ω—Ç—ã", use_container_width=True):
                st.session_state.page = 'agents'
            
            if st.button("üìã –ó–∞–¥–∞—á–∏", use_container_width=True):
                st.session_state.page = 'tasks'
            
            if st.button("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", use_container_width=True):
                st.session_state.page = 'images'
            
            if st.button("üìù –õ–æ–≥–∏", use_container_width=True):
                st.session_state.page = 'logs'
            
            if st.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True):
                st.session_state.page = 'settings'
            
            st.markdown("---")
            
            # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            await self._render_system_status()
    
    async def _render_system_status(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        st.header("üîç –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        
        try:
            async with self.db_pool.acquire() as conn:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
                agents_stats = await conn.fetch(
                    "SELECT name, status, tasks_completed, errors_count FROM agents"
                )
                
                total_tasks = sum(row['tasks_completed'] for row in agents_stats)
                total_errors = sum(row['errors_count'] for row in agents_stats)
                running_agents = len([row for row in agents_stats if row['status'] == 'running'])
                
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("–ê–≥–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ", running_agents)
                    st.metric("–í—Å–µ–≥–æ –∑–∞–¥–∞—á", total_tasks)
                
                with col2:
                    st.metric("–û—à–∏–±–æ–∫", total_errors)
                    st.metric("–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤", len(agents_stats))
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def _render_dashboard(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
        st.header("üìà –î–∞—à–±–æ—Ä–¥ —Å–∏—Å—Ç–µ–º—ã")
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        col1, col2, col3, col4 = st.columns(4)
        
        try:
            async with self.db_pool.acquire() as conn:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                agents_count = await conn.fetchval("SELECT COUNT(*) FROM agents")
                running_count = await conn.fetchval("SELECT COUNT(*) FROM agents WHERE status = 'running'")
                pending_tasks = await conn.fetchval("SELECT COUNT(*) FROM tasks WHERE status = 'pending'")
                completed_tasks = await conn.fetchval("SELECT COUNT(*) FROM tasks WHERE status = 'completed'")
                
                with col1:
                    st.metric("–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤", agents_count)
                
                with col2:
                    st.metric("–ó–∞–ø—É—â–µ–Ω–æ", running_count)
                
                with col3:
                    st.metric("–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏", pending_tasks)
                
                with col4:
                    st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–æ", completed_tasks)
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        
        st.markdown("---")
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        col1, col2 = st.columns(2)
        
        with col1:
            await self._render_tasks_chart()
        
        with col2:
            await self._render_agents_chart()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏
        st.subheader("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        await self._render_recent_tasks()
    
    async def _render_tasks_chart(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–¥–∞—á"""
        try:
            async with self.db_pool.acquire() as conn:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                rows = await conn.fetch(
                    """
                    SELECT 
                        DATE_TRUNC('hour', created_at) as hour,
                        status,
                        COUNT(*) as count
                    FROM tasks 
                    WHERE created_at > NOW() - INTERVAL '24 hours'
                    GROUP BY hour, status
                    ORDER BY hour
                    """
                )
                
                if rows:
                    df = pd.DataFrame([dict(row) for row in rows])
                    
                    fig = px.bar(
                        df, 
                        x='hour', 
                        y='count', 
                        color='status',
                        title="–ó–∞–¥–∞—á–∏ –ø–æ —á–∞—Å–∞–º (24—á)",
                        color_discrete_map={
                            'pending': '#FFA500',
                            'processing': '#1f77b4',
                            'completed': '#2ca02c',
                            'failed': '#d62728'
                        }
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–∞—Ö")
                    
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–¥–∞—á: {e}")
    
    async def _render_agents_chart(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            async with self.db_pool.acquire() as conn:
                rows = await conn.fetch(
                    "SELECT name, status, tasks_completed, errors_count FROM agents"
                )
                
                if rows:
                    df = pd.DataFrame([dict(row) for row in rows])
                    
                    fig = go.Figure()
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                    fig.add_trace(go.Bar(
                        name='–ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã',
                        x=df['name'],
                        y=df['tasks_completed'],
                        marker_color='lightblue'
                    ))
                    
                    # –ì—Ä–∞—Ñ–∏–∫ –æ—à–∏–±–æ–∫
                    fig.add_trace(go.Bar(
                        name='–û—à–∏–±–∫–∏',
                        x=df['name'],
                        y=df['errors_count'],
                        marker_color='lightcoral'
                    ))
                    
                    fig.update_layout(
                        title="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤",
                        xaxis_title="–ê–≥–µ–Ω—Ç—ã",
                        yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                        barmode='group'
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≥–µ–Ω—Ç–∞—Ö")
                    
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
    
    async def _render_recent_tasks(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–¥–∞—á"""
        try:
            async with self.db_pool.acquire() as conn:
                rows = await conn.fetch(
                    """
                    SELECT id, agent_name, task_type, status, created_at, updated_at
                    FROM tasks 
                    ORDER BY created_at DESC 
                    LIMIT 10
                    """
                )
                
                if rows:
                    df = pd.DataFrame([dict(row) for row in rows])
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                    df['created_at'] = pd.to_datetime(df['created_at']).dt.strftime('%H:%M:%S')
                    df['updated_at'] = pd.to_datetime(df['updated_at']).dt.strftime('%H:%M:%S')
                    
                    st.dataframe(
                        df,
                        use_container_width=True,
                        column_config={
                            "id": "ID",
                            "agent_name": "–ê–≥–µ–Ω—Ç",
                            "task_type": "–¢–∏–ø",
                            "status": "–°—Ç–∞—Ç—É—Å",
                            "created_at": "–°–æ–∑–¥–∞–Ω–æ",
                            "updated_at": "–û–±–Ω–æ–≤–ª–µ–Ω–æ"
                        }
                    )
                else:
                    st.info("–ù–µ—Ç –∑–∞–¥–∞—á")
                    
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
    
    async def _render_agents_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≥–µ–Ω—Ç–æ–≤"""
        st.header("ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏")
        
        try:
            async with self.db_pool.acquire() as conn:
                rows = await conn.fetch(
                    """
                    SELECT name, status, last_activity, memory_usage, cpu_usage, 
                           tasks_completed, errors_count, created_at
                    FROM agents 
                    ORDER BY name
                    """
                )
                
                if rows:
                    for row in rows:
                        with st.expander(f"{row['name']} - {row['status']}"):
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                st.metric("–°—Ç–∞—Ç—É—Å", row['status'])
                                st.metric("–ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", row['tasks_completed'])
                            
                            with col2:
                                st.metric("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏", f"{row['memory_usage']:.1f} MB")
                                st.metric("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU", f"{row['cpu_usage']:.1f}%")
                            
                            with col3:
                                st.metric("–û—à–∏–±–æ–∫", row['errors_count'])
                                st.metric("–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", 
                                         row['last_activity'].strftime('%H:%M:%S') if row['last_activity'] else 'N/A')
                            
                            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                if st.button(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å {row['name']}", key=f"restart_{row['name']}"):
                                    await self._restart_agent(row['name'])
                            
                            with col2:
                                if st.button(f"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {row['name']}", key=f"stop_{row['name']}"):
                                    await self._stop_agent(row['name'])
                            
                            with col3:
                                if st.button(f"–õ–æ–≥–∏ {row['name']}", key=f"logs_{row['name']}"):
                                    st.session_state.agent_logs = row['name']
                                    st.session_state.page = 'logs'
                else:
                    st.info("–ù–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤")
                    
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤: {e}")
    
    async def _render_tasks_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞—á"""
        st.header("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏")
        
        # –§–∏–ª—å—Ç—Ä—ã
        col1, col2, col3 = st.columns(3)
        
        with col1:
            status_filter = st.selectbox("–°—Ç–∞—Ç—É—Å", ["–í—Å–µ", "pending", "processing", "completed", "failed"])
        
        with col2:
            agent_filter = st.selectbox("–ê–≥–µ–Ω—Ç", ["–í—Å–µ"] + await self._get_agent_names())
        
        with col3:
            limit = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=10, max_value=1000, value=50)
        
        try:
            async with self.db_pool.acquire() as conn:
                # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
                query = "SELECT * FROM tasks WHERE 1=1"
                params = []
                
                if status_filter != "–í—Å–µ":
                    query += " AND status = $" + str(len(params) + 1)
                    params.append(status_filter)
                
                if agent_filter != "–í—Å–µ":
                    query += " AND agent_name = $" + str(len(params) + 1)
                    params.append(agent_filter)
                
                query += " ORDER BY created_at DESC LIMIT $" + str(len(params) + 1)
                params.append(limit)
                
                rows = await conn.fetch(query, *params)
                
                if rows:
                    df = pd.DataFrame([dict(row) for row in rows])
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    df['created_at'] = pd.to_datetime(df['created_at']).dt.strftime('%Y-%m-%d %H:%M:%S')
                    df['updated_at'] = pd.to_datetime(df['updated_at']).dt.strftime('%Y-%m-%d %H:%M:%S')
                    
                    st.dataframe(
                        df,
                        use_container_width=True,
                        column_config={
                            "id": "ID",
                            "agent_name": "–ê–≥–µ–Ω—Ç",
                            "task_type": "–¢–∏–ø",
                            "status": "–°—Ç–∞—Ç—É—Å",
                            "priority": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
                            "created_at": "–°–æ–∑–¥–∞–Ω–æ",
                            "updated_at": "–û–±–Ω–æ–≤–ª–µ–Ω–æ"
                        }
                    )
                else:
                    st.info("–ù–µ—Ç –∑–∞–¥–∞—á —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
                    
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
    
    async def _render_images_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        st.header("üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        try:
            async with self.db_pool.acquire() as conn:
                rows = await conn.fetch(
                    """
                    SELECT task_id, agent_name, prompt, image_path, created_at
                    FROM generated_images 
                    ORDER BY created_at DESC 
                    LIMIT 20
                    """
                )
                
                if rows:
                    for row in rows:
                        with st.expander(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {row['task_id'][:8]}..."):
                            col1, col2 = st.columns([2, 1])
                            
                            with col1:
                                if os.path.exists(row['image_path']):
                                    st.image(row['image_path'], caption=row['prompt'])
                                else:
                                    st.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {row['image_path']}")
                            
                            with col2:
                                st.write(f"**–ê–≥–µ–Ω—Ç:** {row['agent_name']}")
                                st.write(f"**–ü—Ä–æ–º–ø—Ç:** {row['prompt']}")
                                st.write(f"**–°–æ–∑–¥–∞–Ω–æ:** {row['created_at'].strftime('%Y-%m-%d %H:%M:%S')}")
                                st.write(f"**–ü—É—Ç—å:** {row['image_path']}")
                else:
                    st.info("–ù–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                    
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
    
    async def _render_logs_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–æ–≤"""
        st.header("üìù –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã")
        
        # –§–∏–ª—å—Ç—Ä—ã
        col1, col2, col3 = st.columns(3)
        
        with col1:
            agent_filter = st.selectbox("–ê–≥–µ–Ω—Ç", ["–í—Å–µ"] + await self._get_agent_names())
        
        with col2:
            level_filter = st.selectbox("–£—Ä–æ–≤–µ–Ω—å", ["–í—Å–µ", "INFO", "WARNING", "ERROR"])
        
        with col3:
            hours = st.number_input("–ß–∞—Å–æ–≤ –Ω–∞–∑–∞–¥", min_value=1, max_value=24, value=6)
        
        try:
            async with self.db_pool.acquire() as conn:
                # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
                query = "SELECT * FROM agent_logs WHERE timestamp > $" + str(1)
                params = [datetime.now() - timedelta(hours=hours)]
                
                if agent_filter != "–í—Å–µ":
                    query += " AND agent_name = $" + str(len(params) + 1)
                    params.append(agent_filter)
                
                if level_filter != "–í—Å–µ":
                    query += " AND level = $" + str(len(params) + 1)
                    params.append(level_filter)
                
                query += " ORDER BY timestamp DESC LIMIT 100"
                
                rows = await conn.fetch(query, *params)
                
                if rows:
                    for row in rows:
                        timestamp = row['timestamp'].strftime('%H:%M:%S')
                        level = row['level']
                        agent = row['agent_name']
                        message = row['message']
                        
                        # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
                        if level == 'ERROR':
                            st.error(f"**{timestamp}** [{agent}] {message}")
                        elif level == 'WARNING':
                            st.warning(f"**{timestamp}** [{agent}] {message}")
                        else:
                            st.info(f"**{timestamp}** [{agent}] {message}")
                else:
                    st.info("–ù–µ—Ç –ª–æ–≥–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
                    
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
    
    async def _render_settings_page(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            log_level = st.selectbox("–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", ["INFO", "DEBUG", "WARNING", "ERROR"])
            agent_timeout = st.number_input("–¢–∞–π–º–∞—É—Ç –∞–≥–µ–Ω—Ç–∞ (—Å–µ–∫)", min_value=60, max_value=3600, value=300)
        
        with col2:
            max_tasks = st.number_input("–ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á", min_value=1, max_value=100, value=10)
            recovery_interval = st.number_input("–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫)", min_value=60, max_value=3600, value=300)
        
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        # –î–µ–π—Å—Ç–≤–∏—è —Å–∏—Å—Ç–µ–º—ã
        st.subheader("–î–µ–π—Å—Ç–≤–∏—è —Å–∏—Å—Ç–µ–º—ã")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∞–≥–µ–Ω—Ç—ã", use_container_width=True):
                await self._restart_all_agents()
        
        with col2:
            if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", use_container_width=True):
                await self._clear_logs()
        
        with col3:
            if st.button("üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", use_container_width=True):
                await self._create_backup()
    
    async def _get_agent_names(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–º–µ–Ω –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            async with self.db_pool.acquire() as conn:
                rows = await conn.fetch("SELECT DISTINCT name FROM agents ORDER BY name")
                return [row['name'] for row in rows]
        except:
            return []
    
    async def _restart_agent(self, agent_name: str):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞"""
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ MetaAgent API
            url = f"http://meta_agent:8000/restart_agent"
            data = {"agent_name": agent_name}
            
            async with self.http_session.post(url, json=data) as response:
                if response.status == 200:
                    st.success(f"–ê–≥–µ–Ω—Ç {agent_name} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
                else:
                    st.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ {agent_name}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")
    
    async def _stop_agent(self, agent_name: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞"""
        st.info(f"–§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≥–µ–Ω—Ç–∞ {agent_name} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    async def _restart_all_agents(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        st.info("–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    async def _clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        try:
            async with self.db_pool.acquire() as conn:
                await conn.execute("DELETE FROM agent_logs WHERE timestamp < NOW() - INTERVAL '7 days'")
                st.success("–°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")
    
    async def _create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        st.info("–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Web UI"""
    from config.settings import settings
    
    config = {
        'postgres': {
            'host': settings.POSTGRES_HOST,
            'port': settings.POSTGRES_PORT,
            'database': settings.POSTGRES_DB,
            'user': settings.POSTGRES_USER,
            'password': settings.POSTGRES_PASSWORD
        }
    }
    
    web_ui = WebUI(config)
    await web_ui.initialize()
    await web_ui.run()


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())

