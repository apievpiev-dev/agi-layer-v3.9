#!/bin/bash
set -e

echo "üöÄ AGI Layer v3.9 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
echo "============================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ root –ø—Ä–∞–≤
if [[ $EUID -ne 0 ]]; then
   log_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root"
   exit 1
fi

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd /root/agi-layer-v3.9

log_step "1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
apt-get update -y
apt-get upgrade -y
apt-get install -y \
    curl \
    wget \
    git \
    build-essential \
    python3-dev \
    python3-pip \
    python3-venv \
    docker.io \
    docker-compose \
    postgresql-client \
    redis-tools \
    htop \
    nginx \
    ufw \
    fail2ban

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker
log_step "2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker"
systemctl start docker
systemctl enable docker
usermod -aG docker root

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UFW (—Ñ–∞–π—Ä–≤–æ–ª)
log_step "3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
ufw --force reset
ufw default deny incoming
ufw default allow outgoing
ufw allow 22/tcp    # SSH
ufw allow 8080/tcp  # API
ufw allow 8501/tcp  # Web UI
ufw --force enable

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama
log_step "4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Ollama"
if ! command -v ollama &> /dev/null; then
    curl -fsSL https://ollama.ai/install.sh | sh
    log_info "Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    log_info "Ollama —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è Python
log_step "5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è"
python3 -m venv /root/agi-venv
source /root/agi-venv/bin/activate

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
pip install --upgrade pip setuptools wheel

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
log_step "6. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
pip install -r requirements.txt

log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è CPU –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
log_step "7. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ CPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
pip install intel-extension-for-pytorch

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
log_step "8. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
mkdir -p /var/log/agi-layer
mkdir -p /var/lib/agi-layer
mkdir -p /etc/agi-layer

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
cp .env /etc/agi-layer/
chmod 600 /etc/agi-layer/.env

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–æ–≤
log_step "9. –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–æ–≤"

# –°–µ—Ä–≤–∏—Å –¥–ª—è Docker Compose
cat > /etc/systemd/system/agi-layer.service << EOF
[Unit]
Description=AGI Layer v3.9
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=/root/agi-layer-v3.9
ExecStart=/usr/bin/docker-compose up -d
ExecStop=/usr/bin/docker-compose down
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
EOF

# –°–µ—Ä–≤–∏—Å –¥–ª—è Ollama
cat > /etc/systemd/system/ollama.service << EOF
[Unit]
Description=Ollama Service
After=network-online.target

[Service]
ExecStart=/usr/local/bin/ollama serve
User=root
Group=root
Restart=always
RestartSec=3
Environment="OLLAMA_HOST=0.0.0.0"

[Install]
WantedBy=default.target
EOF

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ systemd –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
systemctl daemon-reload
systemctl enable agi-layer.service
systemctl enable ollama.service

log_step "10. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π"
source /root/agi-venv/bin/activate
python scripts/download_models.py

log_step "11. –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"
# –ó–∞–ø—É—Å–∫–∞–µ–º Ollama
systemctl start ollama
sleep 10

# –ó–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
docker-compose up -d

log_step "12. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
sleep 30

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
log_info "–°—Ç–∞—Ç—É—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker-compose ps

log_info "–°—Ç–∞—Ç—É—Å systemd —Å–µ—Ä–≤–∏—Å–æ–≤:"
systemctl status agi-layer --no-pager
systemctl status ollama --no-pager

log_step "13. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"
# –î–æ–±–∞–≤–ª—è–µ–º –≤ crontab –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
(crontab -l 2>/dev/null; echo "*/5 * * * * /usr/bin/docker-compose -f /root/agi-layer-v3.9/docker-compose.yml ps | grep -q 'Up' || /usr/bin/docker-compose -f /root/agi-layer-v3.9/docker-compose.yml up -d") | crontab -

echo ""
echo "üéâ AGI Layer v3.9 —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
echo "======================================"
echo ""
echo "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:"
echo "   ‚Ä¢ Web UI: http://$(hostname -I | awk '{print $1}'):8501"
echo "   ‚Ä¢ API: http://$(hostname -I | awk '{print $1}'):8080"
echo "   ‚Ä¢ Telegram Bot: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ TELEGRAM_TOKEN –≤ .env"
echo ""
echo "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
echo "   ‚Ä¢ –°—Ç–∞—Ç—É—Å: docker-compose ps"
echo "   ‚Ä¢ –õ–æ–≥–∏: docker-compose logs -f"
echo "   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose restart"
echo "   ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose down"
echo ""
echo "üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: /etc/agi-layer/.env"
echo "üìù –õ–æ–≥–∏: /var/log/agi-layer/"
echo ""
log_info "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! ü§ñ"







