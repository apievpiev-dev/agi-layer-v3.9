#!/usr/bin/env python3
"""
–£–º–Ω—ã–π Telegram –±–æ—Ç AGI Layer v3.9 —Å –Ω–∞—Å—Ç–æ—è—â–∏–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª–µ–µ –º–æ—â–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
"""

import asyncio
import logging
import aiohttp
import os
import sys
import torch
import re
import json
import random
from datetime import datetime
from typing import Dict, Any, Optional, List
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∞–≥–µ–Ω—Ç–∞–º
sys.path.append(str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
from dotenv import load_dotenv
load_dotenv()

TOKEN = os.getenv('TELEGRAM_TOKEN', '8325306099:AAG6hk3tG2-XmiJPgegzYFzQcY6WJaEbRxw')
CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '458589236')
API_URL = f"https://api.telegram.org/bot{TOKEN}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('smart_agi.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class SmartAGI:
    """–£–º–Ω–∞—è AGI —Å–∏—Å—Ç–µ–º–∞ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º"""
    
    def __init__(self):
        self.token = TOKEN
        self.chat_id = CHAT_ID
        self.api_url = API_URL
        self.last_update_id = 0
        
        # –ò–ò –º–æ–¥–µ–ª–∏
        self.text_model = None
        self.text_tokenizer = None
        self.image_pipeline = None
        self.vision_model = None
        self.vision_processor = None
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.device = "cuda" if torch.cuda.is_available() else "cpu"
        self.models_ready = False
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.conversation_contexts = {}
        
        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        self.knowledge_base = self._load_knowledge_base()
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SmartAGI –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {self.device}")
        
    def _load_knowledge_base(self) -> Dict[str, List[str]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        return {
            "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ": [
                "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ - –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.",
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å. –Ø –º–æ–≥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –æ–±—â–∞—Ç—å—Å—è.",
                "–ü—Ä–∏–≤–µ—Ç! –Ø –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ AGI Layer v3.9. –£–º–µ—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏, –ø–æ–Ω–∏–º–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —É–º–Ω—ã–µ –±–µ—Å–µ–¥—ã."
            ],
            "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏": [
                "–Ø —É–º–µ—é –º–Ω–æ–≥–æ–µ! –ú–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≤–µ—Å—Ç–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–µ—Å–µ–¥—ã.",
                "–ú–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Stable Diffusion, –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ.",
                "–Ø - –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò. –°–æ–∑–¥–∞—é –∫–∞—Ä—Ç–∏–Ω–∫–∏, –ø–æ–Ω–∏–º–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∂–∏–≤—ã–µ –±–µ—Å–µ–¥—ã."
            ],
            "python": [
                "Python - —ç—Ç–æ –º–æ—â–Ω—ã–π, —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–µ–π –ø—Ä–æ—Å—Ç–æ—Ç–æ–π –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å—é. –û–Ω —à–∏—Ä–æ–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö, –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.",
                "Python —Å–æ–∑–¥–∞–Ω –ì–≤–∏–¥–æ –≤–∞–Ω –†–æ—Å—Å—É–º–æ–º –≤ 1991 –≥–æ–¥—É. –≠—Ç–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–π —è–∑—ã–∫ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∫ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö, —Ç–∞–∫ –∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤.",
                "Python - —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π '–ø—Ä–æ—Å—Ç–æ—Ç–∞ –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞'. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ò–ò, –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–∞—É–∫–µ –æ –¥–∞–Ω–Ω—ã—Ö –∏ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö."
            ],
            "–∏–∏": [
                "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç - —ç—Ç–æ –æ–±–ª–∞—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫, —Å–æ–∑–¥–∞—é—â–∞—è —Å–∏—Å—Ç–µ–º—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏, –æ–±—ã—á–Ω–æ —Ç—Ä–µ–±—É—é—â–∏–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞: –æ–±—É—á–µ–Ω–∏–µ, —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤, –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π.",
                "–ò–ò —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—Ö–æ–¥—è—Ç –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –∏ —É—á–∞—Ç—Å—è –¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.",
                "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ò–ò –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö - –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª—è—Ö, –∏–º–∏—Ç–∏—Ä—É—é—â–∏—Ö —Ä–∞–±–æ—Ç—É —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –º–æ–∑–≥–∞. –û–Ω–∏ –æ–±—É—á–∞—é—Ç—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–≥—É—Ç —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏."
            ],
            "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏": [
                "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ - —ç—Ç–æ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏, –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –º–æ–∑–≥–∞. –û–Ω–∏ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤ (–Ω–µ–π—Ä–æ–Ω–æ–≤), –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∏ –ø–µ—Ä–µ–¥–∞—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
                "–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –æ–±—É—á–∞—é—Ç—Å—è –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É –Ω–µ–π—Ä–æ–Ω–∞–º–∏. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.",
                "–ì–ª—É–±–æ–∫–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ –∏–º–µ—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–º –∏–∑—É—á–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –¥–∞–Ω–Ω—ã—Ö. –û–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–º –∑—Ä–µ–Ω–∏–∏, –æ–±—Ä–∞–±–æ—Ç–∫–µ —è–∑—ã–∫–∞ –∏ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö."
            ],
            "–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å": [
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!",
                "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –≠—Ç–æ –º–æ—è —Ä–∞–±–æ—Ç–∞ –∏ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ - –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º. –ß—Ç–æ-—Ç–æ –µ—â–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                "–ù–µ –∑–∞ —á—Ç–æ! –Ø –∑–¥–µ—Å—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º. –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —á—Ç–æ-—Ç–æ –µ—â–µ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ!"
            ]
        }
    
    async def initialize_ai_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ò–ò –º–æ–¥–µ–ª–µ–π"""
        try:
            logger.info("üß† –ó–∞–≥—Ä—É–∑–∫–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ò–ò –º–æ–¥–µ–ª–µ–π...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª–µ–µ –º–æ—â–Ω—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å
            await self._load_improved_text_model()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            await self._load_image_model()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            await self._load_vision_model()
            
            self.models_ready = True
            logger.info("‚úÖ –í—Å–µ —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ò–ò –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            return False
    
    async def _load_improved_text_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º–æ—â–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –ª—É—á—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
            model_name = "microsoft/DialoGPT-medium"  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏
            
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏: {model_name}")
            
            self.text_tokenizer = AutoTokenizer.from_pretrained(model_name)
            self.text_model = AutoModelForCausalLM.from_pretrained(
                model_name,
                torch_dtype=torch.float32,
                device_map="cpu" if self.device == "cpu" else "auto",
                pad_token_id=50256  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pad_token
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pad_token –≤ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–µ
            if self.text_tokenizer.pad_token is None:
                self.text_tokenizer.pad_token = self.text_tokenizer.eos_token
                
            logger.info("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏: {e}")
            # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å
            self.text_model = "fallback"
    
    async def _load_image_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            from diffusers import StableDiffusionPipeline
            
            model_name = "runwayml/stable-diffusion-v1-5"
            
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {model_name}")
            
            self.image_pipeline = StableDiffusionPipeline.from_pretrained(
                model_name,
                torch_dtype=torch.float32 if self.device == "cpu" else torch.float16,
                safety_checker=None,
                requires_safety_checker=False
            )
            
            if self.device == "cpu":
                self.image_pipeline.enable_attention_slicing()
            else:
                self.image_pipeline = self.image_pipeline.to(self.device)
                
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            self.image_pipeline = "fallback"
    
    async def _load_vision_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            from transformers import BlipProcessor, BlipForConditionalGeneration
            
            model_name = "Salesforce/blip-image-captioning-base"
            
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {model_name}")
            
            self.vision_processor = BlipProcessor.from_pretrained(model_name)
            self.vision_model = BlipForConditionalGeneration.from_pretrained(
                model_name,
                torch_dtype=torch.float32
            ).to(self.device)
            
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            self.vision_model = "fallback"
    
    async def generate_smart_response(self, user_message: str, user_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context = self._get_user_context(user_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            message_type = self._classify_message(user_message)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if message_type == "image_generation":
                return await self._handle_smart_image_generation(user_message)
            elif message_type == "question":
                return await self._handle_smart_question(user_message, context)
            elif message_type == "greeting":
                return self._handle_smart_greeting(user_message, context)
            elif message_type == "gratitude":
                return self._handle_gratitude(user_message)
            else:
                return await self._handle_smart_conversation(user_message, context)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
    
    def _get_user_context(self, user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.conversation_contexts:
            self.conversation_contexts[user_id] = {
                "messages": [],
                "preferences": {},
                "topics": [],
                "last_interaction": datetime.now()
            }
        return self.conversation_contexts[user_id]
    
    def _classify_message(self, message: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_lower = message.lower()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_keywords = [
            "–Ω–∞—Ä–∏—Å—É–π", "—Å–æ–∑–¥–∞–π", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–∫–∞—Ä—Ç–∏–Ω–∫—É", "—Ñ–æ—Ç–æ",
            "–ø–æ–∫–∞–∂–∏", "–≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π", "—Ä–∏—Å—É–Ω–æ–∫", "–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è"
        ]
        if any(keyword in message_lower for keyword in image_keywords):
            return "image_generation"
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        greeting_keywords = [
            "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π", "—Ö–∞–π", "hello", "hi"
        ]
        if any(keyword in message_lower for keyword in greeting_keywords):
            return "greeting"
        
        # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
        gratitude_keywords = [
            "—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "thanks", "thank you", "–æ—Ç–ª–∏—á–Ω–æ", "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ"
        ]
        if any(keyword in message_lower for keyword in gratitude_keywords):
            return "gratitude"
        
        # –í–æ–ø—Ä–æ—Å—ã
        question_keywords = [
            "—á—Ç–æ", "–∫–∞–∫", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º", "–∫–∞–∫–æ–π", "–∫–∞–∫–∞—è", "–∫–∞–∫–∏–µ",
            "—Ä–∞—Å—Å–∫–∞–∂–∏", "–æ–±—ä—è—Å–Ω–∏", "–ø–æ—è—Å–Ω–∏", "?"
        ]
        if any(keyword in message_lower for keyword in question_keywords):
            return "question"
        
        return "conversation"
    
    async def _handle_smart_image_generation(self, message: str) -> str:
        """–£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —É–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = self._extract_and_enhance_prompt(message)
            
            if not prompt:
                return "–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å. –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ - –∫–∞–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã, —Å—Ç–∏–ª—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Ü–≤–µ—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?"
            
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {prompt}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.send_message("üé® –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 2 –º–∏–Ω—É—Ç. –Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_path = await self._generate_enhanced_image(prompt)
            
            if image_path:
                await self.send_photo(image_path, f"üé® –ì–æ—Ç–æ–≤–æ! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é: '{prompt}'")
                return "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –ö–∞–∫ –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç? –ú–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ."
            else:
                return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å."
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º."
    
    def _extract_and_enhance_prompt(self, message: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞"""
        # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
        prompt = message
        remove_words = [
            "–Ω–∞—Ä–∏—Å—É–π", "—Å–æ–∑–¥–∞–π", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π", "—Å–¥–µ–ª–∞–π", "–ø–æ–∫–∞–∂–∏", "–≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π",
            "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–∫–∞—Ä—Ç–∏–Ω–∫—É", "—Ñ–æ—Ç–æ", "—Ä–∏—Å—É–Ω–æ–∫", "–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é",
            "–º–Ω–µ", "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "–º–æ–∂–µ—à—å", "—Ö–æ—á—É"
        ]
        
        for word in remove_words:
            prompt = re.sub(rf'\b{word}\b', '', prompt, flags=re.IGNORECASE)
        
        prompt = prompt.strip()
        
        # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        if prompt:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
            enhanced_prompt = f"{prompt}, high quality, detailed, masterpiece, best quality, professional"
            return enhanced_prompt
        
        return ""
    
    async def _generate_enhanced_image(self, prompt: str) -> Optional[str]:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if self.image_pipeline == "fallback":
                return await self._create_enhanced_placeholder(prompt)
            
            # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            enhanced_prompt = f"{prompt}, high quality, detailed, masterpiece, 8k, professional photography"
            negative_prompt = "low quality, blurry, distorted, ugly, bad anatomy, deformed, extra limbs, bad hands, text, watermark"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            image = self.image_pipeline(
                prompt=enhanced_prompt,
                negative_prompt=negative_prompt,
                num_inference_steps=50,  # –ë–æ–ª—å—à–µ —à–∞–≥–æ–≤ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
                guidance_scale=12.0,     # –í—ã—à–µ guidance –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–º–ø—Ç—É
                height=512,
                width=512
            ).images[0]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            timestamp = datetime.now().timestamp()
            image_path = f"/workspace/data/smart_generated_{timestamp}.png"
            os.makedirs("/workspace/data", exist_ok=True)
            image.save(image_path)
            
            return image_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return await self._create_enhanced_placeholder(prompt)
    
    async def _create_enhanced_placeholder(self, prompt: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∑–∞–≥–ª—É—à–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            from PIL import Image, ImageDraw, ImageFont, ImageFilter
            import random
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
            width, height = 512, 512
            img = Image.new('RGB', (width, height), color=(0, 0, 0))
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            for y in range(height):
                for x in range(width):
                    r = int(50 + (x / width) * 150)
                    g = int(50 + (y / height) * 150)
                    b = int(100 + ((x + y) / (width + height)) * 100)
                    img.putpixel((x, y), (r, g, b))
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
            img = img.filter(ImageFilter.GaussianBlur(radius=2))
            
            draw = ImageDraw.Draw(img)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
            try:
                title_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 28)
                text_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 20)
                small_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 14)
            except:
                title_font = ImageFont.load_default()
                text_font = ImageFont.load_default()
                small_font = ImageFont.load_default()
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            words = prompt.split()
            lines = []
            current_line = ""
            
            for word in words:
                test_line = current_line + " " + word if current_line else word
                if len(test_line) <= 20:
                    current_line = test_line
                else:
                    if current_line:
                        lines.append(current_line)
                    current_line = word
            
            if current_line:
                lines.append(current_line)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            lines = lines[:3]
            
            # –†–∏—Å—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title = "AI Generated Image"
            bbox = draw.textbbox((0, 0), title, font=title_font)
            title_width = bbox[2] - bbox[0]
            draw.text(
                ((width - title_width) // 2, 50),
                title,
                fill=(255, 255, 255),
                font=title_font
            )
            
            # –†–∏—Å—É–µ–º –ø—Ä–æ–º–ø—Ç
            total_height = len(lines) * 35
            start_y = (height - total_height) // 2 + 50
            
            for i, line in enumerate(lines):
                bbox = draw.textbbox((0, 0), line, font=text_font)
                text_width = bbox[2] - bbox[0]
                x = (width - text_width) // 2
                y = start_y + i * 35
                
                # –¢–µ–Ω—å –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                draw.text((x + 2, y + 2), line, fill=(0, 0, 0, 128), font=text_font)
                # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
                draw.text((x, y), line, fill=(255, 255, 255), font=text_font)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
            system_info = [
                "AGI Layer v3.9",
                "Smart AI System",
                datetime.now().strftime("%Y-%m-%d %H:%M")
            ]
            
            y_pos = height - 80
            for info in system_info:
                bbox = draw.textbbox((0, 0), info, font=small_font)
                text_width = bbox[2] - bbox[0]
                draw.text(
                    ((width - text_width) // 2, y_pos),
                    info,
                    fill=(200, 200, 200),
                    font=small_font
                )
                y_pos += 20
            
            # –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Ä–∞–º–∫–∞
            draw.rectangle([10, 10, width-10, height-10], outline=(255, 255, 255), width=3)
            draw.rectangle([15, 15, width-15, height-15], outline=(150, 150, 150), width=1)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            timestamp = datetime.now().timestamp()
            image_path = f"/workspace/data/smart_placeholder_{timestamp}.png"
            os.makedirs("/workspace/data", exist_ok=True)
            img.save(image_path)
            
            return image_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –∑–∞–≥–ª—É—à–∫–∏: {e}")
            return None
    
    async def _handle_smart_question(self, message: str, context: Dict) -> str:
        """–£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        try:
            message_lower = message.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            for topic, responses in self.knowledge_base.items():
                if topic in message_lower:
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
                    base_response = random.choice(responses)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
                    if len(context["messages"]) > 0:
                        base_response += "\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ - —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ!"
                    
                    return base_response
            
            # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò
            if self.text_model != "fallback" and self.models_ready:
                return await self._generate_ai_response(message, context)
            else:
                return await self._generate_smart_fallback(message, context)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –Ω–æ –∑–∞–ø–æ–º–Ω—é –µ–≥–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è."
    
    async def _generate_ai_response(self, message: str, context: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            conversation_history = context.get("messages", [])[-3:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            prompt_parts = []
            for msg in conversation_history:
                prompt_parts.append(f"Human: {msg['user']}")
                prompt_parts.append(f"AI: {msg['ai']}")
            
            prompt_parts.append(f"Human: {message}")
            prompt_parts.append("AI:")
            
            full_prompt = "\n".join(prompt_parts)
            
            # –¢–æ–∫–µ–Ω–∏–∑–∏—Ä—É–µ–º
            inputs = self.text_tokenizer.encode(full_prompt, return_tensors="pt", max_length=512, truncation=True)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            with torch.no_grad():
                outputs = self.text_model.generate(
                    inputs,
                    max_length=inputs.shape[1] + 150,
                    num_return_sequences=1,
                    temperature=0.8,
                    top_p=0.9,
                    do_sample=True,
                    pad_token_id=self.text_tokenizer.eos_token_id,
                    eos_token_id=self.text_tokenizer.eos_token_id,
                    no_repeat_ngram_size=3
                )
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º
            response = self.text_tokenizer.decode(outputs[0], skip_special_tokens=True)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –ò–ò
            ai_response = response.split("AI:")[-1].strip()
            
            # –û—á–∏—â–∞–µ–º –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
            ai_response = self._clean_ai_response(ai_response)
            
            if len(ai_response) < 10:
                return await self._generate_smart_fallback(message, context)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self._update_context(context, message, ai_response)
            
            return ai_response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ò–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return await self._generate_smart_fallback(message, context)
    
    def _clean_ai_response(self, response: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"""
        # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã
        response = re.sub(r'\b(\w+)\s+\1\b', r'\1', response)
        
        # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        response = re.sub(r'[^\w\s.,!?;:()\-\'"]+', '', response, flags=re.UNICODE)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(response) > 500:
            response = response[:500] + "..."
        
        # –£–±–∏—Ä–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = response.split('.')
        if len(sentences) > 1 and len(sentences[-1].strip()) < 10:
            response = '.'.join(sentences[:-1]) + '.'
        
        return response.strip()
    
    async def _generate_smart_fallback(self, message: str, context: Dict) -> str:
        """–£–º–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤"""
        message_lower = message.lower()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if any(word in message_lower for word in ["python", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫–æ–¥"]):
            responses = [
                "Python - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! –≠—Ç–æ –º–æ—â–Ω—ã–π –∏ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ Python?",
                "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π - –æ—Ç –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–æ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. –° —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å?",
                "Python –ø–æ–ø—É–ª—è—Ä–µ–Ω –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–µ–π –ø—Ä–æ—Å—Ç–æ—Ç–µ –∏ –º–æ—â–Ω–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ò–ò, –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ö–∞–∫–∞—è –æ–±–ª–∞—Å—Ç—å –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
            ]
        elif any(word in message_lower for word in ["–∏–∏", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π", "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏"]):
            responses = [
                "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç - fascinating –æ–±–ª–∞—Å—Ç—å! –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ò–ò —Å–∏—Å—Ç–µ–º—ã, –∫–∞–∫ —è, –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?",
                "–ò–ò —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –±—ã—Å—Ç—Ä–æ. –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–∫—Å—Ç, –¥–∞–∂–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å. –ö–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç –ò–ò –≤–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ–¥–æ–±–Ω–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º—É –º–æ–∑–≥—É - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–º —É—á–∏—Ç—å—Å—è –∏ —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏."
            ]
        elif any(word in message_lower for word in ["–∫–∞–∫", "—Ä–∞–±–æ—Ç–∞–µ—Ç", "—É—Å—Ç—Ä–æ–µ–Ω"]):
            responses = [
                "–≠—Ç–æ —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–Ω–æ–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤. –ú–æ–≥—É –æ–±—ä—è—Å–Ω–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –µ—Å–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.",
                "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö —Ä–∞–±–æ—Ç—ã! –û–±—ã—á–Ω–æ —ç—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤ –∏ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤. –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–Ω—è—Ç—å?",
                "–ú–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω! –≠—Ç–æ –º–Ω–æ–≥–æ—Å—Ç—É–ø–µ–Ω—á–∞—Ç—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏. –ö–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç –≤–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
            ]
        elif any(word in message_lower for word in ["—á—Ç–æ", "—Ç–∞–∫–æ–µ", "—ç—Ç–æ"]):
            responses = [
                "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è! –û–±—ã—á–Ω–æ —ç—Ç–æ –ø–æ–Ω—è—Ç–∏–µ –≤–∫–ª—é—á–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞—Å–ø–µ–∫—Ç–æ–≤ –∏ –∏–º–µ–µ—Ç –±–æ–≥–∞—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≤–∏—Ç–∏—è. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?",
                "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –≠—Ç–æ –æ–±–ª–∞—Å—Ç—å –∑–Ω–∞–Ω–∏–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –Ω—é–∞–Ω—Å–æ–≤ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π. –ö–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç –≤–∞—Å –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                "–≠—Ç–æ –æ–±—à–∏—Ä–Ω–∞—è —Ç–µ–º–∞! –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö - –æ—Ç –æ—Å–Ω–æ–≤ –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π. –° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?"
            ]
        else:
            responses = [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –æ —Ç–æ–º, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ.",
                "–ü–æ–Ω–∏–º–∞—é –≤–∞—à—É —Ç–æ—á–∫—É –∑—Ä–µ–Ω–∏—è. –≠—Ç–æ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?",
                "–•–æ—Ä–æ—à–µ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ! –ï—Å—Ç—å –º–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–æ–≤ –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —ç—Ç–æ. –ö–∞–∫–æ–π –∞—Å–ø–µ–∫—Ç –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç—Ä–∏–≥—É–µ—Ç?"
            ]
        
        response = random.choice(responses)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self._update_context(context, message, response)
        
        return response
    
    def _handle_smart_greeting(self, message: str, context: Dict) -> str:
        """–£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
        is_first_time = len(context.get("messages", [])) == 0
        
        if is_first_time:
            greetings = random.choice(self.knowledge_base["–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"])
        else:
            greetings = [
                "–°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?",
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∑–∞–¥–∞—á–∞–º. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
                "–ü—Ä–∏–≤–µ—Ç! –•–æ—Ä–æ—à–æ, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å. –ï—Å—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è?"
            ]
            greetings = random.choice(greetings)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self._update_context(context, message, greetings)
        
        return greetings
    
    def _handle_gratitude(self, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π"""
        return random.choice(self.knowledge_base["–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"])
    
    async def _handle_smart_conversation(self, message: str, context: Dict) -> str:
        """–£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        if self.text_model != "fallback" and self.models_ready:
            return await self._generate_ai_response(message, context)
        else:
            return await self._generate_smart_fallback(message, context)
    
    def _update_context(self, context: Dict, user_message: str, ai_response: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        context["messages"].append({
            "user": user_message,
            "ai": ai_response,
            "timestamp": datetime.now().isoformat()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(context["messages"]) > 10:
            context["messages"] = context["messages"][-10:]
        
        context["last_interaction"] = datetime.now()
    
    async def send_message(self, text, chat_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            target_chat_id = chat_id or self.chat_id
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/sendMessage"
                data = {
                    "chat_id": target_chat_id,
                    "text": text
                }
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get('ok'):
                            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
                            return True
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status}")
                    return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    async def send_photo(self, photo_path, caption="", chat_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        try:
            target_chat_id = chat_id or self.chat_id
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/sendPhoto"
                
                with open(photo_path, 'rb') as photo:
                    data = aiohttp.FormData()
                    data.add_field('chat_id', target_chat_id)
                    data.add_field('photo', photo, filename='smart_generated.png')
                    data.add_field('caption', caption)
                    
                    async with session.post(url, data=data) as response:
                        if response.status == 200:
                            result = await response.json()
                            if result.get('ok'):
                                logger.info(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {caption[:50]}...")
                                return True
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            return False
    
    async def get_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/getUpdates"
                params = {"offset": self.last_update_id + 1, "timeout": 30}
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('ok'):
                            return data.get('result', [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return []
    
    async def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            text = message.get('text', '')
            chat_id = message['chat']['id']
            user_id = str(message['from']['id'])
            user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç {user_name}: {text}")
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(text.strip()) < 2:
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
            response = await self.generate_smart_response(text, user_id)
            await self.send_message(response, chat_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await self.send_message("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", chat_id)
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –±–æ—Ç–∞"""
        logger.info("üß† –ó–∞–ø—É—Å–∫ Smart AGI Bot v3.9")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò –º–æ–¥–µ–ª–µ–π
        if not await self.initialize_ai_models():
            logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–µ–∫")
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self.send_message("üß† Smart AGI v3.9 –∑–∞–ø—É—â–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å —É –º–µ–Ω—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç. –û–±—â–∞–π—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ - —è –ø–æ–Ω–∏–º–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –¥–∞—é –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã!")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            try:
                updates = await self.get_updates()
                
                for update in updates:
                    self.last_update_id = update['update_id']
                    
                    if 'message' in update:
                        await self.process_message(update['message'])
                
                await asyncio.sleep(1)
                
            except KeyboardInterrupt:
                logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–º–Ω–æ–≥–æ –±–æ—Ç–∞...")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    smart_agi = SmartAGI()
    await smart_agi.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë Smart AGI –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")