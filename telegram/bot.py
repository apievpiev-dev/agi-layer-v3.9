"""
AGI Layer v3.9 - Telegram Bot
=============================

Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AGI —Å–∏—Å—Ç–µ–º–æ–π:
- /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- /status - —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
- /generate <—Ç–µ–∫—Å—Ç> - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
- /image <–æ–ø–∏—Å–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- /logs [–∞–≥–µ–Ω—Ç] - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
- /reboot - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import json
import logging
import os
from datetime import datetime
from typing import Dict, Optional

import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CallbackQueryHandler, 
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class AGITelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è AGI Layer v3.9"""
    
    def __init__(self):
        self.token = os.getenv("TELEGRAM_TOKEN")
        self.allowed_chat_id = os.getenv("TELEGRAM_CHAT_ID")
        self.api_url = "http://api-server:8080"
        
        if not self.token:
            raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        
        if not self.allowed_chat_id:
            raise ValueError("TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        
        self.allowed_chat_id = int(self.allowed_chat_id)
    
    def check_authorization(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = update.effective_chat.id
        if chat_id != self.allowed_chat_id:
            logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç chat_id: {chat_id}")
            return False
        return True
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        if not self.check_authorization(update):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        welcome_text = """
ü§ñ **AGI Layer v3.9 - –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/status` - —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
‚Ä¢ `/generate <—Ç–µ–∫—Å—Ç>` - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM
‚Ä¢ `/image <–æ–ø–∏—Å–∞–Ω–∏–µ>` - —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ `/logs [–∞–≥–µ–Ω—Ç]` - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
‚Ä¢ `/reboot` - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ `/help` - —Å–ø—Ä–∞–≤–∫–∞

üìä **Web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:** http://–≤–∞—à-—Å–µ—Ä–≤–µ—Ä:8501

üí° **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ `–ù–∞–ø–∏—à–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ –ø—Ä–∏—Ä–æ–¥–µ`
‚Ä¢ `/image –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º`
‚Ä¢ `/logs llm_agent`

üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!
        """
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
            [InlineKeyboardButton("ü§ñ –ê–≥–µ–Ω—Ç—ã", callback_data="agents")],
            [InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data="logs")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", callback_data="reboot")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        if not self.check_authorization(update):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API
            response = requests.get(f"{self.api_url}/status", timeout=10)
            
            if response.status_code == 200:
                status = response.json()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                report = "üìä **–°—Ç–∞—Ç—É—Å AGI Layer v3.9**\n\n"
                
                # Meta Agent
                meta = status.get("meta_agent", {})
                uptime_seconds = meta.get("uptime", 0)
                uptime_minutes = int(uptime_seconds // 60)
                report += f"üéØ **Meta Agent:** {meta.get('status', 'unknown')}\n"
                report += f"‚è±Ô∏è **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {uptime_minutes} –º–∏–Ω\n\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                stats = status.get("statistics", {})
                report += f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                report += f"‚Ä¢ –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {stats.get('total_agents', 0)}\n"
                report += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_agents', 0)}\n"
                report += f"‚Ä¢ –û—à–∏–±–æ–∫: {stats.get('failed_agents', 0)}\n\n"
                
                # –ê–≥–µ–Ω—Ç—ã
                agents = status.get("agents", {})
                if agents:
                    report += "ü§ñ **–ê–≥–µ–Ω—Ç—ã:**\n"
                    for name, info in agents.items():
                        status_emoji = "‚úÖ" if info.get("status") == "running" else "‚ùå"
                        report += f"{status_emoji} {name}: {info.get('status', 'unknown')}\n"
                
            else:
                report = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
                
        except Exception as e:
            report = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
        
        await update.message.reply_text(report, parse_mode="Markdown")
    
    async def generate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /generate"""
        if not self.check_authorization(update):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        prompt = update.message.text.replace("/generate", "").strip()
        
        if not prompt:
            await update.message.reply_text(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/generate –≤–∞—à —Ç–µ–∫—Å—Ç`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/generate –ù–∞–ø–∏—à–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ –∫–æ—Å–º–æ—Å–µ`"
            )
            return
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            status_message = await update.message.reply_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM –∞–≥–µ–Ω—Ç—É —á–µ—Ä–µ–∑ API
            response = requests.post(
                f"{self.api_url}/generate",
                json={"prompt": prompt, "max_tokens": 1024},
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                generated_text = result.get("generated_text", "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                await status_message.edit_text(f"ü§ñ **–û—Ç–≤–µ—Ç:**\n\n{generated_text}")
                
            else:
                await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def logs_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /logs"""
        if not self.check_authorization(update):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–≥–µ–Ω—Ç–∞
        args = context.args
        agent_name = args[0] if args else "meta_agent"
        
        try:
            response = requests.get(f"{self.api_url}/agents/{agent_name}/logs", timeout=10)
            
            if response.status_code == 200:
                logs = response.json().get("logs", [])
                
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤
                recent_logs = logs[-20:] if len(logs) > 20 else logs
                
                logs_text = f"üìù **–õ–æ–≥–∏ {agent_name}** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫):\n\n"
                logs_text += "```\n"
                logs_text += "\n".join(recent_logs)
                logs_text += "\n```"
                
                await update.message.reply_text(logs_text, parse_mode="Markdown")
                
            else:
                await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∞–≥–µ–Ω—Ç–∞ {agent_name}")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}")
    
    async def reboot_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /reboot"""
        if not self.check_authorization(update):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="reboot_confirm")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="reboot_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞**\n\n"
            "–≠—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –≤—Å–µ –∞–≥–µ–Ω—Ç—ã –∏ —Å–µ—Ä–≤–∏—Å—ã.\n"
            "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã.\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if not self.check_authorization(update):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        if query.data == "status":
            await self.status_command(update, context)
        
        elif query.data == "reboot_confirm":
            try:
                await query.edit_message_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                response = requests.post(f"{self.api_url}/system/reboot", timeout=5)
                
                if response.status_code == 200:
                    await query.edit_message_text("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã.")
                else:
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
                    
            except Exception as e:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        elif query.data == "reboot_cancel":
            await query.edit_message_text("‚ùå –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.check_authorization(update):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        user_text = update.message.text
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –∫ LLM
        if not user_text.startswith("/"):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM –∞–≥–µ–Ω—Ç—É
                response = requests.post(
                    f"{self.api_url}/generate",
                    json={"prompt": user_text, "max_tokens": 512},
                    timeout=30
                )
                
                if response.status_code == 200:
                    result = response.json()
                    generated_text = result.get("generated_text", "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                    await update.message.reply_text(f"ü§ñ {generated_text}")
                else:
                    await update.message.reply_text("‚ùå LLM –∞–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            application = Application.builder().token(self.token).build()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            application.add_handler(CommandHandler("start", self.start_command))
            application.add_handler(CommandHandler("status", self.status_command))
            application.add_handler(CommandHandler("generate", self.generate_command))
            application.add_handler(CommandHandler("logs", self.logs_command))
            application.add_handler(CommandHandler("reboot", self.reboot_command))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
            application.add_handler(CallbackQueryHandler(self.button_callback))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
            
            logger.info("üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            logger.info(f"üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π chat_id: {self.allowed_chat_id}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            application.run_polling(drop_pending_updates=True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            raise


if __name__ == "__main__":
    bot = AGITelegramBot()
    bot.run()







