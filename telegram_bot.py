#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—Ç–∞—é—â–∏–π Telegram –±–æ—Ç –¥–ª—è AGI Layer v3.9
"""

import asyncio
import logging
import aiohttp
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8325306099:AAG6hk3tG2-XmiJPgegzYFzQcY6WJaEbRxw"
CHAT_ID = "458589236"
API_URL = f"https://api.telegram.org/bot{TOKEN}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SimpleTelegramBot:
    def __init__(self):
        self.token = TOKEN
        self.chat_id = CHAT_ID
        self.api_url = API_URL
        self.last_update_id = 0
        
    async def send_message(self, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/sendMessage"
                data = {
                    "chat_id": self.chat_id,
                    "text": text
                }
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get('ok'):
                            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
                            return True
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status}")
                    return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            return False
    
    async def get_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/getUpdates"
                params = {"offset": self.last_update_id + 1, "timeout": 30}
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('ok'):
                            return data.get('result', [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return []
    
    async def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            text = message.get('text', '')
            chat_id = message['chat']['id']
            user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}: {text}")
            
            if text == '/start':
                response = f"""ü§ñ AGI Layer v3.9 - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

–ü—Ä–∏–≤–µ—Ç, {user_name}! –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/generate [–æ–ø–∏—Å–∞–Ω–∏–µ] - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
/report - –û—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ
/time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! ‚úÖ"""
                
            elif text == '/status':
                response = f"""üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã AGI Layer v3.9

üü¢ MetaAgent: –†–∞–±–æ—Ç–∞–µ—Ç
üü¢ TelegramAgent: –†–∞–±–æ—Ç–∞–µ—Ç  
üü¢ ImageAgent: –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
üü¢ TextAgent: –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
üü¢ VisionAgent: –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
üü¢ OCRAgent: –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
üü¢ EmbeddingAgent: –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
üü¢ RecoveryAgent: –†–∞–±–æ—Ç–∞–µ—Ç

–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ! ‚úÖ"""
                
            elif text.startswith('/generate '):
                prompt = text[10:]  # –£–±–∏—Ä–∞–µ–º "/generate "
                response = f"""üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

–ü—Ä–æ–º–ø—Ç: {prompt}
–°—Ç–∞—Ç—É—Å: –û–±—Ä–∞–±–æ—Ç–∫–∞...

‚ö†Ô∏è –î–ª—è –ø–æ–ª–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å ImageAgent —Å –º–æ–¥–µ–ª—å—é Stable Diffusion 1.5.

–ü–æ–∫–∞ —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
                
            elif text == '/report':
                response = f"""üìà –û—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã

–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ê–∫—Ç–∏–≤–Ω–æ
–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.last_update_id}
–°—Ç–∞—Ç—É—Å: –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç

Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç! ‚úÖ"""
                
            elif text == '/time':
                response = f"""üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""
                
            else:
                response = f"""–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π:
/start - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/generate [–æ–ø–∏—Å–∞–Ω–∏–µ] - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
/report - –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ"""
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            await self.send_message(response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ AGI Layer v3.9")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await self.send_message("üöÄ AGI Layer v3.9 –∑–∞–ø—É—â–µ–Ω!\n\n–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            try:
                updates = await self.get_updates()
                
                for update in updates:
                    self.last_update_id = update['update_id']
                    
                    if 'message' in update:
                        await self.process_message(update['message'])
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                await asyncio.sleep(1)
                
            except KeyboardInterrupt:
                logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = SimpleTelegramBot()
    await bot.run()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

