#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è AGI Layer v3.9
"""

import asyncio
import logging
import aiohttp
from datetime import datetime
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8325306099:AAG6hk3tG2-XmiJPgegzYFzQcY6WJaEbRxw"
CHAT_ID = "458589236"
API_URL = f"https://api.telegram.org/bot{TOKEN}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class FixedTelegramBot:
    def __init__(self):
        self.token = TOKEN
        self.chat_id = CHAT_ID
        self.api_url = API_URL
        self.last_update_id = 0
        self.message_count = 0
        
    async def send_message(self, text, chat_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if chat_id is None:
            chat_id = self.chat_id
            
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/sendMessage"
                data = {
                    "chat_id": chat_id,
                    "text": text,
                    "parse_mode": "HTML"
                }
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get('ok'):
                            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
                            return True
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {result}")
                    else:
                        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
                        response_text = await response.text()
                        logger.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_text}")
                    return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False
    
    async def get_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/getUpdates"
                params = {
                    "offset": self.last_update_id + 1, 
                    "timeout": 30,
                    "allowed_updates": ["message"]
                }
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('ok'):
                            updates = data.get('result', [])
                            logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                            return updates
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API getUpdates: {data}")
                    elif response.status == 409:
                        logger.error("‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π –±–æ—Ç —É–∂–µ –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                        logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ webhook...")
                        await self.clear_webhook()
                        return []
                    else:
                        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ getUpdates: {response.status}")
                        response_text = await response.text()
                        logger.error(f"–û—Ç–≤–µ—Ç: {response_text}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return []
    
    async def clear_webhook(self):
        """–û—á–∏—Å—Ç–∫–∞ webhook"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/deleteWebhook"
                async with session.post(url) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get('ok'):
                            logger.info("‚úÖ Webhook –æ—á–∏—â–µ–Ω")
                            return True
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ webhook: {result}")
                    else:
                        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {response.status}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ webhook: {e}")
        return False
    
    async def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            text = message.get('text', '')
            chat_id = message['chat']['id']
            user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            user_id = message['from'].get('id', '')
            
            self.message_count += 1
            
            logger.info(f"üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} (ID: {user_id}): {text}")
            
            # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
            if text == '/start':
                response = f"""ü§ñ <b>AGI Layer v3.9</b> - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã

–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã  
/help - –ü–æ–º–æ—â—å
/time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏

–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! ‚úÖ"""
                
            elif text == '/status':
                response = f"""üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã AGI Layer v3.9</b>

üü¢ <b>MetaAgent:</b> –†–∞–±–æ—Ç–∞–µ—Ç
üü¢ <b>TelegramAgent:</b> –†–∞–±–æ—Ç–∞–µ—Ç  
üü¢ <b>ImageAgent:</b> –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
üü¢ <b>TextAgent:</b> –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
üü¢ <b>VisionAgent:</b> –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
üü¢ <b>OCRAgent:</b> –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
üü¢ <b>EmbeddingAgent:</b> –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
üü¢ <b>RecoveryAgent:</b> –†–∞–±–æ—Ç–∞–µ—Ç

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.message_count}
üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ê–∫—Ç–∏–≤–Ω–æ

–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ! ‚úÖ"""
                
            elif text == '/help':
                response = f"""‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º AGI Layer v3.9</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
/status - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
/ping - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏

<b>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/generate [–æ–ø–∏—Å–∞–Ω–∏–µ] - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
/report - –û—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É!

–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å! ü§ñ"""
                
            elif text == '/time':
                response = f"""üïê <b>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""
                
            elif text == '/ping':
                response = f"""üèì <b>Pong!</b>

–°–≤—è–∑—å —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! ‚úÖ
–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {datetime.now().strftime('%H:%M:%S')}"""
                
            elif text.startswith('/generate '):
                prompt = text[10:]  # –£–±–∏—Ä–∞–µ–º "/generate "
                response = f"""üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>

<b>–ü—Ä–æ–º–ø—Ç:</b> {prompt}
<b>–°—Ç–∞—Ç—É—Å:</b> –û–±—Ä–∞–±–æ—Ç–∫–∞...

‚ö†Ô∏è <i>–î–ª—è –ø–æ–ª–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å ImageAgent —Å –º–æ–¥–µ–ª—å—é Stable Diffusion 1.5.</i>

–ü–æ–∫–∞ —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
                
            elif text == '/report':
                response = f"""üìà <b>–û—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã</b>

<b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> –ê–∫—Ç–∏–≤–Ω–æ
<b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {self.message_count}
<b>–°—Ç–∞—Ç—É—Å:</b> –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç

Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç! ‚úÖ"""
                
            else:
                # –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                response = f"""–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã

–Ø <b>AGI Layer v3.9</b> - —Å–∏—Å—Ç–µ–º–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã  
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –º–µ–Ω—é
/status - —Å—Ç–∞—Ç—É—Å
/help - –ø–æ–º–æ—â—å
/time - –≤—Ä–µ–º—è

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å! üòä"""
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            success = await self.send_message(response, chat_id)
            if success:
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            await self.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", chat_id)
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ Telegram –±–æ—Ç–∞ AGI Layer v3.9")
        
        # –û—á–∏—Å—Ç–∫–∞ webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        await self.clear_webhook()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await self.send_message("üöÄ <b>AGI Layer v3.9</b> –∑–∞–ø—É—â–µ–Ω!\n\n–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª...")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            try:
                updates = await self.get_updates()
                
                for update in updates:
                    self.last_update_id = update['update_id']
                    
                    if 'message' in update:
                        await self.process_message(update['message'])
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                await asyncio.sleep(1)
                
            except KeyboardInterrupt:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = FixedTelegramBot()
    await bot.run()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")