#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Telegram —á–∞—Ç-–±–æ—Ç –¥–ª—è AGI Layer v3.9
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ –≤—Å–µ–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
"""

import asyncio
import logging
import aiohttp
import os
import json
import uuid
from datetime import datetime
from typing import Dict, Any, Optional, List
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent))

from config.settings import settings
from agents.chat_coordinator import ChatCoordinator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class AGITelegramBot:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π"""
    
    def __init__(self):
        self.token = settings.TELEGRAM_TOKEN or "8325306099:AAG6hk3tG2-XmiJPgegzYFzQcY6WJaEbRxw"
        self.allowed_chat_id = settings.TELEGRAM_CHAT_ID or "458589236"
        self.bot: Optional[Bot] = None
        self.application: Optional[Application] = None
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —á–∞—Ç–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏
        self.chat_coordinator: Optional[ChatCoordinator] = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        self.active_tasks: Dict[str, Dict[str, Any]] = {}
        
        # HTTP —Å–µ—Å—Å–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.http_session: Optional[aiohttp.ClientSession] = None
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∞–≥–µ–Ω—Ç–æ–≤"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AGI Telegram –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏
        self.http_session = aiohttp.ClientSession()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        self.bot = Bot(token=self.token)
        self.application = Application.builder().token(self.token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        await self._register_handlers()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞
        await self._initialize_chat_coordinator()
        
        logger.info("‚úÖ AGI Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self._cmd_start))
        self.application.add_handler(CommandHandler("help", self._cmd_help))
        self.application.add_handler(CommandHandler("chat", self._cmd_chat))
        self.application.add_handler(CommandHandler("generate", self._cmd_generate))
        self.application.add_handler(CommandHandler("analyze", self._cmd_analyze))
        self.application.add_handler(CommandHandler("status", self._cmd_status))
        self.application.add_handler(CommandHandler("clear", self._cmd_clear))
        self.application.add_handler(CommandHandler("models", self._cmd_models))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_text_message))
        self.application.add_handler(MessageHandler(filters.PHOTO, self._handle_photo_message))
        self.application.add_handler(MessageHandler(filters.Document.IMAGE, self._handle_image_document))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self._handle_callback))
    
    async def _initialize_chat_coordinator(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞"""
        try:
            logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChatCoordinator...")
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
            coordinator_config = {
                'models_path': settings.MODELS_PATH,
                'output_path': '/workspace/output',
                'postgres': {
                    'host': settings.POSTGRES_HOST,
                    'port': settings.POSTGRES_PORT,
                    'database': settings.POSTGRES_DB,
                    'user': settings.POSTGRES_USER,
                    'password': settings.POSTGRES_PASSWORD
                }
            }
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
            self.chat_coordinator = ChatCoordinator(coordinator_config)
            await self.chat_coordinator.initialize()
            
            logger.info("‚úÖ ChatCoordinator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChatCoordinator: {e}")
            logger.info("–†–∞–±–æ—Ç–∞–µ–º –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    
    async def _check_authorization(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.allowed_chat_id:
            return True
        
        chat_id = str(update.effective_chat.id)
        return chat_id == self.allowed_chat_id
    
    async def _get_chat_session(self, chat_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä"""
        if self.chat_coordinator:
            return await self.chat_coordinator.get_chat_session(chat_id)
        else:
            # Fallback –¥–ª—è —Å–ª—É—á–∞—è –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            return {
                'history': [],
                'mode': 'chat',
                'context': {},
                'created_at': datetime.now(),
                'message_count': 0
            }
    
    async def _cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        if not await self._check_authorization(update):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        welcome_text = f"""ü§ñ **AGI Layer v3.9 - –ß–∞—Ç —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏**

–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º.

**üß† –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üí¨ –ß–∞—Ç —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é (Phi-2)
‚Ä¢ üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (Stable Diffusion)
‚Ä¢ üëÅÔ∏è –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (BLIP2)
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

**üöÄ –ö–æ–º–∞–Ω–¥—ã:**
/chat - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
/generate [–æ–ø–∏—Å–∞–Ω–∏–µ] - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
/analyze - –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ)
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/models - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
/help - –ü–æ–º–æ—â—å

**–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –º–Ω–µ, –∏ —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∫–∞–∫ —É–º–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å!** ‚ú®"""
        
        keyboard = [
            [
                InlineKeyboardButton("üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç", callback_data="mode_chat"),
                InlineKeyboardButton("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="mode_generate")
            ],
            [
                InlineKeyboardButton("üëÅÔ∏è –ê–Ω–∞–ª–∏–∑", callback_data="mode_analyze"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def _cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        if not await self._check_authorization(update):
            return
        
        help_text = """ü§ñ **AGI Layer v3.9 - –°–ø—Ä–∞–≤–∫–∞**

**üìù –ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/chat` - –†–µ–∂–∏–º —á–∞—Ç–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
‚Ä¢ `/generate [–æ–ø–∏—Å–∞–Ω–∏–µ]` - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ `/analyze` - –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ)
‚Ä¢ `/status` - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
‚Ä¢ `/models` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö
‚Ä¢ `/clear` - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞

**üí¨ –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:**
1. **–ß–∞—Ç** - –û–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–≤–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é Phi-2
2. **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è** - –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Stable Diffusion
3. **–ê–Ω–∞–ª–∏–∑** - –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ BLIP2

**üéØ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ `–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –ø—Ä–æ –∫–æ—Å–º–æ—Å`
‚Ä¢ `/generate –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º`
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ + `/analyze`

**‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä—É –ª—É—á—à–∏–π —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞!"""
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def _cmd_chat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /chat - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞"""
        if not await self._check_authorization(update):
            return
        
        chat_id = update.effective_chat.id
        session = await self._get_chat_session(chat_id)
        session['mode'] = 'chat'
        
        await update.message.reply_text(
            "üí¨ **–†–µ–∂–∏–º —á–∞—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
            "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —É–º–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å. "
            "–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã!\n\n"
            "üß† *–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: Phi-2*",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def _cmd_generate(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /generate - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not await self._check_authorization(update):
            return
        
        prompt = " ".join(context.args) if context.args else ""
        
        if not prompt:
            keyboard = [
                [InlineKeyboardButton("üåÖ –ó–∞–∫–∞—Ç", callback_data="gen_beautiful sunset over ocean")],
                [InlineKeyboardButton("üèîÔ∏è –ì–æ—Ä—ã", callback_data="gen_majestic mountains landscape")],
                [InlineKeyboardButton("üå∏ –¶–≤–µ—Ç—ã", callback_data="gen_beautiful flowers garden")],
                [InlineKeyboardButton("üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data="gen_futuristic sports car")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**\n\n"
                "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:\n"
                "`/generate –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º`\n\n"
                "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            return
        
        await self._generate_image(update, prompt)
    
    async def _cmd_analyze(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /analyze - –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not await self._check_authorization(update):
            return
        
        chat_id = update.effective_chat.id
        session = await self._get_chat_session(chat_id)
        session['mode'] = 'analyze'
        
        await update.message.reply_text(
            "üëÅÔ∏è **–†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –æ–ø–∏—à—É —á—Ç–æ –Ω–∞ –Ω–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ.\n\n"
            "üß† *–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: BLIP2*\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, WebP",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def _cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        if not await self._check_authorization(update):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
        if self.chat_coordinator:
            coordinator_status = await self.chat_coordinator.get_status()
        else:
            coordinator_status = {"demo_mode": True, "active_chats": 0, "agents": {}}
        
        status_text = "üìä **–°—Ç–∞—Ç—É—Å AGI Layer v3.9**\n\n"
        
        # –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤
        demo_mode = coordinator_status.get("demo_mode", True)
        mode_text = "üü° –î–µ–º–æ —Ä–µ–∂–∏–º" if demo_mode else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
        
        agents_status = {
            "ü§ñ Chat Coordinator": "üü¢ –ê–∫—Ç–∏–≤–µ–Ω",
            "üìù Text Agent (Phi-2)": mode_text,
            "üé® Image Agent (SD1.5)": mode_text, 
            "üëÅÔ∏è Vision Agent (BLIP2)": mode_text,
            "üì± Telegram Bot": "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
        }
        
        for agent, status in agents_status.items():
            status_text += f"{agent}: {status}\n"
        
        status_text += f"\nüìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        status_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {coordinator_status.get('active_chats', 0)}\n"
        status_text += f"‚Ä¢ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {'–î–µ–º–æ' if demo_mode else '–ü–æ–ª–Ω—ã–π'}\n"
        status_text += f"‚Ä¢ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n"
        status_text += f"‚Ä¢ –í–µ—Ä—Å–∏—è: v3.9.0\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_status")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            status_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def _cmd_models(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /models - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö"""
        if not await self._check_authorization(update):
            return
        
        models_text = """üß† **–ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–µ –º–æ–¥–µ–ª–∏ AGI Layer**

**üìù –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å:**
‚Ä¢ **Phi-2** - Microsoft
‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: 2.7B
‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞, –¥–∏–∞–ª–æ–≥
‚Ä¢ –†–µ–∂–∏–º: CPU-only

**üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**
‚Ä¢ **Stable Diffusion 1.5** - RunwayML
‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 512x512
‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É
‚Ä¢ –†–µ–∂–∏–º: CPU-only

**üëÅÔ∏è –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:**
‚Ä¢ **BLIP2** - Salesforce
‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: 2.7B (OPT)
‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, VQA
‚Ä¢ –†–µ–∂–∏–º: CPU-only

**‚ö° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –í—Å–µ –º–æ–¥–µ–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è CPU
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
‚Ä¢ –≠–∫–æ–Ω–æ–º–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
        
        await update.message.reply_text(models_text, parse_mode=ParseMode.MARKDOWN)
    
    async def _cmd_clear(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /clear - –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        if not await self._check_authorization(update):
            return
        
        chat_id = update.effective_chat.id
        if chat_id in self.chat_sessions:
            del self.chat_sessions[chat_id]
        
        await update.message.reply_text(
            "üßπ **–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!**\n\n"
            "–ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞.",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def _handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not await self._check_authorization(update):
            return
        
        chat_id = update.effective_chat.id
        session = await self._get_chat_session(chat_id)
        message_text = update.message.text
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        await context.bot.send_chat_action(chat_id=chat_id, action='typing')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if session['mode'] == 'generate' or message_text.lower().startswith(('—Å–æ–∑–¥–∞–π', '–Ω–∞—Ä–∏—Å—É–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π')):
            await self._generate_image(update, message_text)
        else:
            # –†–µ–∂–∏–º —á–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
            await self._process_chat_message(update, message_text)
    
    async def _process_chat_message(self, update: Update, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞"""
        try:
            chat_id = update.effective_chat.id
            user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            if self.chat_coordinator:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                response = await self.chat_coordinator.process_text_message(chat_id, message, user_name)
            else:
                # Fallback - –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                response = "–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await update.message.reply_text(
                f"ü§ñ {response}",
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    
    async def _generate_image(self, update: Update, prompt: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            chat_id = update.effective_chat.id
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            await update.message.reply_text(
                f"üé® **–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...**\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: `{prompt}`\n"
                f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...",
                parse_mode=ParseMode.MARKDOWN
            )
            
            if self.chat_coordinator:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                result = await self.chat_coordinator.process_image_generation(chat_id, prompt)
                
                if result["status"] == "success":
                    # –†–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
                    demo_text = f"""‚úÖ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!** üé®

üìù **–ü—Ä–æ–º–ø—Ç:** {prompt}
ü§ñ **–ú–æ–¥–µ–ª—å:** Stable Diffusion 1.5
üìÅ **–§–∞–π–ª:** {result.get('filename', 'generated_image.png')}
üìÖ **–°–æ–∑–¥–∞–Ω–æ:** {datetime.now().strftime('%H:%M:%S')}

–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"""
                    
                elif result["status"] == "demo":
                    # –î–µ–º–æ —Ä–µ–∂–∏–º
                    demo_text = f"""‚úÖ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!** üé®

üìù **–ü—Ä–æ–º–ø—Ç:** {prompt}
ü§ñ **–ú–æ–¥–µ–ª—å:** Stable Diffusion 1.5
‚öôÔ∏è **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:** 512x512, 20 steps
üìÖ **–°–æ–∑–¥–∞–Ω–æ:** {datetime.now().strftime('%H:%M:%S')}

*–í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è, –Ω–æ –≤—Å—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!*

üöÄ **–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É:**
`docker-compose up -d`"""
                    
                else:
                    # –û—à–∏–±–∫–∞
                    demo_text = f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            else:
                # Fallback
                demo_text = "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
            keyboard = [
                [
                    InlineKeyboardButton("üé® –ï—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="mode_generate"),
                    InlineKeyboardButton("üí¨ –í —á–∞—Ç", callback_data="mode_chat")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                demo_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
            )
    
    async def _handle_photo_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        if not await self._check_authorization(update):
            return
        
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')
        
        try:
            chat_id = update.effective_chat.id
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            file = await context.bot.get_file(photo.file_id)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª (–¥–ª—è –¥–µ–º–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º –ø—É—Ç—å)
            file_path = f"/tmp/photo_{photo.file_id}.jpg"
            # await file.download_to_drive(file_path)
            
            if self.chat_coordinator:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                result = await self.chat_coordinator.process_image_analysis(chat_id, file_path)
                
                if result["status"] == "success":
                    # –†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω
                    analysis_text = f"""üëÅÔ∏è **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!**

üì∑ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:** {photo.width}x{photo.height}
ü§ñ **–ú–æ–¥–µ–ª—å:** BLIP2 (Salesforce)
üìÖ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}

üîç **–û–ø–∏—Å–∞–Ω–∏–µ:** {result.get('caption', '–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω')}

–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!"""
                    
                elif result["status"] == "demo":
                    # –î–µ–º–æ —Ä–µ–∂–∏–º
                    analysis_text = f"""üëÅÔ∏è **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**

üì∑ **–ü–æ–ª—É—á–µ–Ω–æ:** –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {photo.width}x{photo.height}
ü§ñ **–ú–æ–¥–µ–ª—å:** BLIP2 (Salesforce)
üìÖ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}

üîç **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞:**
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏  
‚Ä¢ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

*–í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!*

üöÄ **–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:**
`docker-compose up -d`"""
                    
                else:
                    # –û—à–∏–±–∫–∞
                    analysis_text = f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            else:
                # Fallback
                analysis_text = "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
            keyboard = [
                [
                    InlineKeyboardButton("üì∑ –ï—â–µ —Ñ–æ—Ç–æ", callback_data="mode_analyze"),
                    InlineKeyboardButton("üí¨ –í —á–∞—Ç", callback_data="mode_chat")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                analysis_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
            )
    
    async def _handle_image_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        await self._handle_photo_message(update, context)
    
    async def _handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        chat_id = query.message.chat_id
        data = query.data
        
        if data.startswith("mode_"):
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
            mode = data.split("_")[1]
            session = await self._get_chat_session(chat_id)
            session['mode'] = mode
            
            mode_messages = {
                'chat': "üí¨ –†–µ–∂–∏–º —á–∞—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                'generate': "üé® –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –û–ø–∏—à–∏—Ç–µ —á—Ç–æ —Å–æ–∑–¥–∞—Ç—å.",
                'analyze': "üëÅÔ∏è –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
            }
            
            await query.edit_message_text(
                mode_messages.get(mode, "–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω"),
                parse_mode=ParseMode.MARKDOWN
            )
            
        elif data.startswith("gen_"):
            # –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            prompt = data[4:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "gen_"
            await self._generate_image_from_callback(query, prompt)
            
        elif data == "status":
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            await self._show_status_callback(query)
            
        elif data == "refresh_status":
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            await self._show_status_callback(query)
    
    async def _generate_image_from_callback(self, query, prompt: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ callback"""
        await query.edit_message_text(
            f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é: {prompt}...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        await asyncio.sleep(2)
        
        result_text = f"""‚úÖ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!**

üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {prompt}
ü§ñ **–ú–æ–¥–µ–ª—å:** Stable Diffusion 1.5
üìÖ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}

*–î–µ–º–æ —Ä–µ–∂–∏–º - –ø–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ Docker*"""
        
        keyboard = [
            [InlineKeyboardButton("üé® –ï—â–µ", callback_data="mode_generate")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            result_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def _show_status_callback(self, query):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ callback"""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
        if self.chat_coordinator:
            coordinator_status = await self.chat_coordinator.get_status()
        else:
            coordinator_status = {"demo_mode": True, "active_chats": 0, "agents": {}}
        
        demo_mode = coordinator_status.get("demo_mode", True)
        mode_text = "üü° –î–µ–º–æ —Ä–µ–∂–∏–º" if demo_mode else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
        
        status_text = f"""üìä **–°—Ç–∞—Ç—É—Å AGI Layer v3.9**

ü§ñ **–ê–≥–µ–Ω—Ç—ã:**
‚Ä¢ Chat Coordinator: üü¢ –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ Text Agent: {mode_text}
‚Ä¢ Image Agent: {mode_text}
‚Ä¢ Vision Agent: {mode_text}
‚Ä¢ Telegram Bot: üü¢ –ê–∫—Ç–∏–≤–µ–Ω

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {coordinator_status.get('active_chats', 0)}
‚Ä¢ –†–µ–∂–∏–º: {'–î–µ–º–æ' if demo_mode else '–ü–æ–ª–Ω—ã–π'}
‚Ä¢ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}
‚Ä¢ –í–µ—Ä—Å–∏—è: v3.9.0"""
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_status")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            status_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ AGI Telegram –±–æ—Ç–∞...")
            
            await self.application.initialize()
            await self.application.start()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
            if self.allowed_chat_id:
                try:
                    await self.bot.send_message(
                        chat_id=int(self.allowed_chat_id),
                        text="üöÄ **AGI Layer v3.9 –∑–∞–ø—É—â–µ–Ω!**\n\n–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")
            
            # –ó–∞–ø—É—Å–∫ polling
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            await self.application.updater.start_polling(drop_pending_updates=True)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await self.application.updater.idle()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
        finally:
            await self.cleanup()
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        if self.chat_coordinator:
            await self.chat_coordinator.cleanup()
        
        if self.application:
            await self.application.stop()
            await self.application.shutdown()
        
        if self.http_session:
            await self.http_session.close()
        
        logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = AGITelegramBot()
    
    try:
        await bot.initialize()
        await bot.run()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.cleanup()


if __name__ == "__main__":
    asyncio.run(main())