#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ TelegramChatAgent –¥–ª—è AGI Layer v3.9
"""

import asyncio
import logging
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from agents.telegram_chat_agent import TelegramChatAgent
from config.settings import settings
from config.chat_config import validate_chat_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL.upper(), logging.INFO),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(f"{settings.LOG_PATH}/telegram_chat_agent.log")
    ]
)

logger = logging.getLogger(__name__)


def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    required_vars = {
        'TELEGRAM_TOKEN': settings.TELEGRAM_TOKEN,
        'POSTGRES_HOST': settings.POSTGRES_HOST,
        'POSTGRES_DB': settings.POSTGRES_DB,
        'POSTGRES_USER': settings.POSTGRES_USER,
        'POSTGRES_PASSWORD': settings.POSTGRES_PASSWORD
    }
    
    missing_vars = []
    for var_name, var_value in required_vars.items():
        if not var_value:
            missing_vars.append(var_name)
    
    if missing_vars:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        return False
    
    return True


def validate_configuration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞"""
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞...")
    
    config_checks = validate_chat_config()
    
    failed_checks = [
        check_name for check_name, passed in config_checks.items() 
        if not passed
    ]
    
    if failed_checks:
        logger.error(f"–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {', '.join(failed_checks)}")
        return False
    
    logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞")
    return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ TelegramChatAgent –¥–ª—è AGI Layer v3.9")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not check_environment():
        logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not validate_configuration():
        logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    os.makedirs(settings.LOG_PATH, exist_ok=True)
    os.makedirs(settings.MODELS_PATH, exist_ok=True)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
    agent_config = {
        'telegram_token': settings.TELEGRAM_TOKEN,
        'postgres_host': settings.POSTGRES_HOST,
        'postgres_port': settings.POSTGRES_PORT,
        'postgres_db': settings.POSTGRES_DB,
        'postgres_user': settings.POSTGRES_USER,
        'postgres_password': settings.POSTGRES_PASSWORD,
        'max_context_messages': settings.MAX_CONTEXT_MESSAGES,
        'response_timeout': settings.CHAT_RESPONSE_TIMEOUT,
        'enable_image_processing': settings.ENABLE_IMAGE_PROCESSING,
        'enable_voice_messages': settings.ENABLE_VOICE_MESSAGES,
        'default_personality': settings.DEFAULT_PERSONALITY
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞
    try:
        agent = TelegramChatAgent(agent_config)
        
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramChatAgent...")
        await agent.initialize()
        
        logger.info("‚úÖ TelegramChatAgent —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        logger.info("üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram")
        
        # –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞
        await agent.run()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        if 'agent' in locals():
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TelegramChatAgent...")
            await agent.cleanup()
        
        logger.info("üëã TelegramChatAgent –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫ –≤ event loop
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        sys.exit(1)