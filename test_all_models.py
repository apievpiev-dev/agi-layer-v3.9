#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π AGI Layer v3.9
===================================================

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- 4 LLM –º–æ–¥–µ–ª–∏ (Llama, Phi, Qwen, CodeLlama)
- Whisper (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏)
- EasyOCR (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞)
- ChromaDB (–≤–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å)
- Vision –º–æ–¥–µ–ª–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
"""

import asyncio
import subprocess
import time
from datetime import datetime

import chromadb
from sentence_transformers import SentenceTransformer


class AGITester:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AGI Layer"""
    
    def __init__(self):
        self.results = {}
        self.start_time = time.time()

    async def test_all_systems(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AGI Layer v3.9")
        print("=" * 60)
        
        # –¢–µ—Å—Ç 1: LLM –º–æ–¥–µ–ª–∏
        await self.test_llm_models()
        
        # –¢–µ—Å—Ç 2: Whisper
        await self.test_whisper()
        
        # –¢–µ—Å—Ç 3: EasyOCR
        await self.test_easyocr()
        
        # –¢–µ—Å—Ç 4: ChromaDB
        await self.test_chromadb()
        
        # –¢–µ—Å—Ç 5: SentenceTransformers
        await self.test_embeddings()
        
        # –¢–µ—Å—Ç 6: Docker —Å–µ—Ä–≤–∏—Å—ã
        await self.test_docker_services()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        await self.generate_report()

    async def test_llm_models(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM –º–æ–¥–µ–ª–µ–π"""
        print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM –º–æ–¥–µ–ª–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        result = subprocess.run(["ollama", "list"], capture_output=True, text=True)
        if result.returncode != 0:
            self.results["llm"] = {"status": "error", "message": "Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
            return
        
        lines = result.stdout.strip().split('\n')[1:]
        models = [line.split()[0] for line in lines if line.strip()]
        
        llm_results = {}
        
        for model in models:
            print(f"  ü§ñ –¢–µ—Å—Ç–∏—Ä—É—é {model}...")
            
            try:
                # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                test_prompts = {
                    "greeting": "–ü—Ä–∏–≤–µ—Ç!",
                    "reasoning": "2+2=?",
                    "creativity": "–ù–∞–ø–∏—à–∏ —Ö–∞–π–∫—É –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏"
                }
                
                model_results = {}
                
                for test_name, prompt in test_prompts.items():
                    start = time.time()
                    
                    cmd = ["ollama", "run", model, prompt]
                    process = await asyncio.create_subprocess_exec(
                        *cmd,
                        stdout=asyncio.subprocess.PIPE,
                        stderr=asyncio.subprocess.PIPE
                    )
                    
                    stdout, stderr = await asyncio.wait_for(
                        process.communicate(),
                        timeout=30
                    )
                    
                    duration = time.time() - start
                    
                    if process.returncode == 0:
                        response = stdout.decode().strip()
                        model_results[test_name] = {
                            "status": "success",
                            "response": response[:100] + "..." if len(response) > 100 else response,
                            "duration": round(duration, 2)
                        }
                    else:
                        model_results[test_name] = {
                            "status": "error",
                            "error": stderr.decode().strip(),
                            "duration": round(duration, 2)
                        }
                
                llm_results[model] = model_results
                print(f"    ‚úÖ {model} - OK")
                
            except Exception as e:
                llm_results[model] = {"status": "error", "error": str(e)}
                print(f"    ‚ùå {model} - –û—à–∏–±–∫–∞")
        
        self.results["llm"] = llm_results

    async def test_whisper(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Whisper"""
        print("\nüéôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Whisper...")
        
        try:
            import whisper
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
            model = whisper.load_model("base", device="cpu")
            
            self.results["whisper"] = {
                "status": "success",
                "model": "whisper-base",
                "device": "cpu",
                "languages": ["ru", "en", "auto"]
            }
            print("  ‚úÖ Whisper - –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
        except Exception as e:
            self.results["whisper"] = {"status": "error", "error": str(e)}
            print("  ‚ùå Whisper - –æ—à–∏–±–∫–∞")

    async def test_easyocr(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EasyOCR"""
        print("\nüëÅÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EasyOCR...")
        
        try:
            import easyocr
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º reader
            reader = easyocr.Reader(['ru', 'en'], gpu=False)
            
            self.results["easyocr"] = {
                "status": "success",
                "languages": ["ru", "en"],
                "device": "cpu"
            }
            print("  ‚úÖ EasyOCR - –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
        except Exception as e:
            self.results["easyocr"] = {"status": "error", "error": str(e)}
            print("  ‚ùå EasyOCR - –æ—à–∏–±–∫–∞")

    async def test_chromadb(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ChromaDB"""
        print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ChromaDB...")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ ChromaDB
            client = chromadb.HttpClient(host="localhost", port=8000)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
            test_collection = client.get_or_create_collection("test_collection")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
            test_collection.add(
                embeddings=[[1.0, 2.0, 3.0]],
                documents=["–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å"],
                metadatas=[{"test": True}],
                ids=["test_1"]
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫
            results = test_collection.query(
                query_embeddings=[[1.0, 2.0, 3.0]],
                n_results=1
            )
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
            client.delete_collection("test_collection")
            
            self.results["chromadb"] = {
                "status": "success",
                "host": "localhost:8000",
                "test_query": "OK"
            }
            print("  ‚úÖ ChromaDB - –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
        except Exception as e:
            self.results["chromadb"] = {"status": "error", "error": str(e)}
            print("  ‚ùå ChromaDB - –æ—à–∏–±–∫–∞")

    async def test_embeddings(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SentenceTransformers"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Embeddings...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
            model = SentenceTransformer("sentence-transformers/all-MiniLM-L6-v2")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ embeddings
            texts = ["–ü—Ä–∏–≤–µ—Ç –º–∏—Ä", "Hello world", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ –∫—Ä—É—Ç–æ"]
            embeddings = model.encode(texts)
            
            self.results["embeddings"] = {
                "status": "success",
                "model": "all-MiniLM-L6-v2",
                "embedding_size": len(embeddings[0]),
                "test_texts": len(texts)
            }
            print("  ‚úÖ SentenceTransformers - –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
        except Exception as e:
            self.results["embeddings"] = {"status": "error", "error": str(e)}
            print("  ‚ùå SentenceTransformers - –æ—à–∏–±–∫–∞")

    async def test_docker_services(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("\nüê≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            result = subprocess.run(
                ["docker-compose", "ps"], 
                cwd="/root/agi-layer-v3.9",
                capture_output=True, 
                text=True
            )
            
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')[2:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                
                services = {}
                for line in lines:
                    if line.strip():
                        parts = line.split()
                        if len(parts) >= 4:
                            name = parts[0]
                            state = parts[3] if len(parts) > 3 else "unknown"
                            services[name] = state
                
                self.results["docker"] = {
                    "status": "success",
                    "services": services,
                    "total_services": len(services)
                }
                print(f"  ‚úÖ Docker - {len(services)} —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ")
            else:
                self.results["docker"] = {"status": "error", "error": "docker-compose –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                print("  ‚ùå Docker - –æ—à–∏–±–∫–∞")
                
        except Exception as e:
            self.results["docker"] = {"status": "error", "error": str(e)}
            print("  ‚ùå Docker - –æ—à–∏–±–∫–∞")

    async def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        total_time = time.time() - self.start_time
        
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        working_systems = 0
        total_systems = 0
        
        for system, result in self.results.items():
            total_systems += 1
            
            if isinstance(result, dict):
                if result.get("status") == "success":
                    working_systems += 1
                    print(f"‚úÖ {system.upper()}: –†–ê–ë–û–¢–ê–ï–¢")
                else:
                    print(f"‚ùå {system.upper()}: –û–®–ò–ë–ö–ê")
            else:
                # –î–ª—è LLM –º–æ–¥–µ–ª–µ–π
                if system == "llm":
                    llm_working = 0
                    llm_total = len(result)
                    
                    for model, model_result in result.items():
                        if isinstance(model_result, dict) and "greeting" in model_result:
                            if model_result["greeting"]["status"] == "success":
                                llm_working += 1
                                print(f"‚úÖ LLM {model}: –†–ê–ë–û–¢–ê–ï–¢")
                            else:
                                print(f"‚ùå LLM {model}: –û–®–ò–ë–ö–ê")
                        else:
                            print(f"‚ùå LLM {model}: –û–®–ò–ë–ö–ê")
                    
                    if llm_working == llm_total:
                        working_systems += 1
        
        print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {working_systems}/{total_systems} —Å–∏—Å—Ç–µ–º —Ä–∞–±–æ—Ç–∞—é—Ç")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {round(total_time, 2)} —Å–µ–∫—É–Ω–¥")
        print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open("/root/agi-layer-v3.9/test_report.json", "w", encoding="utf-8") as f:
            import json
            report = {
                "timestamp": datetime.now().isoformat(),
                "total_time": round(total_time, 2),
                "working_systems": working_systems,
                "total_systems": total_systems,
                "success_rate": round(working_systems / total_systems * 100, 1),
                "results": self.results
            }
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: /root/agi-layer-v3.9/test_report.json")
        
        if working_systems == total_systems:
            print("\nüéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ò–î–ï–ê–õ–¨–ù–û!")
        elif working_systems > total_systems * 0.8:
            print("\n‚úÖ –ë–û–õ–¨–®–ò–ù–°–¢–í–û –°–ò–°–¢–ï–ú –†–ê–ë–û–¢–ê–Æ–¢!")
        else:
            print("\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = AGITester()
    await tester.test_all_systems()


if __name__ == "__main__":
    asyncio.run(main())




