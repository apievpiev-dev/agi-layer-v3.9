#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–æ–≤ Telegram –±–æ—Ç–∞
"""

import asyncio
import aiohttp
import time

TOKEN = "8325306099:AAG6hk3tG2-XmiJPgegzYFzQcY6WJaEbRxw"
CHAT_ID = "458589236"
API_URL = f"https://api.telegram.org/bot{TOKEN}"

async def send_test_command(command):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{API_URL}/sendMessage"
            data = {
                "chat_id": CHAT_ID,
                "text": command
            }
            async with session.post(url, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get('ok'):
                        print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{command}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    return False

async def get_last_messages():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{API_URL}/getUpdates"
            params = {"limit": 10}
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('ok'):
                        updates = data.get('result', [])
                        messages = []
                        for update in updates:
                            if 'message' in update:
                                message = update['message']
                                text = message.get('text', '')
                                date = message.get('date', 0)
                                messages.append((text, date))
                        return messages
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    return []

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–æ–≤ Telegram –±–æ—Ç–∞...")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    initial_messages = await get_last_messages()
    print(f"–ù–∞—á–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(initial_messages)}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    test_command = "/start"
    print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {test_command}")
    success = await send_test_command(test_command)
    
    if success:
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (5 —Å–µ–∫—É–Ω–¥)...")
        await asyncio.sleep(5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        new_messages = await get_last_messages()
        
        if len(new_messages) > len(initial_messages):
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞!")
            print("üì¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
            for i, (text, date) in enumerate(new_messages[-3:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                print(f"  {i+1}. {text[:100]}...")
        else:
            print("‚ùå –û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            print("   - –ë–æ—Ç –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")

if __name__ == "__main__":
    asyncio.run(main())