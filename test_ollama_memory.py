#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-—á–∞—Ç–∞ —Å Ollama –∏ –ø–∞–º—è—Ç—å—é
"""

import asyncio
import aiohttp
import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from services.ollama_chat_with_memory import OllamaChatWithMemory, ChatMemory


async def test_memory_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏...")
    
    config = {
        'postgres': {
            'host': 'localhost',
            'port': 5432,
            'database': 'agi_layer',
            'user': 'agi_user',
            'password': 'agi_password'
        },
        'chroma': {
            'host': 'localhost',
            'port': 8000
        }
    }
    
    try:
        memory = ChatMemory(config)
        await memory.initialize()
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
        session_id = await memory.create_session("–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id}")
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        await memory.add_message(session_id, "user", "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")
        await memory.add_message(session_id, "assistant", "–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!")
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø–∞–º—è—Ç—å")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç–∏
        results = await memory.search_memory("–∫–∞–∫ –¥–µ–ª–∞", limit=3)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {len(results)}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context = await memory.get_context_for_session(session_id, "–∫–∞–∫ –¥–µ–ª–∞")
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç: {len(context)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        await memory.cleanup()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
        return False


async def test_ollama_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("http://localhost:11434/api/tags") as response:
                if response.status == 200:
                    data = await response.json()
                    models = [model['name'] for model in data.get('models', [])]
                    print(f"‚úÖ Ollama —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {models}")
                    return True
                else:
                    print(f"‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status})")
                    return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {e}")
        print("\nüí° –†–µ—à–µ–Ω–∏—è:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ollama: https://ollama.ai/download")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Ollama: ollama serve")
        print("3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å: ollama pull llama2")
        return False


async def test_database_connections():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...")
    
    # –¢–µ—Å—Ç PostgreSQL
    try:
        import asyncpg
        conn = await asyncpg.connect(
            host='localhost',
            port=5432,
            database='agi_layer',
            user='agi_user',
            password='agi_password'
        )
        await conn.close()
        print("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω")
        postgres_ok = True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        postgres_ok = False
    
    # –¢–µ—Å—Ç ChromaDB
    try:
        import chromadb
        client = chromadb.HttpClient(host='localhost', port=8000)
        client.list_collections()
        print("‚úÖ ChromaDB –ø–æ–¥–∫–ª—é—á–µ–Ω")
        chroma_ok = True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ChromaDB: {e}")
        chroma_ok = False
    
    return postgres_ok and chroma_ok


async def test_web_chat_memory():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-—á–∞—Ç–∞ —Å –ø–∞–º—è—Ç—å—é"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-—á–∞—Ç–∞ —Å –ø–∞–º—è—Ç—å—é...")
    
    config = {
        'ollama_host': 'localhost',
        'ollama_port': 11434,
        'postgres': {
            'host': 'localhost',
            'port': 5432,
            'database': 'agi_layer',
            'user': 'agi_user',
            'password': 'agi_password'
        },
        'chroma': {
            'host': 'localhost',
            'port': 8000
        }
    }
    
    try:
        chat_ui = OllamaChatWithMemory(config)
        await chat_ui.initialize()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
        models = await chat_ui._get_available_models()
        print(f"‚úÖ –í–µ–±-—á–∞—Ç —Å –ø–∞–º—è—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ú–æ–¥–µ–ª–∏: {models}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
        session_id = await chat_ui.memory.create_session("–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {session_id}")
        
        await chat_ui.cleanup()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-—á–∞—Ç–∞ —Å –ø–∞–º—è—Ç—å—é: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ollama Chat —Å –ü–∞–º—è—Ç—å—é")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
    db_ok = await test_database_connections()
    
    if not db_ok:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.")
        print("\nüí° –†–µ—à–µ–Ω–∏—è:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ PostgreSQL: docker run -d -p 5432:5432 -e POSTGRES_DB=agi_layer -e POSTGRES_USER=agi_user -e POSTGRES_PASSWORD=agi_password postgres:15-alpine")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ChromaDB: docker run -d -p 8000:8000 chromadb/chroma:latest")
        sys.exit(1)
    
    # –¢–µ—Å—Ç 2: –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏
    memory_ok = await test_memory_system()
    
    if not memory_ok:
        print("\n‚ùå –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
        sys.exit(1)
    
    # –¢–µ—Å—Ç 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama
    ollama_ok = await test_ollama_connection()
    
    if ollama_ok:
        # –¢–µ—Å—Ç 4: –í–µ–±-—á–∞—Ç —Å –ø–∞–º—è—Ç—å—é
        chat_ok = await test_web_chat_memory()
        
        if chat_ok:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —á–∞—Ç —Å –ø–∞–º—è—Ç—å—é: python3 start_ollama_chat_memory.py")
            print("2. –ò–ª–∏ —á–µ—Ä–µ–∑ Docker: docker-compose -f docker-compose-ollama-memory.yml up -d")
            print("3. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:8503")
            print("4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç –∏ –Ω–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ!")
        else:
            print("\n‚ùå –¢–µ—Å—Ç –≤–µ–±-—á–∞—Ç–∞ —Å –ø–∞–º—è—Ç—å—é –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
            sys.exit(1)
    else:
        print("\n‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –∑–∞–ø—É—Å–∫ Ollama.")
        sys.exit(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)