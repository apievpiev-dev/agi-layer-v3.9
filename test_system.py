#!/usr/bin/env python3
"""
–†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ AGI Layer v3.9 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import sys
import os
import importlib
from pathlib import Path

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    modules_to_test = [
        'config.settings',
        'config.models', 
        'config.database',
        'agents.base_agent',
        'agents.meta_agent',
        'agents.telegram_agent',
        'agents.image_agent',
        'agents.text_agent',
        'agents.vision_agent',
        'agents.ocr_agent',
        'agents.embedding_agent',
        'agents.recovery_agent',
        'services.web_ui',
        'services.watchdog'
    ]
    
    failed_imports = []
    
    for module in modules_to_test:
        try:
            importlib.import_module(module)
            print(f"‚úÖ {module}")
        except Exception as e:
            print(f"‚ùå {module}: {e}")
            failed_imports.append(module)
    
    if failed_imports:
        print(f"\n‚ùå –ü–†–û–í–ê–õ: {len(failed_imports)} –º–æ–¥—É–ª–µ–π –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å")
        return False
    else:
        print(f"\n‚úÖ –£–°–ü–ï–•: –í—Å–µ {len(modules_to_test)} –º–æ–¥—É–ª–µ–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return True

def test_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîç –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from config.settings import settings
        from config.models import MODELS
        from config.database import CREATE_TABLES_SQL
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        assert hasattr(settings, 'POSTGRES_HOST')
        assert hasattr(settings, 'TELEGRAM_TOKEN')
        assert hasattr(settings, 'MODELS_PATH')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
        assert len(MODELS) == 5  # 5 CPU-only –º–æ–¥–µ–ª–µ–π
        assert 'stable_diffusion_1_5' in MODELS
        assert 'phi_2' in MODELS
        assert 'blip2' in MODELS
        assert 'easyocr' in MODELS
        assert 'sentence_transformers' in MODELS
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SQL —Å—Ö–µ–º—ã
        assert 'CREATE TABLE' in CREATE_TABLES_SQL
        assert 'agents' in CREATE_TABLES_SQL
        assert 'tasks' in CREATE_TABLES_SQL
        
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–Ω—ã")
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ö–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_agents_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–≥–µ–Ω—Ç–æ–≤"""
    print("\nüîç –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–≥–µ–Ω—Ç–æ–≤...")
    
    try:
        from agents.base_agent import BaseAgent, AgentStatus, Task
        from agents.meta_agent import MetaAgent
        from agents.image_agent import ImageAgent
        from agents.text_agent import TextAgent
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        assert issubclass(MetaAgent, BaseAgent)
        assert issubclass(ImageAgent, BaseAgent)
        assert issubclass(TextAgent, BaseAgent)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        required_methods = ['_initialize_agent', 'process_task', '_cleanup_agent']
        for method in required_methods:
            assert hasattr(BaseAgent, method)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        assert hasattr(AgentStatus, 'name')
        assert hasattr(AgentStatus, 'status')
        assert hasattr(Task, 'id')
        assert hasattr(Task, 'task_type')
        
        print("‚úÖ –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        print("‚úÖ –ê–≥–µ–Ω—Ç—ã –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return False

def test_docker_configuration():
    """–¢–µ—Å—Ç Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîç –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml
        with open('docker-compose.yml', 'r') as f:
            docker_compose = f.read()
            
        required_services = [
            'postgres', 'chromadb', 'redis',
            'meta_agent', 'telegram_agent', 'image_agent',
            'text_agent', 'vision_agent', 'ocr_agent',
            'embedding_agent', 'recovery_agent', 'web_ui', 'watchdog'
        ]
        
        for service in required_services:
            assert service in docker_compose, f"–°–µ—Ä–≤–∏—Å {service} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Dockerfile
        with open('Dockerfile', 'r') as f:
            dockerfile = f.read()
            
        assert 'FROM python:3.11-slim' in dockerfile
        assert 'WORKDIR /app' in dockerfile
        assert 'COPY requirements.txt' in dockerfile
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt
        with open('requirements.txt', 'r') as f:
            requirements = f.read()
            
        required_packages = [
            'fastapi', 'uvicorn', 'pydantic',
            'python-telegram-bot', 'torch',
            'transformers', 'diffusers', 'sentence-transformers',
            'opencv-python', 'easyocr', 'chromadb',
            'streamlit', 'asyncpg', 'aiohttp'
        ]
        
        for package in required_packages:
            assert package in requirements, f"–ü–∞–∫–µ—Ç {package} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        print("‚úÖ Docker-compose —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã")
        print("‚úÖ Dockerfile –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        print("‚úÖ Requirements.txt —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_file_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'main.py',
        'docker-compose.yml',
        'Dockerfile',
        'requirements.txt',
        'env.example',
        'README.md',
        'agents/__init__.py',
        'agents/base_agent.py',
        'agents/meta_agent.py',
        'agents/telegram_agent.py',
        'agents/image_agent.py',
        'agents/text_agent.py',
        'agents/vision_agent.py',
        'agents/ocr_agent.py',
        'agents/embedding_agent.py',
        'agents/recovery_agent.py',
        'config/settings.py',
        'config/models.py',
        'config/database.py',
        'services/__init__.py',
        'services/web_ui.py',
        'services/watchdog.py',
        'scripts/download_models.py',
        'scripts/setup.sh'
    ]
    
    missing_files = []
    
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
        else:
            print(f"‚úÖ {file_path}")
    
    if missing_files:
        print(f"\n‚ùå –ü–†–û–í–ê–õ: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    else:
        print(f"\n‚úÖ –£–°–ü–ï–•: –í—Å–µ {len(required_files)} —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω—ã")
        return True

def test_scripts():
    """–¢–µ—Å—Ç —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    print("\nüîç –¢–ï–°–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ download_models.py
        with open('scripts/download_models.py', 'r') as f:
            download_script = f.read()
            
        assert 'class ModelDownloader' in download_script
        assert 'def download_model' in download_script
        assert 'def download_all_models' in download_script
        assert 'stable_diffusion_1_5' in download_script
        assert 'phi_2' in download_script
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ setup.sh
        with open('scripts/setup.sh', 'r') as f:
            setup_script = f.read()
            
        assert 'docker-compose' in setup_script
        assert 'build' in setup_script
        assert 'up -d' in setup_script
        
        print("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        print("‚úÖ –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ AGI Layer v3.9")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_configuration,
        test_agents_structure,
        test_docker_configuration,
        test_file_structure,
        test_scripts
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total}")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£!")
        print("\n‚úÖ –ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
        print("  ‚Ä¢ –í—Å–µ 8 –∞–≥–µ–Ω—Ç–æ–≤ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        print("  ‚Ä¢ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        print("  ‚Ä¢ CPU-only –º–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã")
        print("  ‚Ä¢ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞")
        print("  ‚Ä¢ Web UI –≥–æ—Ç–æ–≤")
        print("  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("  1. cp env.example .env")
        print("  2. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        print("  3. ./scripts/setup.sh")
        return True
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

