#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram –±–æ—Ç–∞
"""

import asyncio
import aiohttp
import json

TOKEN = "8325306099:AAG6hk3tG2-XmiJPgegzYFzQcY6WJaEbRxw"
CHAT_ID = "458589236"
API_URL = f"https://api.telegram.org/bot{TOKEN}"

async def get_recent_messages():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{API_URL}/getUpdates"
            params = {"limit": 10, "timeout": 10}
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('ok'):
                        updates = data.get('result', [])
                        print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:")
                        print("=" * 50)
                        
                        for update in updates:
                            if 'message' in update:
                                message = update['message']
                                text = message.get('text', '')
                                user = message.get('from', {})
                                user_name = user.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                                chat_id = message.get('chat', {}).get('id', '')
                                date = message.get('date', '')
                                
                                print(f"üë§ –û—Ç: {user_name} (ID: {chat_id})")
                                print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {text}")
                                print(f"üïê –î–∞—Ç–∞: {date}")
                                print("-" * 30)
                        return updates
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ API: {data}")
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    return []

async def send_test_message():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"{API_URL}/sendMessage"
            data = {
                "chat_id": CHAT_ID,
                "text": "ü§ñ –¢–µ—Å—Ç: –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è!"
            }
            async with session.post(url, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get('ok'):
                        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞...")
    print("=" * 50)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await send_test_message()
    print()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    updates = await get_recent_messages()
    
    if not updates:
        print("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    else:
        print(f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(updates)} —Å–æ–æ–±—â–µ–Ω–∏–π")

if __name__ == "__main__":
    asyncio.run(main())