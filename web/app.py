"""
AGI Layer v3.9 - Web UI
=======================

Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ AGI —Å–∏—Å—Ç–µ–º—ã:
- –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å LLM
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
- –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"""

import asyncio
import json
import requests
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
from typing import Dict, List

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="AGI Layer v3.9",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #2E86AB;
        font-size: 3rem;
        margin-bottom: 2rem;
    }
    .agent-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        color: white;
    }
    .metric-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #2E86AB;
    }
    .success-box {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    .error-box {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

class AGIWebUI:
    """–ö–ª–∞—Å—Å –¥–ª—è Web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ AGI Layer"""
    
    def __init__(self):
        import os
        self.api_url = os.getenv("API_URL", "http://localhost:18080")
        
    def check_api_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        try:
            response = requests.get(f"{self.api_url}/health", timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def get_system_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            response = requests.get(f"{self.api_url}/status", timeout=10)
            if response.status_code == 200:
                return response.json()
        except:
            pass
        
        # –ó–∞–≥–ª—É—à–∫–∞ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        return {
            "meta_agent": {
                "status": "unknown",
                "uptime": 0
            },
            "agents": {},
            "statistics": {
                "total_agents": 0,
                "active_agents": 0,
                "failed_agents": 0
            }
        }
    
    def get_agent_logs(self, agent_name: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∞–≥–µ–Ω—Ç–∞"""
        try:
            response = requests.get(f"{self.api_url}/agents/{agent_name}/logs", timeout=5)
            if response.status_code == 200:
                return response.json().get("logs", [])
        except:
            pass
        return ["–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"]

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Web UI"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">ü§ñ AGI Layer v3.9</h1>', unsafe_allow_html=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
    ui = AGIWebUI()
    
    # –°–∞–π–¥–±–∞—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    st.sidebar.title("üõ†Ô∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    page = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:",
        ["üè† –ì–ª–∞–≤–Ω–∞—è", "ü§ñ –ê–≥–µ–Ω—Ç—ã", "üí¨ –ß–∞—Ç", "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è", "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "üìù –õ–æ–≥–∏", "üß† –ü–∞–º—è—Ç—å", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
    if not ui.check_api_connection():
        st.markdown("""
        <div class="error-box">
            ‚ö†Ô∏è <strong>API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</strong><br>
            –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º.<br>
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.
        </div>
        """, unsafe_allow_html=True)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    system_status = ui.get_system_status()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page == "üè† –ì–ª–∞–≤–Ω–∞—è":
        show_dashboard(system_status)
    elif page == "ü§ñ –ê–≥–µ–Ω—Ç—ã":
        show_agents(system_status)
    elif page == "üí¨ –ß–∞—Ç":
        show_chat()
    elif page == "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è":
        show_generation()
    elif page == "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥":
        show_monitoring(system_status)
    elif page == "üìù –õ–æ–≥–∏":
        show_logs(ui)
    elif page == "üß† –ü–∞–º—è—Ç—å":
        show_memory()
    elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        show_settings()

def show_dashboard(system_status: Dict):
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å"""
    st.header("üìä –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    col1, col2, col3, col4 = st.columns(4)
    
    stats = system_status.get("statistics", {})
    
    with col1:
        st.metric(
            "–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤",
            stats.get("total_agents", 0),
            delta=None
        )
    
    with col2:
        st.metric(
            "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤", 
            stats.get("active_agents", 0),
            delta=None
        )
    
    with col3:
        st.metric(
            "–û—à–∏–±–æ–∫",
            stats.get("failed_agents", 0),
            delta=None
        )
    
    with col4:
        uptime = system_status.get("meta_agent", {}).get("uptime", 0)
        st.metric(
            "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (–º–∏–Ω)",
            f"{int(uptime // 60)}",
            delta=None
        )
    
    # –°—Ç–∞—Ç—É—Å Meta Agent
    meta_status = system_status.get("meta_agent", {})
    if meta_status.get("status") == "running":
        st.markdown("""
        <div class="success-box">
            ‚úÖ <strong>Meta Agent –∞–∫—Ç–∏–≤–µ–Ω</strong><br>
            –°–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown("""
        <div class="error-box">
            ‚ùå <strong>Meta Agent –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω</strong><br>
            –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.
        </div>
        """, unsafe_allow_html=True)

def show_agents(system_status: Dict):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
    st.header("ü§ñ –ê–≥–µ–Ω—Ç—ã AI")
    
    agents = system_status.get("agents", {})
    
    if not agents:
        st.warning("–ê–≥–µ–Ω—Ç—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        return
    
    for agent_name, agent_info in agents.items():
        with st.expander(f"ü§ñ {agent_name.replace('_', ' ').title()}", expanded=True):
            col1, col2 = st.columns(2)
            
            with col1:
                st.write(f"**–°—Ç–∞—Ç—É—Å:** {agent_info.get('status', 'unknown')}")
                st.write(f"**–¢–∏–ø:** {agent_info.get('agent_type', 'unknown')}")
                st.write(f"**–ú–æ–¥–µ–ª—å:** {agent_info.get('model_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
            
            with col2:
                st.write(f"**–ü–∞–º—è—Ç—å:** {agent_info.get('memory_usage', 0):.1f} MB")
                st.write(f"**CPU:** {agent_info.get('cpu_usage', 0):.1f}%")
                st.write(f"**–û—à–∏–±–∫–∏:** {agent_info.get('error_count', 0)}")

def show_chat():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞ —Å LLM"""
    st.header("üí¨ –ß–∞—Ç —Å AI")
    
    # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ API
        with st.chat_message("assistant"):
            with st.spinner("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."):
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
                    api_response = requests.post(
                        f"{AGIWebUI().api_url}/generate",
                        json={"prompt": prompt, "model": "llama3.2:3b"},
                        timeout=60
                    )
                    
                    if api_response.status_code == 200:
                        result = api_response.json()
                        response = result.get("generated_text", "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                    else:
                        response = "‚ùå –û—à–∏–±–∫–∞ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ."
                        
                except Exception as e:
                    response = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
                
            st.markdown(response)
            st.session_state.messages.append({"role": "assistant", "content": response})

def show_generation():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    st.header("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        prompt = st.text_area(
            "–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –≥–æ—Ä–∞–º–∏, —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ",
            height=100
        )
        
        col1_1, col1_2 = st.columns(2)
        with col1_1:
            width = st.slider("–®–∏—Ä–∏–Ω–∞", 256, 1024, 512, 64)
        with col1_2:
            height = st.slider("–í—ã—Å–æ—Ç–∞", 256, 1024, 512, 64)
        
        if st.button("üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
            if prompt:
                with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
                    start_time = datetime.now()
                    try:
                        api_url = AGIWebUI().api_url
                        resp = requests.post(
                            f"{api_url}/generate/image",
                            json={
                                "prompt": prompt,
                                "width": width,
                                "height": height,
                                "num_images": 1
                            },
                            timeout=300
                        )
                        if resp.status_code == 200:
                            data = resp.json()
                            if data.get("status") == "completed" and data.get("image_base64"):
                                import base64
                                img_bytes = base64.b64decode(data["image_base64"]) 
                                st.image(img_bytes, caption="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
                                elapsed = (datetime.now() - start_time).total_seconds()
                                st.success(f"–ì–æ—Ç–æ–≤–æ –∑–∞ {elapsed:.1f} —Å–µ–∫")
                            else:
                                st.warning(data.get("message", "–ó–∞–¥–∞—á–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"))
                        else:
                            st.error("–û—à–∏–±–∫–∞ API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞: {e}")
            else:
                st.warning("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
    
    with col2:
        st.markdown("### üéØ –°–æ–≤–µ—Ç—ã:")
        st.markdown("""
        - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
        - –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å—Ç–∏–ª—å: "—Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ", "–∞—Ä—Ç", "–∞–Ω–∏–º–µ"
        - –î–æ–±–∞–≤–ª—è–π—Ç–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ: "–º—è–≥–∫–∏–π —Å–≤–µ—Ç", "–¥—Ä–∞–º–∞—Ç–∏—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"
        - –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é: "–∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω", "–ø–∞–Ω–æ—Ä–∞–º–∞"
        """)

def show_monitoring(system_status: Dict):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    st.header("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    st.subheader("üíª –†–µ—Å—É—Ä—Å—ã —Å–µ—Ä–≤–µ—Ä–∞")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
        cpu_usage = 25  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        fig_cpu = go.Figure(go.Indicator(
            mode = "gauge+number",
            value = cpu_usage,
            domain = {'x': [0, 1], 'y': [0, 1]},
            title = {'text': "CPU %"},
            gauge = {'axis': {'range': [None, 100]},
                    'bar': {'color': "darkblue"},
                    'steps': [
                        {'range': [0, 50], 'color': "lightgray"},
                        {'range': [50, 80], 'color': "yellow"},
                        {'range': [80, 100], 'color': "red"}],
                    'threshold': {'line': {'color': "red", 'width': 4},
                                'thickness': 0.75, 'value': 90}}))
        fig_cpu.update_layout(height=300)
        st.plotly_chart(fig_cpu, use_container_width=True)
    
    with col2:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RAM
        ram_usage = 15  # 15GB –∏–∑ 128GB
        fig_ram = go.Figure(go.Indicator(
            mode = "gauge+number",
            value = ram_usage,
            domain = {'x': [0, 1], 'y': [0, 1]},
            title = {'text': "RAM GB"},
            gauge = {'axis': {'range': [None, 128]},
                    'bar': {'color': "green"},
                    'steps': [
                        {'range': [0, 64], 'color': "lightgray"},
                        {'range': [64, 96], 'color': "yellow"},
                        {'range': [96, 128], 'color': "red"}]}))
        fig_ram.update_layout(height=300)
        st.plotly_chart(fig_ram, use_container_width=True)
    
    with col3:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
        disk_usage = 8  # 8GB –∏–∑ 1800GB
        fig_disk = go.Figure(go.Indicator(
            mode = "gauge+number",
            value = disk_usage,
            domain = {'x': [0, 1], 'y': [0, 1]},
            title = {'text': "–î–∏—Å–∫ GB"},
            gauge = {'axis': {'range': [None, 1800]},
                    'bar': {'color': "purple"},
                    'steps': [
                        {'range': [0, 900], 'color': "lightgray"},
                        {'range': [900, 1350], 'color': "yellow"},
                        {'range': [1350, 1800], 'color': "red"}]}))
        fig_disk.update_layout(height=300)
        st.plotly_chart(fig_disk, use_container_width=True)

def show_logs(ui):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–æ–≤"""
    st.header("üìù –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    # –í—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞
    agent_name = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç:",
        ["meta_agent", "llm_agent", "vision_agent", "image_gen_agent", "api_server"]
    )
    
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏"):
        logs = ui.get_agent_logs(agent_name)
        
        st.subheader(f"üìÑ –õ–æ–≥–∏ {agent_name}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–≥–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        log_container = st.container()
        with log_container:
            for log_line in logs[-50:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
                st.text(log_line)

def show_settings():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    
def show_memory():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é"""
    st.header("üß† –ü–∞–º—è—Ç—å")
    ui = AGIWebUI()
    api_url = ui.api_url

    st.subheader("–ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å")
    with st.form("memory_store_form"):
        content = st.text_area("–¢–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", height=120)
        meta = st.text_input("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (JSON)", value="{}")
        submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        if submitted:
            try:
                import json as _json
                metadata = _json.loads(meta) if meta.strip() else {}
                resp = requests.post(f"{api_url}/memory/store", json={"content": content, "metadata": metadata}, timeout=20)
                if resp.status_code == 200:
                    st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                else:
                    st.error(f"–û—à–∏–±–∫–∞ API: {resp.text}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")

    st.subheader("–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏")
    with st.form("memory_search_form"):
        query = st.text_input("–ó–∞–ø—Ä–æ—Å")
        nres = st.slider("–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 1, 10, 5)
        submitted = st.form_submit_button("üîé –ò—Å–∫–∞—Ç—å")
        if submitted:
            try:
                resp = requests.post(f"{api_url}/memory/search", json={"query": query, "n_results": nres}, timeout=20)
                if resp.status_code == 200:
                    data = resp.json()
                    st.json(data)
                else:
                    st.error(f"–û—à–∏–±–∫–∞ API: {resp.text}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
    st.subheader("ü§ñ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤")
    
    with st.expander("LLM Agent –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        model_name = st.selectbox(
            "–ú–æ–¥–µ–ª—å:",
            ["llama3.2:3b", "phi3:3.8b", "qwen2.5:7b"]
        )
        max_tokens = st.slider("–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤:", 128, 4096, 1024)
        temperature = st.slider("Temperature:", 0.1, 2.0, 0.7, 0.1)
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM"):
            st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    st.subheader("üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    with st.expander("–†–µ—Å—É—Ä—Å—ã"):
        max_memory = st.slider("–ú–∞–∫—Å–∏–º—É–º –ø–∞–º—è—Ç–∏ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ (GB):", 4, 32, 16)
        max_cpu = st.slider("–ú–∞–∫—Å–∏–º—É–º CPU —è–¥–µ—Ä –Ω–∞ –∞–≥–µ–Ω—Ç–∞:", 1, 16, 4)
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã"):
            st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π
    st.subheader("üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É", type="secondary"):
            st.info("–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    with col2:
        if st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É", type="secondary"):
            st.warning("–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    
    with col3:
        if st.button("üìã –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", type="secondary"):
            st.success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!")


if __name__ == "__main__":
    # –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ
    with st.sidebar:
        st.markdown("---")
        st.markdown("### üöÄ –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
        # –ë–µ—Ä—ë–º —Å—Ç–∞—Ç—É—Å—ã –∏–∑ API
        try:
            api_url = AGIWebUI().api_url
            health = requests.get(f"{api_url}/health", timeout=5).json()
            if health.get("status") == "healthy":
                st.success("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
                models = health.get("available_models", [])
                st.write(f"üì¶ –ú–æ–¥–µ–ª–µ–π Ollama: {len(models)}")
            else:
                st.warning("‚ö†Ô∏è API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å–æ–æ–±—â–∞–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö")
        except Exception:
            st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    main()
