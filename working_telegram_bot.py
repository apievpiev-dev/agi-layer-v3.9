#!/usr/bin/env python3
"""
–†–ê–ë–û–ß–ò–ô Telegram –±–æ—Ç AGI Layer v3.9
–ü—Ä–æ—Å—Ç–æ–π, —á–µ—Å—Ç–Ω—ã–π, –±–µ–∑ –≤—Ä–∞–Ω—å—è - —Ç–æ–ª—å–∫–æ —Ç–æ —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
"""

import asyncio
import logging
import aiohttp
import os
import torch
import random
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = '8325306099:AAG6hk3tG2-XmiJPgegzYFzQcY6WJaEbRxw'
CHAT_ID = '458589236'
API_URL = f"https://api.telegram.org/bot{TOKEN}"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class WorkingBot:
    """–ü—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—á–∏–π –±–æ—Ç"""
    
    def __init__(self):
        self.token = TOKEN
        self.chat_id = CHAT_ID
        self.api_url = API_URL
        self.last_update_id = 0
        
        # –¢–æ–ª—å–∫–æ Stable Diffusion - –æ–Ω–∞ —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
        self.image_pipeline = None
        self.device = "cpu"
        
    async def load_image_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á—Ç–æ —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)"""
        try:
            from diffusers import StableDiffusionPipeline
            
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ Stable Diffusion...")
            
            self.image_pipeline = StableDiffusionPipeline.from_pretrained(
                "runwayml/stable-diffusion-v1-5",
                torch_dtype=torch.float32,
                safety_checker=None,
                requires_safety_checker=False
            )
            
            self.image_pipeline.enable_attention_slicing()
            
            logger.info("‚úÖ Stable Diffusion –∑–∞–≥—Ä—É–∂–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SD: {e}")
            return False
    
    def get_response(self, message: str, user_name: str) -> str:
        """–ü—Ä–æ—Å—Ç—ã–µ —á–µ—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"""
        msg = message.lower()
        
        if '–ø—Ä–∏–≤–µ—Ç' in msg or 'hello' in msg:
            return f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç AGI Layer v3.9. –£–º–µ—é —Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ Stable Diffusion. –ß—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å?"
        
        elif '—á—Ç–æ —É–º–µ–µ—à—å' in msg or '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏' in msg:
            return """–ß–µ—Å—Ç–Ω–æ –æ —Ç–æ–º, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:

‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (Stable Diffusion v1.5)
‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π

‚ùå –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç:
- –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
- –°–ª–æ–∂–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
- –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '–Ω–∞—Ä–∏—Å—É–π –∫–æ—Ç–∞ –≤ –∫–æ—Å–º–æ—Å–µ'"""
        
        elif any(word in msg for word in ['–Ω–∞—Ä–∏—Å—É–π', '—Å–æ–∑–¥–∞–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π']):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á—Ç–æ —Ä–∏—Å–æ–≤–∞—Ç—å
            prompt = msg
            for word in ['–Ω–∞—Ä–∏—Å—É–π', '—Å–æ–∑–¥–∞–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–∫–∞—Ä—Ç–∏–Ω–∫—É', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ']:
                prompt = prompt.replace(word, '').strip()
            
            if len(prompt) > 2:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
                asyncio.create_task(self._generate_image(prompt))
                return f"üé® –†–∏—Å—É—é: '{prompt}'\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 –º–∏–Ω—É—Ç—ã..."
            else:
                return "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å? –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ!"
        
        elif 'python' in msg:
            return "Python - –æ—Ç–ª–∏—á–Ω—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è! –ü—Ä–æ—Å—Ç–æ–π, –º–æ—â–Ω—ã–π, –ø–æ–ø—É–ª—è—Ä–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ò–ò, –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö."
        
        elif any(word in msg for word in ['—Ç—É–ø–æ–π', '–≥–ª—É–ø—ã–π', '–¥–µ–±–∏–ª']):
            return "–î–∞, –≤—ã –ø—Ä–∞–≤—ã! üòÖ –ú–æ–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç—ã–µ. –ù–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å."
        
        elif '—Å–ø–∞—Å–∏–±–æ' in msg:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä"
        
        else:
            responses = [
                f"–ü–æ–Ω—è–ª, {user_name}! –ú–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç—ã–µ, –Ω–æ —è —á–µ—Å—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—é. –õ—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–∏—Å–æ–≤–∞—Ç—å!",
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å - —ç—Ç–æ —É –º–µ–Ω—è —Ö–æ—Ä–æ—à–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è.",
                f"–ü–æ–Ω–∏–º–∞—é! –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —è –ø–æ–∫–∞ —Å–ª–∞–±–æ–≤–∞—Ç, –Ω–æ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É!"
            ]
            return random.choice(responses)
    
    async def _generate_image(self, prompt: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            if not self.image_pipeline:
                await self.send_message("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return
            
            logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é: {prompt}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º
            image = self.image_pipeline(
                prompt=f"{prompt}, high quality, detailed",
                negative_prompt="low quality, blurry",
                num_inference_steps=25,
                guidance_scale=8.0,
                height=512,
                width=512
            ).images[0]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            timestamp = datetime.now().timestamp()
            image_path = f"/workspace/data/working_{timestamp}.png"
            os.makedirs("/workspace/data", exist_ok=True)
            image.save(image_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            await self.send_photo(image_path, f"üé® –ì–æ—Ç–æ–≤–æ: '{prompt}'")
            
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {image_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            await self.send_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
    
    async def send_message(self, text, chat_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            target_chat_id = chat_id or self.chat_id
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/sendMessage"
                data = {"chat_id": target_chat_id, "text": text}
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get('ok'):
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text[:50]}...")
                            return True
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status}")
                    return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False
    
    async def send_photo(self, photo_path, caption="", chat_id=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ"""
        try:
            target_chat_id = chat_id or self.chat_id
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/sendPhoto"
                
                with open(photo_path, 'rb') as photo:
                    data = aiohttp.FormData()
                    data.add_field('chat_id', target_chat_id)
                    data.add_field('photo', photo, filename='working.png')
                    data.add_field('caption', caption)
                    
                    async with session.post(url, data=data) as response:
                        if response.status == 200:
                            result = await response.json()
                            if result.get('ok'):
                                logger.info(f"–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {caption[:30]}...")
                                return True
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {response.status}")
                        return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            return False
    
    async def get_updates(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.api_url}/getUpdates"
                params = {"offset": self.last_update_id + 1, "timeout": 30}
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('ok'):
                            return data.get('result', [])
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ getUpdates: {response.status}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return []
    
    async def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            text = message.get('text', '')
            chat_id = message['chat']['id']
            user_name = message['from'].get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            
            logger.info(f"–ü–û–õ–£–ß–ï–ù–û –æ—Ç {user_name}: '{text}'")
            
            if len(text.strip()) < 1:
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = self.get_response(text, user_name)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            success = await self.send_message(response, chat_id)
            
            if success:
                logger.info(f"–û–¢–í–ï–¢–ò–õ: {response[:50]}...")
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Working Bot")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        if await self.load_image_model():
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        await self.send_message("""ü§ñ Working Bot –∑–∞–ø—É—â–µ–Ω!

–ß–ï–°–¢–ù–û:
‚úÖ Stable Diffusion —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç  
‚úÖ Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '–Ω–∞—Ä–∏—Å—É–π –∫–æ—Ç–∞' –∏–ª–∏ '—á—Ç–æ —É–º–µ–µ—à—å'""")
        
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            try:
                updates = await self.get_updates()
                
                if updates:
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
                
                for update in updates:
                    self.last_update_id = update['update_id']
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é update {self.last_update_id}")
                    
                    if 'message' in update:
                        await self.process_message(update['message'])
                
                await asyncio.sleep(1)
                
            except KeyboardInterrupt:
                logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)


async def main():
    bot = WorkingBot()
    await bot.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")